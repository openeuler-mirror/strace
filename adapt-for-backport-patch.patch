From e54ac64d2d3a4124a0836fbeec27674bc8da0f14 Mon Sep 17 00:00:00 2001
From: zhangguangzhi <zhangguangzhi3@huawei.com>
Date: Fri, 21 Jun 2019 18:26:20 -0400
Subject: [PATCH] strace: adapt for backport patch

Signed-off-by: zhangguangzhi <zhangguangzhi3@huawei.com>
---
 Makefile.in                        |   68 +-
 xlat/Makemodule.am                 |   12 +-
 xlat/af_packet_versions.h          |   46 ++
 xlat/ax25_protocols.h              |  130 ++++
 xlat/bpf_task_fd_type.h            |   70 ++
 xlat/evdev_ev.h                    |    7 +-
 xlat/futexbitset.h                 |   30 +
 xlat/ioprio_class.h                |   28 +
 xlat/ioprio_who.h                  |   21 +
 xlat/kvm_cap.h                     | 1302 ++++++++++++++++++++++++++++++++++++
 xlat/nbd_ioctl_cmds.h              |  110 +++
 xlat/nbd_ioctl_flags.h             |  128 ++++
 xlat/pr_spec_cmds.h                |   10 +-
 xlat/ptrace_cmds.h                 |    7 +-
 xlat/random_ioctl_cmds.h           |   78 +++
 xlat/rtnl_ifla_brport_attrs.h      |    8 +
 xlat/rtnl_ifla_xdp_attached_mode.h |   62 ++
 xlat/rtnl_ifla_xdp_attrs.h         |   24 +
 xlat/rtnl_link_attrs.h             |   16 +
 xlat/rtnl_netconf_attrs.h          |    8 +
 xlat/smc_decl_codes.h              |  151 +++++
 xlat/smc_diag_mode.h               |   46 ++
 xlat/sock_ax25_options.h           |  116 ++++
 xlat/sock_shutdown_flags.h         |   38 ++
 xlat/sock_xdp_options.h            |   78 +++
 xlat/socketlayers.h                |   24 +
 xlat/socktypes.h                   |   83 ++-
 xlat/v4l2_control_id_bases.h       |   23 +-
 28 files changed, 2683 insertions(+), 41 deletions(-)
 create mode 100644 xlat/af_packet_versions.h
 create mode 100644 xlat/ax25_protocols.h
 create mode 100644 xlat/bpf_task_fd_type.h
 create mode 100644 xlat/futexbitset.h
 create mode 100644 xlat/kvm_cap.h
 create mode 100644 xlat/nbd_ioctl_cmds.h
 create mode 100644 xlat/nbd_ioctl_flags.h
 create mode 100644 xlat/random_ioctl_cmds.h
 create mode 100644 xlat/rtnl_ifla_xdp_attached_mode.h
 create mode 100644 xlat/smc_decl_codes.h
 create mode 100644 xlat/smc_diag_mode.h
 create mode 100644 xlat/sock_ax25_options.h
 create mode 100644 xlat/sock_shutdown_flags.h
 create mode 100644 xlat/sock_xdp_options.h

diff --git a/Makefile.in b/Makefile.in
index f716df9..e8ba613 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -343,7 +343,7 @@ am__strace_SOURCES_DIST = access.c affinity.c aio.c alpha.c \
 	linux/x86_64/asm_stat.h listen.c lookup_dcookie.c loop.c \
 	lseek.c macros.h mem.c membarrier.c memfd_create.c mknod.c \
 	mmap_notify.c mmap_notify.h mmsghdr.c mount.c mpers_type.h \
-	mq.c msghdr.c msghdr.h mtd.c native_defs.h negated_errno.h \
+	mq.c msghdr.c msghdr.h mtd.c native_defs.h nbd_ioctl.c negated_errno.h \
 	net.c netlink.c netlink.h netlink_crypto.c \
 	netlink_kobject_uevent.c netlink_kobject_uevent.h \
 	netlink_sock_diag.h netlink_inet_diag.c netlink_netfilter.c \
@@ -359,7 +359,7 @@ am__strace_SOURCES_DIST = access.c affinity.c aio.c alpha.c \
 	print_statfs.c print_struct_stat.c print_time.c \
 	print_timespec.c print_timeval.c print_timex.c printmode.c \
 	printrusage.c printsiginfo.c printsiginfo.h process.c \
-	process_vm.c ptp.c ptrace.h quota.c readahead.c readlink.c \
+	process_vm.c ptp.c ptrace.h quota.c random_ioctl.c readahead.c readlink.c \
 	reboot.c regs.h renameat.c resource.c retval.c retval.h \
 	riscv.c rt_sigframe.c rt_sigreturn.c rtc.c rtnl_addr.c \
 	rtnl_addrlabel.c rtnl_dcb.c rtnl_link.c rtnl_mdb.c \
@@ -432,6 +432,7 @@ am_strace_OBJECTS = strace-access.$(OBJEXT) strace-affinity.$(OBJEXT) \
 	strace-mmap_notify.$(OBJEXT) strace-mmsghdr.$(OBJEXT) \
 	strace-mount.$(OBJEXT) strace-mq.$(OBJEXT) \
 	strace-msghdr.$(OBJEXT) strace-mtd.$(OBJEXT) \
+	strace-nbd_ioctl.$(OBJEXT) \
 	strace-net.$(OBJEXT) strace-netlink.$(OBJEXT) \
 	strace-netlink_crypto.$(OBJEXT) \
 	strace-netlink_kobject_uevent.$(OBJEXT) \
@@ -462,6 +463,7 @@ am_strace_OBJECTS = strace-access.$(OBJEXT) strace-affinity.$(OBJEXT) \
 	strace-printrusage.$(OBJEXT) strace-printsiginfo.$(OBJEXT) \
 	strace-process.$(OBJEXT) strace-process_vm.$(OBJEXT) \
 	strace-ptp.$(OBJEXT) strace-quota.$(OBJEXT) \
+	strace-random_ioctl.$(OBJEXT) \
 	strace-readahead.$(OBJEXT) strace-readlink.$(OBJEXT) \
 	strace-reboot.$(OBJEXT) strace-renameat.$(OBJEXT) \
 	strace-resource.$(OBJEXT) strace-retval.$(OBJEXT) \
@@ -859,6 +861,7 @@ XLAT_INPUT_FILES = xlat/access_flags.in xlat/addrfams.in \
 	xlat/bpf_op_jmp.in xlat/bpf_prog_flags.in \
 	xlat/bpf_prog_types.in xlat/bpf_query_flags.in \
 	xlat/bpf_rval.in xlat/bpf_size.in xlat/bpf_src.in \
+	xlat/bpf_task_fd_type.in \
 	xlat/bsg_flags.in xlat/bsg_protocol.in xlat/bsg_subprotocol.in \
 	xlat/bt_protocols.in xlat/btrfs_balance_args.in \
 	xlat/btrfs_balance_ctl_cmds.in xlat/btrfs_balance_flags.in \
@@ -899,8 +902,8 @@ XLAT_INPUT_FILES = xlat/access_flags.in xlat/addrfams.in \
 	xlat/fan_mark_flags.in xlat/fcntlcmds.in xlat/fdflags.in \
 	xlat/fib_rule_actions.in xlat/fib_rule_flags.in \
 	xlat/fiemap_extent_flags.in xlat/fiemap_flags.in \
-	xlat/flockcmds.in xlat/fsmagic.in xlat/futexops.in \
-	xlat/futexwakecmps.in xlat/futexwakeops.in \
+	xlat/flockcmds.in xlat/fsmagic.in xlat/futexbitset.in \
+	xlat/futexops.in xlat/futexwakecmps.in xlat/futexwakeops.in \
 	xlat/getrandom_flags.in xlat/getsock_ip_options.in \
 	xlat/getsock_ipv6_options.in xlat/getsock_options.in \
 	xlat/hci_channels.in xlat/hw_breakpoint_len.in \
@@ -937,6 +940,7 @@ XLAT_INPUT_FILES = xlat/access_flags.in xlat/addrfams.in \
 	xlat/mtd_mode_options.in xlat/mtd_nandecc_options.in \
 	xlat/mtd_otp_options.in xlat/mtd_type_options.in \
 	xlat/multicast_router_types.in xlat/name_to_handle_at_flags.in \
+	xlat/nbd_ioctl_cmds.in \
 	xlat/neighbor_cache_entry_flags.in \
 	xlat/neighbor_cache_entry_states.in xlat/netfilter_versions.in \
 	xlat/netlink_ack_flags.in xlat/netlink_delete_flags.in \
@@ -981,7 +985,8 @@ XLAT_INPUT_FILES = xlat/access_flags.in xlat/addrfams.in \
 	xlat/ptrace_cmds.in xlat/ptrace_events.in \
 	xlat/ptrace_peeksiginfo_flags.in \
 	xlat/ptrace_setoptions_flags.in xlat/quota_formats.in \
-	xlat/quotacmds.in xlat/quotatypes.in xlat/rename_flags.in \
+	xlat/quotacmds.in xlat/quotatypes.in \
+	xlat/random_ioctl_cmds.in xlat/rename_flags.in \
 	xlat/resource_flags.in xlat/resources.in \
 	xlat/riscv_flush_icache_flags.in xlat/route_nexthop_flags.in \
 	xlat/routing_flags.in xlat/routing_protocols.in \
@@ -1097,7 +1102,8 @@ XLAT_HEADER_FILES = xlat/access_flags.h xlat/addrfams.h \
 	xlat/bpf_miscop.h xlat/bpf_mode.h xlat/bpf_op_alu.h \
 	xlat/bpf_op_jmp.h xlat/bpf_prog_flags.h xlat/bpf_prog_types.h \
 	xlat/bpf_query_flags.h xlat/bpf_rval.h xlat/bpf_size.h \
-	xlat/bpf_src.h xlat/bsg_flags.h xlat/bsg_protocol.h \
+	xlat/bpf_src.h xlat/bpf_task_fd_type.h \
+	xlat/bsg_flags.h xlat/bsg_protocol.h \
 	xlat/bsg_subprotocol.h xlat/bt_protocols.h \
 	xlat/btrfs_balance_args.h xlat/btrfs_balance_ctl_cmds.h \
 	xlat/btrfs_balance_flags.h xlat/btrfs_balance_state.h \
@@ -1134,8 +1140,8 @@ XLAT_HEADER_FILES = xlat/access_flags.h xlat/addrfams.h \
 	xlat/fan_mark_flags.h xlat/fcntlcmds.h xlat/fdflags.h \
 	xlat/fib_rule_actions.h xlat/fib_rule_flags.h \
 	xlat/fiemap_extent_flags.h xlat/fiemap_flags.h \
-	xlat/flockcmds.h xlat/fsmagic.h xlat/futexops.h \
-	xlat/futexwakecmps.h xlat/futexwakeops.h \
+	xlat/flockcmds.h xlat/fsmagic.h xlat/futexbitset.h \
+	xlat/futexops.h xlat/futexwakecmps.h xlat/futexwakeops.h \
 	xlat/getrandom_flags.h xlat/getsock_ip_options.h \
 	xlat/getsock_ipv6_options.h xlat/getsock_options.h \
 	xlat/hci_channels.h xlat/hw_breakpoint_len.h \
@@ -1171,6 +1177,7 @@ XLAT_HEADER_FILES = xlat/access_flags.h xlat/addrfams.h \
 	xlat/mtd_mode_options.h xlat/mtd_nandecc_options.h \
 	xlat/mtd_otp_options.h xlat/mtd_type_options.h \
 	xlat/multicast_router_types.h xlat/name_to_handle_at_flags.h \
+	xlat/nbd_ioctl_cmds.h \
 	xlat/neighbor_cache_entry_flags.h \
 	xlat/neighbor_cache_entry_states.h xlat/netfilter_versions.h \
 	xlat/netlink_ack_flags.h xlat/netlink_delete_flags.h \
@@ -1211,7 +1218,8 @@ XLAT_HEADER_FILES = xlat/access_flags.h xlat/addrfams.h \
 	xlat/priorities.h xlat/ptp_flags_options.h xlat/ptrace_cmds.h \
 	xlat/ptrace_events.h xlat/ptrace_peeksiginfo_flags.h \
 	xlat/ptrace_setoptions_flags.h xlat/quota_formats.h \
-	xlat/quotacmds.h xlat/quotatypes.h xlat/rename_flags.h \
+	xlat/quotacmds.h xlat/quotatypes.h \
+	xlat\random_ioctl_cmds.h xlat/rename_flags.h \
 	xlat/resource_flags.h xlat/resources.h \
 	xlat/riscv_flush_icache_flags.h xlat/route_nexthop_flags.h \
 	xlat/routing_flags.h xlat/routing_protocols.h \
@@ -1360,7 +1368,7 @@ strace_SOURCES = access.c affinity.c aio.c alpha.c arch_defs.h \
 	listen.c lookup_dcookie.c loop.c lseek.c macros.h mem.c \
 	membarrier.c memfd_create.c mknod.c mmap_notify.c \
 	mmap_notify.h mmsghdr.c mount.c mpers_type.h mq.c msghdr.c \
-	msghdr.h mtd.c native_defs.h negated_errno.h net.c netlink.c \
+	msghdr.h mtd.c native_defs.h nbd_ioctl.c negated_errno.h net.c netlink.c \
 	netlink.h netlink_crypto.c netlink_kobject_uevent.c \
 	netlink_kobject_uevent.h netlink_sock_diag.h \
 	netlink_inet_diag.c netlink_netfilter.c netlink_netlink_diag.c \
@@ -1376,7 +1384,7 @@ strace_SOURCES = access.c affinity.c aio.c alpha.c arch_defs.h \
 	print_statfs.c print_struct_stat.c print_time.c \
 	print_timespec.c print_timeval.c print_timex.c printmode.c \
 	printrusage.c printsiginfo.c printsiginfo.h process.c \
-	process_vm.c ptp.c ptrace.h quota.c readahead.c readlink.c \
+	process_vm.c ptp.c ptrace.h quota.c random_ioctl.c readahead.c readlink.c \
 	reboot.c regs.h renameat.c resource.c retval.c retval.h \
 	riscv.c rt_sigframe.c rt_sigreturn.c rtc.c rtnl_addr.c \
 	rtnl_addrlabel.c rtnl_dcb.c rtnl_link.c rtnl_mdb.c \
@@ -2374,6 +2382,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-mq.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-msghdr.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-mtd.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-nbd_ioctl.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-net.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-netlink.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-netlink_crypto.Po@am__quote@
@@ -2423,6 +2432,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-process_vm.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-ptp.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-quota.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-random_ioctl.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-readahead.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-readlink.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strace-reboot.Po@am__quote@
@@ -5117,6 +5127,20 @@ strace-mtd.obj: mtd.c
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(strace_CPPFLAGS) $(CPPFLAGS) $(strace_CFLAGS) $(CFLAGS) -c -o strace-mtd.obj `if test -f 'mtd.c'; then $(CYGPATH_W) 'mtd.c'; else $(CYGPATH_W) '$(srcdir)/mtd.c'; fi`
 
+strace-nbd_ioctl.o: nbd_ioctl.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(strace_CPPFLAGS) $(CPPFLAGS) $(strace_CFLAGS) $(CFLAGS) -MT strace-nbd_ioctl.o -MD -MP -MF $(DEPDIR)/strace-nbd_ioctl.Tpo -c -o strace-nbd_ioctl.o `test -f 'nbd_ioctl.c' || echo '$(srcdir)/'`nbd_ioctl.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/strace-nbd_ioctl.Tpo $(DEPDIR)/strace-nbd_ioctl.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='nbd_ioctl.c' object='strace-nbd_ioctl.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(strace_CPPFLAGS) $(CPPFLAGS) $(strace_CFLAGS) $(CFLAGS) -c -o strace-nbd_ioctl.o `test -f 'nbd_ioctl.c' || echo '$(srcdir)/'`nbd_ioctl.c
+
+strace-nbd_ioctl.obj: nbd_ioctl.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(strace_CPPFLAGS) $(CPPFLAGS) $(strace_CFLAGS) $(CFLAGS) -MT strace-nbd_ioctl.obj -MD -MP -MF $(DEPDIR)/strace-nbd_ioctl.Tpo -c -o strace-nbd_ioctl.obj `if test -f 'nbd_ioctl.c'; then $(CYGPATH_W) 'nbd_ioctl.c'; else $(CYGPATH_W) '$(srcdir)/nbd_ioctl.c'; fi`
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/strace-nbd_ioctl.Tpo $(DEPDIR)/strace-nbd_ioctl.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='nbd_ioctl.c' object='strace-nbd_ioctl.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(strace_CPPFLAGS) $(CPPFLAGS) $(strace_CFLAGS) $(CFLAGS) -c -o strace-nbd_ioctl.obj `if test -f 'nbd_ioctl.c'; then $(CYGPATH_W) 'nbd_ioctl.c'; else $(CYGPATH_W) '$(srcdir)/nbd_ioctl.c'; fi`
+
 strace-net.o: net.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(strace_CPPFLAGS) $(CPPFLAGS) $(strace_CFLAGS) $(CFLAGS) -MT strace-net.o -MD -MP -MF $(DEPDIR)/strace-net.Tpo -c -o strace-net.o `test -f 'net.c' || echo '$(srcdir)/'`net.c
 @am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/strace-net.Tpo $(DEPDIR)/strace-net.Po
@@ -5803,6 +5827,20 @@ strace-quota.obj: quota.c
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(strace_CPPFLAGS) $(CPPFLAGS) $(strace_CFLAGS) $(CFLAGS) -c -o strace-quota.obj `if test -f 'quota.c'; then $(CYGPATH_W) 'quota.c'; else $(CYGPATH_W) '$(srcdir)/quota.c'; fi`
 
+strace-random_ioctl.o: random_ioctl.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(strace_CPPFLAGS) $(CPPFLAGS) $(strace_CFLAGS) $(CFLAGS) -MT strace-random_ioctl.o -MD -MP -MF $(DEPDIR)/strace-random_ioctl.Tpo -c -o strace-random_ioctl.o `test -f 'random_ioctl.c' || echo '$(srcdir)/'`random_ioctl.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/strace-random_ioctl.Tpo $(DEPDIR)/strace-random_ioctl.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='random_ioctl.c' object='strace-random_ioctl.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(strace_CPPFLAGS) $(CPPFLAGS) $(strace_CFLAGS) $(CFLAGS) -c -o strace-random_ioctl.o `test -f 'random_ioctl.c' || echo '$(srcdir)/'`random_ioctl.c
+
+strace-random_ioctl.obj: random_ioctl.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(strace_CPPFLAGS) $(CPPFLAGS) $(strace_CFLAGS) $(CFLAGS) -MT strace-random_ioctl.obj -MD -MP -MF $(DEPDIR)/strace-random_ioctl.Tpo -c -o strace-random_ioctl.obj `if test -f 'random_ioctl.c'; then $(CYGPATH_W) 'random_ioctl.c'; else $(CYGPATH_W) '$(srcdir)/random_ioctl.c'; fi`
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/strace-random_ioctl.Tpo $(DEPDIR)/strace-random_ioctl.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='random_ioctl.c' object='strace-random_ioctl.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(strace_CPPFLAGS) $(CPPFLAGS) $(strace_CFLAGS) $(CFLAGS) -c -o strace-random_ioctl.obj `if test -f 'random_ioctl.c'; then $(CYGPATH_W) 'random_ioctl.c'; else $(CYGPATH_W) '$(srcdir)/random_ioctl.c'; fi`
+
 strace-readahead.o: readahead.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(strace_CPPFLAGS) $(CPPFLAGS) $(strace_CFLAGS) $(CFLAGS) -MT strace-readahead.o -MD -MP -MF $(DEPDIR)/strace-readahead.Tpo -c -o strace-readahead.o `test -f 'readahead.c' || echo '$(srcdir)/'`readahead.c
 @am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/strace-readahead.Tpo $(DEPDIR)/strace-readahead.Po
@@ -7457,6 +7495,8 @@ $(top_srcdir)/xlat/bpf_size.h: $(top_srcdir)/xlat/bpf_size.in $(top_srcdir)/xlat
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/bpf_src.h: $(top_srcdir)/xlat/bpf_src.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
+$(top_srcdir)/xlat/bpf_task_fd_type.h: $(top_srcdir)/xlat/bpf_task_fd_type.in $(top_srcdir)/xlat/gen.sh
+	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/bsg_flags.h: $(top_srcdir)/xlat/bsg_flags.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/bsg_protocol.h: $(top_srcdir)/xlat/bsg_protocol.in $(top_srcdir)/xlat/gen.sh
@@ -7627,6 +7667,8 @@ $(top_srcdir)/xlat/fiemap_flags.h: $(top_srcdir)/xlat/fiemap_flags.in $(top_srcd
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/flockcmds.h: $(top_srcdir)/xlat/flockcmds.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
+$(top_srcdir)/xlat/futexbitset.h: $(top_srcdir)/xlat/futexbitset.in $(top_srcdir)/xlat/gen.sh
+	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/fsmagic.h: $(top_srcdir)/xlat/fsmagic.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/futexops.h: $(top_srcdir)/xlat/futexops.in $(top_srcdir)/xlat/gen.sh
@@ -7797,6 +7839,8 @@ $(top_srcdir)/xlat/multicast_router_types.h: $(top_srcdir)/xlat/multicast_router
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/name_to_handle_at_flags.h: $(top_srcdir)/xlat/name_to_handle_at_flags.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
+$(top_srcdir)/xlat/nbd_ioctl_cmds.h: $(top_srcdir)/xlat/nbd_ioctl_cmds.in $(top_srcdir)/xlat/gen.sh
+	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/neighbor_cache_entry_flags.h: $(top_srcdir)/xlat/neighbor_cache_entry_flags.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/neighbor_cache_entry_states.h: $(top_srcdir)/xlat/neighbor_cache_entry_states.in $(top_srcdir)/xlat/gen.sh
@@ -7969,6 +8013,8 @@ $(top_srcdir)/xlat/quotacmds.h: $(top_srcdir)/xlat/quotacmds.in $(top_srcdir)/xl
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/quotatypes.h: $(top_srcdir)/xlat/quotatypes.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
+$(top_srcdir)/xlat/random_ioctl_cmds.h: $(top_srcdir)/xlat/random_ioctl_cmds.in $(top_srcdir)/xlat/gen.sh
+	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/rename_flags.h: $(top_srcdir)/xlat/rename_flags.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/resource_flags.h: $(top_srcdir)/xlat/resource_flags.in $(top_srcdir)/xlat/gen.sh
diff --git a/xlat/Makemodule.am b/xlat/Makemodule.am
index d53acb0..784a708 100644
--- a/xlat/Makemodule.am
+++ b/xlat/Makemodule.am
@@ -1,5 +1,5 @@
-XLAT_INPUT_FILES = xlat/access_flags.in xlat/addrfams.in xlat/adjtimex_modes.in xlat/adjtimex_state.in xlat/adjtimex_status.in xlat/advise.in xlat/af_packet_types.in xlat/aio_cmds.in xlat/archvals.in xlat/arp_hardware_types.in xlat/at_flags.in xlat/at_statx_sync_types.in xlat/atomic_ops.in xlat/audit_arch.in xlat/baud_options.in xlat/bdaddr_types.in xlat/blkpg_ops.in xlat/bluetooth_l2_cid.in xlat/bluetooth_l2_psm.in xlat/bootflags1.in xlat/bootflags2.in xlat/bootflags3.in xlat/bpf_attach_flags.in xlat/bpf_attach_type.in xlat/bpf_class.in xlat/bpf_commands.in xlat/bpf_file_mode_flags.in xlat/bpf_map_flags.in xlat/bpf_map_types.in xlat/bpf_map_update_elem_flags.in xlat/bpf_miscop.in xlat/bpf_mode.in xlat/bpf_op_alu.in xlat/bpf_op_jmp.in xlat/bpf_prog_flags.in xlat/bpf_prog_types.in xlat/bpf_query_flags.in xlat/bpf_rval.in xlat/bpf_size.in xlat/bpf_src.in xlat/bsg_flags.in xlat/bsg_protocol.in xlat/bsg_subprotocol.in xlat/bt_protocols.in xlat/btrfs_balance_args.in xlat/btrfs_balance_ctl_cmds.in xlat/btrfs_balance_flags.in xlat/btrfs_balance_state.in xlat/btrfs_compress_types.in xlat/btrfs_cont_reading_from_srcdev_mode.in xlat/btrfs_defrag_flags.in xlat/btrfs_dev_replace_cmds.in xlat/btrfs_dev_replace_results.in xlat/btrfs_dev_replace_state.in xlat/btrfs_dev_stats_flags.in xlat/btrfs_dev_stats_values.in xlat/btrfs_features_compat.in xlat/btrfs_features_compat_ro.in xlat/btrfs_features_incompat.in xlat/btrfs_key_types.in xlat/btrfs_logical_ino_args_flags.in xlat/btrfs_qgroup_ctl_cmds.in xlat/btrfs_qgroup_inherit_flags.in xlat/btrfs_qgroup_limit_flags.in xlat/btrfs_qgroup_status_flags.in xlat/btrfs_scrub_flags.in xlat/btrfs_send_flags.in xlat/btrfs_snap_flags_v2.in xlat/btrfs_space_info_flags.in xlat/btrfs_tree_objectids.in xlat/cacheflush_scope.in xlat/caif_protocols.in xlat/can_protocols.in xlat/cap.in xlat/cap_mask0.in xlat/cap_mask1.in xlat/cap_version.in xlat/clockflags.in xlat/clocknames.in xlat/clone_flags.in xlat/cpuclocknames.in xlat/crypto_nl_attrs.in xlat/dcb_commands.in xlat/delete_module_flags.in xlat/dirent_types.in xlat/dm_flags.in xlat/ebpf_class.in xlat/ebpf_mode.in xlat/ebpf_op_alu.in xlat/ebpf_op_jmp.in xlat/ebpf_regs.in xlat/ebpf_size.in xlat/efd_flags.in xlat/epollctls.in xlat/epollevents.in xlat/epollflags.in xlat/ethernet_protocols.in xlat/evdev_abs.in xlat/evdev_autorepeat.in xlat/evdev_ev.in xlat/evdev_ff_status.in xlat/evdev_ff_types.in xlat/evdev_keycode.in xlat/evdev_leds.in xlat/evdev_misc.in xlat/evdev_mtslots.in xlat/evdev_prop.in xlat/evdev_relative_axes.in xlat/evdev_snd.in xlat/evdev_switch.in xlat/evdev_sync.in xlat/f_owner_types.in xlat/f_seals.in xlat/falloc_flags.in xlat/fan_classes.in xlat/fan_event_flags.in xlat/fan_init_flags.in xlat/fan_mark_flags.in xlat/fcntlcmds.in xlat/fdflags.in xlat/fib_rule_actions.in xlat/fib_rule_flags.in xlat/fiemap_extent_flags.in xlat/fiemap_flags.in xlat/flockcmds.in xlat/fsmagic.in xlat/futexops.in xlat/futexwakecmps.in xlat/futexwakeops.in xlat/getrandom_flags.in xlat/getsock_ip_options.in xlat/getsock_ipv6_options.in xlat/getsock_options.in xlat/hci_channels.in xlat/hw_breakpoint_len.in xlat/hw_breakpoint_type.in xlat/icmpfilterflags.in xlat/if_dqblk_valid.in xlat/if_dqinfo_flags.in xlat/if_dqinfo_valid.in xlat/ifaddrflags.in xlat/iffflags.in xlat/in6_addr_gen_mode.in xlat/inet6_devconf_indices.in xlat/inet6_if_flags.in xlat/inet_devconf_indices.in xlat/inet_diag_attrs.in xlat/inet_diag_bytecodes.in xlat/inet_diag_extended_flags.in xlat/inet_diag_req_attrs.in xlat/inet_protocols.in xlat/inotify_flags.in xlat/inotify_init_flags.in xlat/ioctl_dirs.in xlat/ioprio_class.in xlat/ioprio_who.in xlat/ip_cmsg_types.in xlat/ip_type_of_services.in xlat/ipc_msg_flags.in xlat/ipc_private.in xlat/ipccalls.in xlat/irda_protocols.in xlat/isdn_protocols.in xlat/itimer_which.in xlat/kcm_protocols.in xlat/kcmp_types.in xlat/kexec_arch_values.in xlat/kexec_file_load_flags.in xlat/kexec_load_flags.in xlat/key_perms.in xlat/key_reqkeys.in xlat/key_spec.in xlat/keyctl_commands.in xlat/kvm_cpuid_flags.in xlat/kvm_exit_reason.in xlat/kvm_mem_flags.in xlat/lockfcmds.in xlat/loop_cmds.in xlat/loop_crypt_type_options.in xlat/loop_flags_options.in xlat/lwtunnel_encap_types.in xlat/madvise_cmds.in xlat/mbindflags.in xlat/mctl_sync.in xlat/mdb_flags.in xlat/mdb_states.in xlat/membarrier_cmds.in xlat/memfd_create_flags.in xlat/mempolicyflags.in xlat/mlock_flags.in xlat/mlockall_flags.in xlat/mmap_flags.in xlat/mmap_prot.in xlat/modem_flags.in xlat/modetypes.in xlat/module_init_flags.in xlat/mount_flags.in xlat/move_pages_flags.in xlat/mq_attr_flags.in xlat/mremap_flags.in xlat/msg_flags.in xlat/msgctl_flags.in xlat/mtd_file_mode_options.in xlat/mtd_flags_options.in xlat/mtd_mode_options.in xlat/mtd_nandecc_options.in xlat/mtd_otp_options.in xlat/mtd_type_options.in xlat/multicast_router_types.in xlat/name_to_handle_at_flags.in xlat/neighbor_cache_entry_flags.in xlat/neighbor_cache_entry_states.in xlat/netfilter_versions.in xlat/netlink_ack_flags.in xlat/netlink_delete_flags.in xlat/netlink_diag_attrs.in xlat/netlink_diag_show.in xlat/netlink_flags.in xlat/netlink_get_flags.in xlat/netlink_new_flags.in xlat/netlink_protocols.in xlat/netlink_sk_meminfo_indices.in xlat/netlink_socket_flags.in xlat/netlink_states.in xlat/netlink_types.in xlat/nf_acct_msg_types.in xlat/nf_cthelper_msg_types.in xlat/nf_ctnetlink_exp_msg_types.in xlat/nf_ctnetlink_msg_types.in xlat/nf_cttimeout_msg_types.in xlat/nf_ipset_msg_types.in xlat/nf_nft_compat_msg_types.in xlat/nf_nftables_msg_types.in xlat/nf_osf_msg_types.in xlat/nf_queue_msg_types.in xlat/nf_ulog_msg_types.in xlat/nfc_protocols.in xlat/nl_audit_types.in xlat/nl_crypto_types.in xlat/nl_netfilter_msg_types.in xlat/nl_netfilter_subsys_ids.in xlat/nl_route_types.in xlat/nl_selinux_types.in xlat/nl_sock_diag_types.in xlat/nl_xfrm_types.in xlat/nlmsgerr_attrs.in xlat/notifyflags.in xlat/nt_descriptor_types.in xlat/numa_node.in xlat/open_access_modes.in xlat/open_mode_flags.in xlat/packet_diag_attrs.in xlat/packet_diag_info_flags.in xlat/packet_diag_show.in xlat/packet_mreq_type.in xlat/perf_attr_size.in xlat/perf_branch_sample_type.in xlat/perf_event_open_flags.in xlat/perf_event_read_format.in xlat/perf_event_sample_format.in xlat/perf_hw_cache_id.in xlat/perf_hw_cache_op_id.in xlat/perf_hw_cache_op_result_id.in xlat/perf_hw_id.in xlat/perf_ioctl_cmds.in xlat/perf_ioctl_flags.in xlat/perf_sw_ids.in xlat/perf_type_id.in xlat/personality_flags.in xlat/personality_types.in xlat/phonet_protocols.in xlat/pkey_access.in xlat/policies.in xlat/pollflags.in xlat/pr_cap_ambient.in xlat/pr_dumpable.in xlat/pr_fp_mode.in xlat/pr_mce_kill.in xlat/pr_mce_kill_policy.in xlat/pr_set_mm.in xlat/pr_spec_cmds.in xlat/pr_spec_get_store_bypass_flags.in xlat/pr_spec_set_store_bypass_flags.in xlat/pr_sve_vl_flags.in xlat/pr_tsc.in xlat/pr_unalign_flags.in xlat/prctl_options.in xlat/priorities.in xlat/ptp_flags_options.in xlat/ptrace_cmds.in xlat/ptrace_events.in xlat/ptrace_peeksiginfo_flags.in xlat/ptrace_setoptions_flags.in xlat/quota_formats.in xlat/quotacmds.in xlat/quotatypes.in xlat/rename_flags.in xlat/resource_flags.in xlat/resources.in xlat/riscv_flush_icache_flags.in xlat/route_nexthop_flags.in xlat/routing_flags.in xlat/routing_protocols.in xlat/routing_scopes.in xlat/routing_table_ids.in xlat/routing_types.in xlat/rtnl_addr_attrs.in xlat/rtnl_addrlabel_attrs.in xlat/rtnl_dcb_attrs.in xlat/rtnl_ifla_af_spec_inet6_attrs.in xlat/rtnl_ifla_af_spec_inet_attrs.in xlat/rtnl_ifla_brport_attrs.in xlat/rtnl_ifla_events.in xlat/rtnl_ifla_info_attrs.in xlat/rtnl_ifla_info_data_bridge_attrs.in xlat/rtnl_ifla_info_data_tun_attrs.in xlat/rtnl_ifla_port_attrs.in xlat/rtnl_ifla_vf_port_attrs.in xlat/rtnl_ifla_xdp_attrs.in xlat/rtnl_link_attrs.in xlat/rtnl_mdb_attrs.in xlat/rtnl_mdba_mdb_attrs.in xlat/rtnl_mdba_mdb_eattr_attrs.in xlat/rtnl_mdba_mdb_entry_attrs.in xlat/rtnl_mdba_router_attrs.in xlat/rtnl_mdba_router_pattr_attrs.in xlat/rtnl_neigh_attrs.in xlat/rtnl_neightbl_attrs.in xlat/rtnl_neightbl_parms_attrs.in xlat/rtnl_netconf_attrs.in xlat/rtnl_nsid_attrs.in xlat/rtnl_route_attrs.in xlat/rtnl_rta_metrics_attrs.in xlat/rtnl_rule_attrs.in xlat/rtnl_tc_action_attrs.in xlat/rtnl_tc_attrs.in xlat/rtnl_tca_stab_attrs.in xlat/rtnl_tca_stats_attrs.in xlat/rwf_flags.in xlat/s390_guarded_storage_commands.in xlat/s390_runtime_instr_commands.in xlat/s390_sthyi_function_codes.in xlat/sa_handler_values.in xlat/sched_flags.in xlat/schedulers.in xlat/scmvals.in xlat/scsi_sg_commands.in xlat/secbits.in xlat/seccomp_filter_flags.in xlat/seccomp_mode.in xlat/seccomp_ops.in xlat/seccomp_ret_action.in xlat/semctl_flags.in xlat/semop_flags.in xlat/setns_types.in xlat/setsock_ip_options.in xlat/setsock_ipv6_options.in xlat/setsock_options.in xlat/sfd_flags.in xlat/sg_io_dxfer_direction.in xlat/sg_io_flags.in xlat/sg_io_info.in xlat/sg_scsi_reset.in xlat/shm_flags.in xlat/shm_resource_flags.in xlat/shmctl_flags.in xlat/shutdown_modes.in xlat/sigact_flags.in xlat/sigaltstack_flags.in xlat/sigbus_codes.in xlat/sigchld_codes.in xlat/sigemt_codes.in xlat/sigev_value.in xlat/sigfpe_codes.in xlat/sigill_codes.in xlat/siginfo_codes.in xlat/sigpoll_codes.in xlat/sigprocmaskcmds.in xlat/sigprof_codes.in xlat/sigsegv_codes.in xlat/sigsys_codes.in xlat/sigtrap_codes.in xlat/skf_ad.in xlat/skf_off.in xlat/smc_diag_attrs.in xlat/smc_diag_extended_flags.in xlat/smc_link_group_roles.in xlat/smc_protocols.in xlat/smc_states.in xlat/snmp_icmp6_stats.in xlat/snmp_ip_stats.in xlat/sock_alg_options.in xlat/sock_bluetooth_options.in xlat/sock_caif_options.in xlat/sock_dccp_options.in xlat/sock_ip_options.in xlat/sock_ipv6_options.in xlat/sock_ipx_options.in xlat/sock_irda_options.in xlat/sock_iucv_options.in xlat/sock_kcm_options.in xlat/sock_llc_options.in xlat/sock_netlink_options.in xlat/sock_nfcllcp_options.in xlat/sock_options.in xlat/sock_packet_options.in xlat/sock_pnp_options.in xlat/sock_pppol2tp_options.in xlat/sock_raw_options.in xlat/sock_rds_options.in xlat/sock_rxrpc_options.in xlat/sock_sctp_options.in xlat/sock_tcp_options.in xlat/sock_tipc_options.in xlat/sock_tls_options.in xlat/sock_type_flags.in xlat/sock_udp_options.in xlat/socketcalls.in xlat/socketlayers.in xlat/socktypes.in xlat/sparc_kern_features.in xlat/splice_flags.in xlat/sram_alloc_flags.in xlat/statfs_flags.in xlat/statx_attrs.in xlat/statx_masks.in xlat/swap_flags.in xlat/sync_file_range_flags.in xlat/sysctl_kern.in xlat/sysctl_net.in xlat/sysctl_net_core.in xlat/sysctl_net_ipv4.in xlat/sysctl_net_ipv4_conf.in xlat/sysctl_net_ipv4_route.in xlat/sysctl_net_ipv6.in xlat/sysctl_net_ipv6_route.in xlat/sysctl_net_unix.in xlat/sysctl_root.in xlat/sysctl_vm.in xlat/syslog_action_type.in xlat/sysmips_operations.in xlat/tcflsh_options.in xlat/tcp_state_flags.in xlat/tcp_states.in xlat/tcxonc_options.in xlat/timerfdflags.in xlat/tun_device_types.in xlat/ubi_volume_props.in xlat/ubi_volume_types.in xlat/uffd_api_features.in xlat/uffd_api_flags.in xlat/uffd_copy_flags.in xlat/uffd_flags.in xlat/uffd_register_ioctl_flags.in xlat/uffd_register_mode_flags.in xlat/uffd_zeropage_flags.in xlat/umount_flags.in xlat/unix_diag_attrs.in xlat/unix_diag_show.in xlat/unshare_flags.in xlat/usagewho.in xlat/v4l2_buf_flags.in xlat/v4l2_buf_types.in xlat/v4l2_capture_modes.in xlat/v4l2_colorspaces.in xlat/v4l2_control_classes.in xlat/v4l2_control_flags.in xlat/v4l2_control_id_bases.in xlat/v4l2_control_ids.in xlat/v4l2_control_types.in xlat/v4l2_device_capabilities_flags.in xlat/v4l2_fields.in xlat/v4l2_format_description_flags.in xlat/v4l2_frameinterval_types.in xlat/v4l2_framesize_types.in xlat/v4l2_input_types.in xlat/v4l2_memories.in xlat/v4l2_pix_fmts.in xlat/v4l2_sdr_fmts.in xlat/v4l2_sliced_flags.in xlat/v4l2_streaming_capabilities.in xlat/v4l2_tuner_audmodes.in xlat/v4l2_tuner_capabilities.in xlat/v4l2_tuner_rxsubchanses.in xlat/v4l2_tuner_types.in xlat/v4l2_vbi_flags.in xlat/wait4_options.in xlat/waitid_types.in xlat/whence_codes.in xlat/xattrflags.in xlat/xdp_flags.in xlat/xfs_dqblk_flags.in xlat/xfs_quota_flags.in 
-XLAT_HEADER_FILES = xlat/access_flags.h xlat/addrfams.h xlat/adjtimex_modes.h xlat/adjtimex_state.h xlat/adjtimex_status.h xlat/advise.h xlat/af_packet_types.h xlat/aio_cmds.h xlat/archvals.h xlat/arp_hardware_types.h xlat/at_flags.h xlat/at_statx_sync_types.h xlat/atomic_ops.h xlat/audit_arch.h xlat/baud_options.h xlat/bdaddr_types.h xlat/blkpg_ops.h xlat/bluetooth_l2_cid.h xlat/bluetooth_l2_psm.h xlat/bootflags1.h xlat/bootflags2.h xlat/bootflags3.h xlat/bpf_attach_flags.h xlat/bpf_attach_type.h xlat/bpf_class.h xlat/bpf_commands.h xlat/bpf_file_mode_flags.h xlat/bpf_map_flags.h xlat/bpf_map_types.h xlat/bpf_map_update_elem_flags.h xlat/bpf_miscop.h xlat/bpf_mode.h xlat/bpf_op_alu.h xlat/bpf_op_jmp.h xlat/bpf_prog_flags.h xlat/bpf_prog_types.h xlat/bpf_query_flags.h xlat/bpf_rval.h xlat/bpf_size.h xlat/bpf_src.h xlat/bsg_flags.h xlat/bsg_protocol.h xlat/bsg_subprotocol.h xlat/bt_protocols.h xlat/btrfs_balance_args.h xlat/btrfs_balance_ctl_cmds.h xlat/btrfs_balance_flags.h xlat/btrfs_balance_state.h xlat/btrfs_compress_types.h xlat/btrfs_cont_reading_from_srcdev_mode.h xlat/btrfs_defrag_flags.h xlat/btrfs_dev_replace_cmds.h xlat/btrfs_dev_replace_results.h xlat/btrfs_dev_replace_state.h xlat/btrfs_dev_stats_flags.h xlat/btrfs_dev_stats_values.h xlat/btrfs_features_compat.h xlat/btrfs_features_compat_ro.h xlat/btrfs_features_incompat.h xlat/btrfs_key_types.h xlat/btrfs_logical_ino_args_flags.h xlat/btrfs_qgroup_ctl_cmds.h xlat/btrfs_qgroup_inherit_flags.h xlat/btrfs_qgroup_limit_flags.h xlat/btrfs_qgroup_status_flags.h xlat/btrfs_scrub_flags.h xlat/btrfs_send_flags.h xlat/btrfs_snap_flags_v2.h xlat/btrfs_space_info_flags.h xlat/btrfs_tree_objectids.h xlat/cacheflush_scope.h xlat/caif_protocols.h xlat/can_protocols.h xlat/cap.h xlat/cap_mask0.h xlat/cap_mask1.h xlat/cap_version.h xlat/clockflags.h xlat/clocknames.h xlat/clone_flags.h xlat/cpuclocknames.h xlat/crypto_nl_attrs.h xlat/dcb_commands.h xlat/delete_module_flags.h xlat/dirent_types.h xlat/dm_flags.h xlat/ebpf_class.h xlat/ebpf_mode.h xlat/ebpf_op_alu.h xlat/ebpf_op_jmp.h xlat/ebpf_regs.h xlat/ebpf_size.h xlat/efd_flags.h xlat/epollctls.h xlat/epollevents.h xlat/epollflags.h xlat/ethernet_protocols.h xlat/evdev_abs.h xlat/evdev_autorepeat.h xlat/evdev_ev.h xlat/evdev_ff_status.h xlat/evdev_ff_types.h xlat/evdev_keycode.h xlat/evdev_leds.h xlat/evdev_misc.h xlat/evdev_mtslots.h xlat/evdev_prop.h xlat/evdev_relative_axes.h xlat/evdev_snd.h xlat/evdev_switch.h xlat/evdev_sync.h xlat/f_owner_types.h xlat/f_seals.h xlat/falloc_flags.h xlat/fan_classes.h xlat/fan_event_flags.h xlat/fan_init_flags.h xlat/fan_mark_flags.h xlat/fcntlcmds.h xlat/fdflags.h xlat/fib_rule_actions.h xlat/fib_rule_flags.h xlat/fiemap_extent_flags.h xlat/fiemap_flags.h xlat/flockcmds.h xlat/fsmagic.h xlat/futexops.h xlat/futexwakecmps.h xlat/futexwakeops.h xlat/getrandom_flags.h xlat/getsock_ip_options.h xlat/getsock_ipv6_options.h xlat/getsock_options.h xlat/hci_channels.h xlat/hw_breakpoint_len.h xlat/hw_breakpoint_type.h xlat/icmpfilterflags.h xlat/if_dqblk_valid.h xlat/if_dqinfo_flags.h xlat/if_dqinfo_valid.h xlat/ifaddrflags.h xlat/iffflags.h xlat/in6_addr_gen_mode.h xlat/inet6_devconf_indices.h xlat/inet6_if_flags.h xlat/inet_devconf_indices.h xlat/inet_diag_attrs.h xlat/inet_diag_bytecodes.h xlat/inet_diag_extended_flags.h xlat/inet_diag_req_attrs.h xlat/inet_protocols.h xlat/inotify_flags.h xlat/inotify_init_flags.h xlat/ioctl_dirs.h xlat/ioprio_class.h xlat/ioprio_who.h xlat/ip_cmsg_types.h xlat/ip_type_of_services.h xlat/ipc_msg_flags.h xlat/ipc_private.h xlat/ipccalls.h xlat/irda_protocols.h xlat/isdn_protocols.h xlat/itimer_which.h xlat/kcm_protocols.h xlat/kcmp_types.h xlat/kexec_arch_values.h xlat/kexec_file_load_flags.h xlat/kexec_load_flags.h xlat/key_perms.h xlat/key_reqkeys.h xlat/key_spec.h xlat/keyctl_commands.h xlat/kvm_cpuid_flags.h xlat/kvm_exit_reason.h xlat/kvm_mem_flags.h xlat/lockfcmds.h xlat/loop_cmds.h xlat/loop_crypt_type_options.h xlat/loop_flags_options.h xlat/lwtunnel_encap_types.h xlat/madvise_cmds.h xlat/mbindflags.h xlat/mctl_sync.h xlat/mdb_flags.h xlat/mdb_states.h xlat/membarrier_cmds.h xlat/memfd_create_flags.h xlat/mempolicyflags.h xlat/mlock_flags.h xlat/mlockall_flags.h xlat/mmap_flags.h xlat/mmap_prot.h xlat/modem_flags.h xlat/modetypes.h xlat/module_init_flags.h xlat/mount_flags.h xlat/move_pages_flags.h xlat/mq_attr_flags.h xlat/mremap_flags.h xlat/msg_flags.h xlat/msgctl_flags.h xlat/mtd_file_mode_options.h xlat/mtd_flags_options.h xlat/mtd_mode_options.h xlat/mtd_nandecc_options.h xlat/mtd_otp_options.h xlat/mtd_type_options.h xlat/multicast_router_types.h xlat/name_to_handle_at_flags.h xlat/neighbor_cache_entry_flags.h xlat/neighbor_cache_entry_states.h xlat/netfilter_versions.h xlat/netlink_ack_flags.h xlat/netlink_delete_flags.h xlat/netlink_diag_attrs.h xlat/netlink_diag_show.h xlat/netlink_flags.h xlat/netlink_get_flags.h xlat/netlink_new_flags.h xlat/netlink_protocols.h xlat/netlink_sk_meminfo_indices.h xlat/netlink_socket_flags.h xlat/netlink_states.h xlat/netlink_types.h xlat/nf_acct_msg_types.h xlat/nf_cthelper_msg_types.h xlat/nf_ctnetlink_exp_msg_types.h xlat/nf_ctnetlink_msg_types.h xlat/nf_cttimeout_msg_types.h xlat/nf_ipset_msg_types.h xlat/nf_nft_compat_msg_types.h xlat/nf_nftables_msg_types.h xlat/nf_osf_msg_types.h xlat/nf_queue_msg_types.h xlat/nf_ulog_msg_types.h xlat/nfc_protocols.h xlat/nl_audit_types.h xlat/nl_crypto_types.h xlat/nl_netfilter_msg_types.h xlat/nl_netfilter_subsys_ids.h xlat/nl_route_types.h xlat/nl_selinux_types.h xlat/nl_sock_diag_types.h xlat/nl_xfrm_types.h xlat/nlmsgerr_attrs.h xlat/notifyflags.h xlat/nt_descriptor_types.h xlat/numa_node.h xlat/open_access_modes.h xlat/open_mode_flags.h xlat/packet_diag_attrs.h xlat/packet_diag_info_flags.h xlat/packet_diag_show.h xlat/packet_mreq_type.h xlat/perf_attr_size.h xlat/perf_branch_sample_type.h xlat/perf_event_open_flags.h xlat/perf_event_read_format.h xlat/perf_event_sample_format.h xlat/perf_hw_cache_id.h xlat/perf_hw_cache_op_id.h xlat/perf_hw_cache_op_result_id.h xlat/perf_hw_id.h xlat/perf_ioctl_cmds.h xlat/perf_ioctl_flags.h xlat/perf_sw_ids.h xlat/perf_type_id.h xlat/personality_flags.h xlat/personality_types.h xlat/phonet_protocols.h xlat/pkey_access.h xlat/policies.h xlat/pollflags.h xlat/pr_cap_ambient.h xlat/pr_dumpable.h xlat/pr_fp_mode.h xlat/pr_mce_kill.h xlat/pr_mce_kill_policy.h xlat/pr_set_mm.h xlat/pr_spec_cmds.h xlat/pr_spec_get_store_bypass_flags.h xlat/pr_spec_set_store_bypass_flags.h xlat/pr_sve_vl_flags.h xlat/pr_tsc.h xlat/pr_unalign_flags.h xlat/prctl_options.h xlat/priorities.h xlat/ptp_flags_options.h xlat/ptrace_cmds.h xlat/ptrace_events.h xlat/ptrace_peeksiginfo_flags.h xlat/ptrace_setoptions_flags.h xlat/quota_formats.h xlat/quotacmds.h xlat/quotatypes.h xlat/rename_flags.h xlat/resource_flags.h xlat/resources.h xlat/riscv_flush_icache_flags.h xlat/route_nexthop_flags.h xlat/routing_flags.h xlat/routing_protocols.h xlat/routing_scopes.h xlat/routing_table_ids.h xlat/routing_types.h xlat/rtnl_addr_attrs.h xlat/rtnl_addrlabel_attrs.h xlat/rtnl_dcb_attrs.h xlat/rtnl_ifla_af_spec_inet6_attrs.h xlat/rtnl_ifla_af_spec_inet_attrs.h xlat/rtnl_ifla_brport_attrs.h xlat/rtnl_ifla_events.h xlat/rtnl_ifla_info_attrs.h xlat/rtnl_ifla_info_data_bridge_attrs.h xlat/rtnl_ifla_info_data_tun_attrs.h xlat/rtnl_ifla_port_attrs.h xlat/rtnl_ifla_vf_port_attrs.h xlat/rtnl_ifla_xdp_attrs.h xlat/rtnl_link_attrs.h xlat/rtnl_mdb_attrs.h xlat/rtnl_mdba_mdb_attrs.h xlat/rtnl_mdba_mdb_eattr_attrs.h xlat/rtnl_mdba_mdb_entry_attrs.h xlat/rtnl_mdba_router_attrs.h xlat/rtnl_mdba_router_pattr_attrs.h xlat/rtnl_neigh_attrs.h xlat/rtnl_neightbl_attrs.h xlat/rtnl_neightbl_parms_attrs.h xlat/rtnl_netconf_attrs.h xlat/rtnl_nsid_attrs.h xlat/rtnl_route_attrs.h xlat/rtnl_rta_metrics_attrs.h xlat/rtnl_rule_attrs.h xlat/rtnl_tc_action_attrs.h xlat/rtnl_tc_attrs.h xlat/rtnl_tca_stab_attrs.h xlat/rtnl_tca_stats_attrs.h xlat/rwf_flags.h xlat/s390_guarded_storage_commands.h xlat/s390_runtime_instr_commands.h xlat/s390_sthyi_function_codes.h xlat/sa_handler_values.h xlat/sched_flags.h xlat/schedulers.h xlat/scmvals.h xlat/scsi_sg_commands.h xlat/secbits.h xlat/seccomp_filter_flags.h xlat/seccomp_mode.h xlat/seccomp_ops.h xlat/seccomp_ret_action.h xlat/semctl_flags.h xlat/semop_flags.h xlat/setns_types.h xlat/setsock_ip_options.h xlat/setsock_ipv6_options.h xlat/setsock_options.h xlat/sfd_flags.h xlat/sg_io_dxfer_direction.h xlat/sg_io_flags.h xlat/sg_io_info.h xlat/sg_scsi_reset.h xlat/shm_flags.h xlat/shm_resource_flags.h xlat/shmctl_flags.h xlat/shutdown_modes.h xlat/sigact_flags.h xlat/sigaltstack_flags.h xlat/sigbus_codes.h xlat/sigchld_codes.h xlat/sigemt_codes.h xlat/sigev_value.h xlat/sigfpe_codes.h xlat/sigill_codes.h xlat/siginfo_codes.h xlat/sigpoll_codes.h xlat/sigprocmaskcmds.h xlat/sigprof_codes.h xlat/sigsegv_codes.h xlat/sigsys_codes.h xlat/sigtrap_codes.h xlat/skf_ad.h xlat/skf_off.h xlat/smc_diag_attrs.h xlat/smc_diag_extended_flags.h xlat/smc_link_group_roles.h xlat/smc_protocols.h xlat/smc_states.h xlat/snmp_icmp6_stats.h xlat/snmp_ip_stats.h xlat/sock_alg_options.h xlat/sock_bluetooth_options.h xlat/sock_caif_options.h xlat/sock_dccp_options.h xlat/sock_ip_options.h xlat/sock_ipv6_options.h xlat/sock_ipx_options.h xlat/sock_irda_options.h xlat/sock_iucv_options.h xlat/sock_kcm_options.h xlat/sock_llc_options.h xlat/sock_netlink_options.h xlat/sock_nfcllcp_options.h xlat/sock_options.h xlat/sock_packet_options.h xlat/sock_pnp_options.h xlat/sock_pppol2tp_options.h xlat/sock_raw_options.h xlat/sock_rds_options.h xlat/sock_rxrpc_options.h xlat/sock_sctp_options.h xlat/sock_tcp_options.h xlat/sock_tipc_options.h xlat/sock_tls_options.h xlat/sock_type_flags.h xlat/sock_udp_options.h xlat/socketcalls.h xlat/socketlayers.h xlat/socktypes.h xlat/sparc_kern_features.h xlat/splice_flags.h xlat/sram_alloc_flags.h xlat/statfs_flags.h xlat/statx_attrs.h xlat/statx_masks.h xlat/swap_flags.h xlat/sync_file_range_flags.h xlat/sysctl_kern.h xlat/sysctl_net.h xlat/sysctl_net_core.h xlat/sysctl_net_ipv4.h xlat/sysctl_net_ipv4_conf.h xlat/sysctl_net_ipv4_route.h xlat/sysctl_net_ipv6.h xlat/sysctl_net_ipv6_route.h xlat/sysctl_net_unix.h xlat/sysctl_root.h xlat/sysctl_vm.h xlat/syslog_action_type.h xlat/sysmips_operations.h xlat/tcflsh_options.h xlat/tcp_state_flags.h xlat/tcp_states.h xlat/tcxonc_options.h xlat/timerfdflags.h xlat/tun_device_types.h xlat/ubi_volume_props.h xlat/ubi_volume_types.h xlat/uffd_api_features.h xlat/uffd_api_flags.h xlat/uffd_copy_flags.h xlat/uffd_flags.h xlat/uffd_register_ioctl_flags.h xlat/uffd_register_mode_flags.h xlat/uffd_zeropage_flags.h xlat/umount_flags.h xlat/unix_diag_attrs.h xlat/unix_diag_show.h xlat/unshare_flags.h xlat/usagewho.h xlat/v4l2_buf_flags.h xlat/v4l2_buf_types.h xlat/v4l2_capture_modes.h xlat/v4l2_colorspaces.h xlat/v4l2_control_classes.h xlat/v4l2_control_flags.h xlat/v4l2_control_id_bases.h xlat/v4l2_control_ids.h xlat/v4l2_control_types.h xlat/v4l2_device_capabilities_flags.h xlat/v4l2_fields.h xlat/v4l2_format_description_flags.h xlat/v4l2_frameinterval_types.h xlat/v4l2_framesize_types.h xlat/v4l2_input_types.h xlat/v4l2_memories.h xlat/v4l2_pix_fmts.h xlat/v4l2_sdr_fmts.h xlat/v4l2_sliced_flags.h xlat/v4l2_streaming_capabilities.h xlat/v4l2_tuner_audmodes.h xlat/v4l2_tuner_capabilities.h xlat/v4l2_tuner_rxsubchanses.h xlat/v4l2_tuner_types.h xlat/v4l2_vbi_flags.h xlat/wait4_options.h xlat/waitid_types.h xlat/whence_codes.h xlat/xattrflags.h xlat/xdp_flags.h xlat/xfs_dqblk_flags.h xlat/xfs_quota_flags.h 
+XLAT_INPUT_FILES = xlat/access_flags.in xlat/addrfams.in xlat/adjtimex_modes.in xlat/adjtimex_state.in xlat/adjtimex_status.in xlat/advise.in xlat/af_packet_types.in xlat/aio_cmds.in xlat/archvals.in xlat/arp_hardware_types.in xlat/at_flags.in xlat/at_statx_sync_types.in xlat/atomic_ops.in xlat/audit_arch.in xlat/baud_options.in xlat/bdaddr_types.in xlat/blkpg_ops.in xlat/bluetooth_l2_cid.in xlat/bluetooth_l2_psm.in xlat/bootflags1.in xlat/bootflags2.in xlat/bootflags3.in xlat/bpf_attach_flags.in xlat/bpf_attach_type.in xlat/bpf_class.in xlat/bpf_commands.in xlat/bpf_file_mode_flags.in xlat/bpf_map_flags.in xlat/bpf_map_types.in xlat/bpf_map_update_elem_flags.in xlat/bpf_miscop.in xlat/bpf_mode.in xlat/bpf_op_alu.in xlat/bpf_op_jmp.in xlat/bpf_prog_flags.in xlat/bpf_prog_types.in xlat/bpf_query_flags.in xlat/bpf_rval.in xlat/bpf_size.in xlat/bpf_src.in xlat/bpf_task_fd_type.in xlat/bsg_flags.in xlat/bsg_protocol.in xlat/bsg_subprotocol.in xlat/bt_protocols.in xlat/btrfs_balance_args.in xlat/btrfs_balance_ctl_cmds.in xlat/btrfs_balance_flags.in xlat/btrfs_balance_state.in xlat/btrfs_compress_types.in xlat/btrfs_cont_reading_from_srcdev_mode.in xlat/btrfs_defrag_flags.in xlat/btrfs_dev_replace_cmds.in xlat/btrfs_dev_replace_results.in xlat/btrfs_dev_replace_state.in xlat/btrfs_dev_stats_flags.in xlat/btrfs_dev_stats_values.in xlat/btrfs_features_compat.in xlat/btrfs_features_compat_ro.in xlat/btrfs_features_incompat.in xlat/btrfs_key_types.in xlat/btrfs_logical_ino_args_flags.in xlat/btrfs_qgroup_ctl_cmds.in xlat/btrfs_qgroup_inherit_flags.in xlat/btrfs_qgroup_limit_flags.in xlat/btrfs_qgroup_status_flags.in xlat/btrfs_scrub_flags.in xlat/btrfs_send_flags.in xlat/btrfs_snap_flags_v2.in xlat/btrfs_space_info_flags.in xlat/btrfs_tree_objectids.in xlat/cacheflush_scope.in xlat/caif_protocols.in xlat/can_protocols.in xlat/cap.in xlat/cap_mask0.in xlat/cap_mask1.in xlat/cap_version.in xlat/clockflags.in xlat/clocknames.in xlat/clone_flags.in xlat/cpuclocknames.in xlat/crypto_nl_attrs.in xlat/dcb_commands.in xlat/delete_module_flags.in xlat/dirent_types.in xlat/dm_flags.in xlat/ebpf_class.in xlat/ebpf_mode.in xlat/ebpf_op_alu.in xlat/ebpf_op_jmp.in xlat/ebpf_regs.in xlat/ebpf_size.in xlat/efd_flags.in xlat/epollctls.in xlat/epollevents.in xlat/epollflags.in xlat/ethernet_protocols.in xlat/evdev_abs.in xlat/evdev_autorepeat.in xlat/evdev_ev.in xlat/evdev_ff_status.in xlat/evdev_ff_types.in xlat/evdev_keycode.in xlat/evdev_leds.in xlat/evdev_misc.in xlat/evdev_mtslots.in xlat/evdev_prop.in xlat/evdev_relative_axes.in xlat/evdev_snd.in xlat/evdev_switch.in xlat/evdev_sync.in xlat/f_owner_types.in xlat/f_seals.in xlat/falloc_flags.in xlat/fan_classes.in xlat/fan_event_flags.in xlat/fan_init_flags.in xlat/fan_mark_flags.in xlat/fcntlcmds.in xlat/fdflags.in xlat/fib_rule_actions.in xlat/fib_rule_flags.in xlat/fiemap_extent_flags.in xlat/fiemap_flags.in xlat/flockcmds.in xlat/fsmagic.in xlat/futexbitset.in xlat/futexops.in xlat/futexwakecmps.in xlat/futexwakeops.in xlat/getrandom_flags.in xlat/getsock_ip_options.in xlat/getsock_ipv6_options.in xlat/getsock_options.in xlat/hci_channels.in xlat/hw_breakpoint_len.in xlat/hw_breakpoint_type.in xlat/icmpfilterflags.in xlat/if_dqblk_valid.in xlat/if_dqinfo_flags.in xlat/if_dqinfo_valid.in xlat/ifaddrflags.in xlat/iffflags.in xlat/in6_addr_gen_mode.in xlat/inet6_devconf_indices.in xlat/inet6_if_flags.in xlat/inet_devconf_indices.in xlat/inet_diag_attrs.in xlat/inet_diag_bytecodes.in xlat/inet_diag_extended_flags.in xlat/inet_diag_req_attrs.in xlat/inet_protocols.in xlat/inotify_flags.in xlat/inotify_init_flags.in xlat/ioctl_dirs.in xlat/ioprio_class.in xlat/ioprio_who.in xlat/ip_cmsg_types.in xlat/ip_type_of_services.in xlat/ipc_msg_flags.in xlat/ipc_private.in xlat/ipccalls.in xlat/irda_protocols.in xlat/isdn_protocols.in xlat/itimer_which.in xlat/kcm_protocols.in xlat/kcmp_types.in xlat/kexec_arch_values.in xlat/kexec_file_load_flags.in xlat/kexec_load_flags.in xlat/key_perms.in xlat/key_reqkeys.in xlat/key_spec.in xlat/keyctl_commands.in xlat/kvm_cpuid_flags.in xlat/kvm_exit_reason.in xlat/kvm_mem_flags.in xlat/lockfcmds.in xlat/loop_cmds.in xlat/loop_crypt_type_options.in xlat/loop_flags_options.in xlat/lwtunnel_encap_types.in xlat/madvise_cmds.in xlat/mbindflags.in xlat/mctl_sync.in xlat/mdb_flags.in xlat/mdb_states.in xlat/membarrier_cmds.in xlat/memfd_create_flags.in xlat/mempolicyflags.in xlat/mlock_flags.in xlat/mlockall_flags.in xlat/mmap_flags.in xlat/mmap_prot.in xlat/modem_flags.in xlat/modetypes.in xlat/module_init_flags.in xlat/mount_flags.in xlat/move_pages_flags.in xlat/mq_attr_flags.in xlat/mremap_flags.in xlat/msg_flags.in xlat/msgctl_flags.in xlat/mtd_file_mode_options.in xlat/mtd_flags_options.in xlat/mtd_mode_options.in xlat/mtd_nandecc_options.in xlat/mtd_otp_options.in xlat/mtd_type_options.in xlat/multicast_router_types.in xlat/name_to_handle_at_flags.in xlat/nbd_ioctl_cmds.in xlat/neighbor_cache_entry_flags.in xlat/neighbor_cache_entry_states.in xlat/netfilter_versions.in xlat/netlink_ack_flags.in xlat/netlink_delete_flags.in xlat/netlink_diag_attrs.in xlat/netlink_diag_show.in xlat/netlink_flags.in xlat/netlink_get_flags.in xlat/netlink_new_flags.in xlat/netlink_protocols.in xlat/netlink_sk_meminfo_indices.in xlat/netlink_socket_flags.in xlat/netlink_states.in xlat/netlink_types.in xlat/nf_acct_msg_types.in xlat/nf_cthelper_msg_types.in xlat/nf_ctnetlink_exp_msg_types.in xlat/nf_ctnetlink_msg_types.in xlat/nf_cttimeout_msg_types.in xlat/nf_ipset_msg_types.in xlat/nf_nft_compat_msg_types.in xlat/nf_nftables_msg_types.in xlat/nf_osf_msg_types.in xlat/nf_queue_msg_types.in xlat/nf_ulog_msg_types.in xlat/nfc_protocols.in xlat/nl_audit_types.in xlat/nl_crypto_types.in xlat/nl_netfilter_msg_types.in xlat/nl_netfilter_subsys_ids.in xlat/nl_route_types.in xlat/nl_selinux_types.in xlat/nl_sock_diag_types.in xlat/nl_xfrm_types.in xlat/nlmsgerr_attrs.in xlat/notifyflags.in xlat/nt_descriptor_types.in xlat/numa_node.in xlat/open_access_modes.in xlat/open_mode_flags.in xlat/packet_diag_attrs.in xlat/packet_diag_info_flags.in xlat/packet_diag_show.in xlat/packet_mreq_type.in xlat/perf_attr_size.in xlat/perf_branch_sample_type.in xlat/perf_event_open_flags.in xlat/perf_event_read_format.in xlat/perf_event_sample_format.in xlat/perf_hw_cache_id.in xlat/perf_hw_cache_op_id.in xlat/perf_hw_cache_op_result_id.in xlat/perf_hw_id.in xlat/perf_ioctl_cmds.in xlat/perf_ioctl_flags.in xlat/perf_sw_ids.in xlat/perf_type_id.in xlat/personality_flags.in xlat/personality_types.in xlat/phonet_protocols.in xlat/pkey_access.in xlat/policies.in xlat/pollflags.in xlat/pr_cap_ambient.in xlat/pr_dumpable.in xlat/pr_fp_mode.in xlat/pr_mce_kill.in xlat/pr_mce_kill_policy.in xlat/pr_set_mm.in xlat/pr_spec_cmds.in xlat/pr_spec_get_store_bypass_flags.in xlat/pr_spec_set_store_bypass_flags.in xlat/pr_sve_vl_flags.in xlat/pr_tsc.in xlat/pr_unalign_flags.in xlat/prctl_options.in xlat/priorities.in xlat/ptp_flags_options.in xlat/ptrace_cmds.in xlat/ptrace_events.in xlat/ptrace_peeksiginfo_flags.in xlat/ptrace_setoptions_flags.in xlat/quota_formats.in xlat/quotacmds.in xlat/quotatypes.in xlat/random_ioctl_cmds.in xlat/rename_flags.in xlat/resource_flags.in xlat/resources.in xlat/riscv_flush_icache_flags.in xlat/route_nexthop_flags.in xlat/routing_flags.in xlat/routing_protocols.in xlat/routing_scopes.in xlat/routing_table_ids.in xlat/routing_types.in xlat/rtnl_addr_attrs.in xlat/rtnl_addrlabel_attrs.in xlat/rtnl_dcb_attrs.in xlat/rtnl_ifla_af_spec_inet6_attrs.in xlat/rtnl_ifla_af_spec_inet_attrs.in xlat/rtnl_ifla_brport_attrs.in xlat/rtnl_ifla_events.in xlat/rtnl_ifla_info_attrs.in xlat/rtnl_ifla_info_data_bridge_attrs.in xlat/rtnl_ifla_info_data_tun_attrs.in xlat/rtnl_ifla_port_attrs.in xlat/rtnl_ifla_vf_port_attrs.in xlat/rtnl_ifla_xdp_attrs.in xlat/rtnl_link_attrs.in xlat/rtnl_mdb_attrs.in xlat/rtnl_mdba_mdb_attrs.in xlat/rtnl_mdba_mdb_eattr_attrs.in xlat/rtnl_mdba_mdb_entry_attrs.in xlat/rtnl_mdba_router_attrs.in xlat/rtnl_mdba_router_pattr_attrs.in xlat/rtnl_neigh_attrs.in xlat/rtnl_neightbl_attrs.in xlat/rtnl_neightbl_parms_attrs.in xlat/rtnl_netconf_attrs.in xlat/rtnl_nsid_attrs.in xlat/rtnl_route_attrs.in xlat/rtnl_rta_metrics_attrs.in xlat/rtnl_rule_attrs.in xlat/rtnl_tc_action_attrs.in xlat/rtnl_tc_attrs.in xlat/rtnl_tca_stab_attrs.in xlat/rtnl_tca_stats_attrs.in xlat/rwf_flags.in xlat/s390_guarded_storage_commands.in xlat/s390_runtime_instr_commands.in xlat/s390_sthyi_function_codes.in xlat/sa_handler_values.in xlat/sched_flags.in xlat/schedulers.in xlat/scmvals.in xlat/scsi_sg_commands.in xlat/secbits.in xlat/seccomp_filter_flags.in xlat/seccomp_mode.in xlat/seccomp_ops.in xlat/seccomp_ret_action.in xlat/semctl_flags.in xlat/semop_flags.in xlat/setns_types.in xlat/setsock_ip_options.in xlat/setsock_ipv6_options.in xlat/setsock_options.in xlat/sfd_flags.in xlat/sg_io_dxfer_direction.in xlat/sg_io_flags.in xlat/sg_io_info.in xlat/sg_scsi_reset.in xlat/shm_flags.in xlat/shm_resource_flags.in xlat/shmctl_flags.in xlat/shutdown_modes.in xlat/sigact_flags.in xlat/sigaltstack_flags.in xlat/sigbus_codes.in xlat/sigchld_codes.in xlat/sigemt_codes.in xlat/sigev_value.in xlat/sigfpe_codes.in xlat/sigill_codes.in xlat/siginfo_codes.in xlat/sigpoll_codes.in xlat/sigprocmaskcmds.in xlat/sigprof_codes.in xlat/sigsegv_codes.in xlat/sigsys_codes.in xlat/sigtrap_codes.in xlat/skf_ad.in xlat/skf_off.in xlat/smc_diag_attrs.in xlat/smc_diag_extended_flags.in xlat/smc_link_group_roles.in xlat/smc_protocols.in xlat/smc_states.in xlat/snmp_icmp6_stats.in xlat/snmp_ip_stats.in xlat/sock_alg_options.in xlat/sock_bluetooth_options.in xlat/sock_caif_options.in xlat/sock_dccp_options.in xlat/sock_ip_options.in xlat/sock_ipv6_options.in xlat/sock_ipx_options.in xlat/sock_irda_options.in xlat/sock_iucv_options.in xlat/sock_kcm_options.in xlat/sock_llc_options.in xlat/sock_netlink_options.in xlat/sock_nfcllcp_options.in xlat/sock_options.in xlat/sock_packet_options.in xlat/sock_pnp_options.in xlat/sock_pppol2tp_options.in xlat/sock_raw_options.in xlat/sock_rds_options.in xlat/sock_rxrpc_options.in xlat/sock_sctp_options.in xlat/sock_tcp_options.in xlat/sock_tipc_options.in xlat/sock_tls_options.in xlat/sock_type_flags.in xlat/sock_udp_options.in xlat/socketcalls.in xlat/socketlayers.in xlat/socktypes.in xlat/sparc_kern_features.in xlat/splice_flags.in xlat/sram_alloc_flags.in xlat/statfs_flags.in xlat/statx_attrs.in xlat/statx_masks.in xlat/swap_flags.in xlat/sync_file_range_flags.in xlat/sysctl_kern.in xlat/sysctl_net.in xlat/sysctl_net_core.in xlat/sysctl_net_ipv4.in xlat/sysctl_net_ipv4_conf.in xlat/sysctl_net_ipv4_route.in xlat/sysctl_net_ipv6.in xlat/sysctl_net_ipv6_route.in xlat/sysctl_net_unix.in xlat/sysctl_root.in xlat/sysctl_vm.in xlat/syslog_action_type.in xlat/sysmips_operations.in xlat/tcflsh_options.in xlat/tcp_state_flags.in xlat/tcp_states.in xlat/tcxonc_options.in xlat/timerfdflags.in xlat/tun_device_types.in xlat/ubi_volume_props.in xlat/ubi_volume_types.in xlat/uffd_api_features.in xlat/uffd_api_flags.in xlat/uffd_copy_flags.in xlat/uffd_flags.in xlat/uffd_register_ioctl_flags.in xlat/uffd_register_mode_flags.in xlat/uffd_zeropage_flags.in xlat/umount_flags.in xlat/unix_diag_attrs.in xlat/unix_diag_show.in xlat/unshare_flags.in xlat/usagewho.in xlat/v4l2_buf_flags.in xlat/v4l2_buf_types.in xlat/v4l2_capture_modes.in xlat/v4l2_colorspaces.in xlat/v4l2_control_classes.in xlat/v4l2_control_flags.in xlat/v4l2_control_id_bases.in xlat/v4l2_control_ids.in xlat/v4l2_control_types.in xlat/v4l2_device_capabilities_flags.in xlat/v4l2_fields.in xlat/v4l2_format_description_flags.in xlat/v4l2_frameinterval_types.in xlat/v4l2_framesize_types.in xlat/v4l2_input_types.in xlat/v4l2_memories.in xlat/v4l2_pix_fmts.in xlat/v4l2_sdr_fmts.in xlat/v4l2_sliced_flags.in xlat/v4l2_streaming_capabilities.in xlat/v4l2_tuner_audmodes.in xlat/v4l2_tuner_capabilities.in xlat/v4l2_tuner_rxsubchanses.in xlat/v4l2_tuner_types.in xlat/v4l2_vbi_flags.in xlat/wait4_options.in xlat/waitid_types.in xlat/whence_codes.in xlat/xattrflags.in xlat/xdp_flags.in xlat/xfs_dqblk_flags.in xlat/xfs_quota_flags.in
+XLAT_HEADER_FILES = xlat/access_flags.h xlat/addrfams.h xlat/adjtimex_modes.h xlat/adjtimex_state.h xlat/adjtimex_status.h xlat/advise.h xlat/af_packet_types.h xlat/aio_cmds.h xlat/archvals.h xlat/arp_hardware_types.h xlat/at_flags.h xlat/at_statx_sync_types.h xlat/atomic_ops.h xlat/audit_arch.h xlat/baud_options.h xlat/bdaddr_types.h xlat/blkpg_ops.h xlat/bluetooth_l2_cid.h xlat/bluetooth_l2_psm.h xlat/bootflags1.h xlat/bootflags2.h xlat/bootflags3.h xlat/bpf_attach_flags.h xlat/bpf_attach_type.h xlat/bpf_class.h xlat/bpf_commands.h xlat/bpf_file_mode_flags.h xlat/bpf_map_flags.h xlat/bpf_map_types.h xlat/bpf_map_update_elem_flags.h xlat/bpf_miscop.h xlat/bpf_mode.h xlat/bpf_op_alu.h xlat/bpf_op_jmp.h xlat/bpf_prog_flags.h xlat/bpf_prog_types.h xlat/bpf_query_flags.h xlat/bpf_rval.h xlat/bpf_size.h xlat/bpf_src.h xlat/bpf_task_fd_type.h xlat/bsg_flags.h xlat/bsg_protocol.h xlat/bsg_subprotocol.h xlat/bt_protocols.h xlat/btrfs_balance_args.h xlat/btrfs_balance_ctl_cmds.h xlat/btrfs_balance_flags.h xlat/btrfs_balance_state.h xlat/btrfs_compress_types.h xlat/btrfs_cont_reading_from_srcdev_mode.h xlat/btrfs_defrag_flags.h xlat/btrfs_dev_replace_cmds.h xlat/btrfs_dev_replace_results.h xlat/btrfs_dev_replace_state.h xlat/btrfs_dev_stats_flags.h xlat/btrfs_dev_stats_values.h xlat/btrfs_features_compat.h xlat/btrfs_features_compat_ro.h xlat/btrfs_features_incompat.h xlat/btrfs_key_types.h xlat/btrfs_logical_ino_args_flags.h xlat/btrfs_qgroup_ctl_cmds.h xlat/btrfs_qgroup_inherit_flags.h xlat/btrfs_qgroup_limit_flags.h xlat/btrfs_qgroup_status_flags.h xlat/btrfs_scrub_flags.h xlat/btrfs_send_flags.h xlat/btrfs_snap_flags_v2.h xlat/btrfs_space_info_flags.h xlat/btrfs_tree_objectids.h xlat/cacheflush_scope.h xlat/caif_protocols.h xlat/can_protocols.h xlat/cap.h xlat/cap_mask0.h xlat/cap_mask1.h xlat/cap_version.h xlat/clockflags.h xlat/clocknames.h xlat/clone_flags.h xlat/cpuclocknames.h xlat/crypto_nl_attrs.h xlat/dcb_commands.h xlat/delete_module_flags.h xlat/dirent_types.h xlat/dm_flags.h xlat/ebpf_class.h xlat/ebpf_mode.h xlat/ebpf_op_alu.h xlat/ebpf_op_jmp.h xlat/ebpf_regs.h xlat/ebpf_size.h xlat/efd_flags.h xlat/epollctls.h xlat/epollevents.h xlat/epollflags.h xlat/ethernet_protocols.h xlat/evdev_abs.h xlat/evdev_autorepeat.h xlat/evdev_ev.h xlat/evdev_ff_status.h xlat/evdev_ff_types.h xlat/evdev_keycode.h xlat/evdev_leds.h xlat/evdev_misc.h xlat/evdev_mtslots.h xlat/evdev_prop.h xlat/evdev_relative_axes.h xlat/evdev_snd.h xlat/evdev_switch.h xlat/evdev_sync.h xlat/f_owner_types.h xlat/f_seals.h xlat/falloc_flags.h xlat/fan_classes.h xlat/fan_event_flags.h xlat/fan_init_flags.h xlat/fan_mark_flags.h xlat/fcntlcmds.h xlat/fdflags.h xlat/fib_rule_actions.h xlat/fib_rule_flags.h xlat/fiemap_extent_flags.h xlat/fiemap_flags.h xlat/flockcmds.h xlat/fsmagic.h xlat/futexbitset.h xlat/futexops.h xlat/futexwakecmps.h xlat/futexwakeops.h xlat/getrandom_flags.h xlat/getsock_ip_options.h xlat/getsock_ipv6_options.h xlat/getsock_options.h xlat/hci_channels.h xlat/hw_breakpoint_len.h xlat/hw_breakpoint_type.h xlat/icmpfilterflags.h xlat/if_dqblk_valid.h xlat/if_dqinfo_flags.h xlat/if_dqinfo_valid.h xlat/ifaddrflags.h xlat/iffflags.h xlat/in6_addr_gen_mode.h xlat/inet6_devconf_indices.h xlat/inet6_if_flags.h xlat/inet_devconf_indices.h xlat/inet_diag_attrs.h xlat/inet_diag_bytecodes.h xlat/inet_diag_extended_flags.h xlat/inet_diag_req_attrs.h xlat/inet_protocols.h xlat/inotify_flags.h xlat/inotify_init_flags.h xlat/ioctl_dirs.h xlat/ioprio_class.h xlat/ioprio_who.h xlat/ip_cmsg_types.h xlat/ip_type_of_services.h xlat/ipc_msg_flags.h xlat/ipc_private.h xlat/ipccalls.h xlat/irda_protocols.h xlat/isdn_protocols.h xlat/itimer_which.h xlat/kcm_protocols.h xlat/kcmp_types.h xlat/kexec_arch_values.h xlat/kexec_file_load_flags.h xlat/kexec_load_flags.h xlat/key_perms.h xlat/key_reqkeys.h xlat/key_spec.h xlat/keyctl_commands.h xlat/kvm_cpuid_flags.h xlat/kvm_exit_reason.h xlat/kvm_mem_flags.h xlat/lockfcmds.h xlat/loop_cmds.h xlat/loop_crypt_type_options.h xlat/loop_flags_options.h xlat/lwtunnel_encap_types.h xlat/madvise_cmds.h xlat/mbindflags.h xlat/mctl_sync.h xlat/mdb_flags.h xlat/mdb_states.h xlat/membarrier_cmds.h xlat/memfd_create_flags.h xlat/mempolicyflags.h xlat/mlock_flags.h xlat/mlockall_flags.h xlat/mmap_flags.h xlat/mmap_prot.h xlat/modem_flags.h xlat/modetypes.h xlat/module_init_flags.h xlat/mount_flags.h xlat/move_pages_flags.h xlat/mq_attr_flags.h xlat/mremap_flags.h xlat/msg_flags.h xlat/msgctl_flags.h xlat/mtd_file_mode_options.h xlat/mtd_flags_options.h xlat/mtd_mode_options.h xlat/mtd_nandecc_options.h xlat/mtd_otp_options.h xlat/mtd_type_options.h xlat/multicast_router_types.h xlat/name_to_handle_at_flags.h xlat/nbd_ioctl_cmds.h xlat/neighbor_cache_entry_flags.h xlat/neighbor_cache_entry_states.h xlat/netfilter_versions.h xlat/netlink_ack_flags.h xlat/netlink_delete_flags.h xlat/netlink_diag_attrs.h xlat/netlink_diag_show.h xlat/netlink_flags.h xlat/netlink_get_flags.h xlat/netlink_new_flags.h xlat/netlink_protocols.h xlat/netlink_sk_meminfo_indices.h xlat/netlink_socket_flags.h xlat/netlink_states.h xlat/netlink_types.h xlat/nf_acct_msg_types.h xlat/nf_cthelper_msg_types.h xlat/nf_ctnetlink_exp_msg_types.h xlat/nf_ctnetlink_msg_types.h xlat/nf_cttimeout_msg_types.h xlat/nf_ipset_msg_types.h xlat/nf_nft_compat_msg_types.h xlat/nf_nftables_msg_types.h xlat/nf_osf_msg_types.h xlat/nf_queue_msg_types.h xlat/nf_ulog_msg_types.h xlat/nfc_protocols.h xlat/nl_audit_types.h xlat/nl_crypto_types.h xlat/nl_netfilter_msg_types.h xlat/nl_netfilter_subsys_ids.h xlat/nl_route_types.h xlat/nl_selinux_types.h xlat/nl_sock_diag_types.h xlat/nl_xfrm_types.h xlat/nlmsgerr_attrs.h xlat/notifyflags.h xlat/nt_descriptor_types.h xlat/numa_node.h xlat/open_access_modes.h xlat/open_mode_flags.h xlat/packet_diag_attrs.h xlat/packet_diag_info_flags.h xlat/packet_diag_show.h xlat/packet_mreq_type.h xlat/perf_attr_size.h xlat/perf_branch_sample_type.h xlat/perf_event_open_flags.h xlat/perf_event_read_format.h xlat/perf_event_sample_format.h xlat/perf_hw_cache_id.h xlat/perf_hw_cache_op_id.h xlat/perf_hw_cache_op_result_id.h xlat/perf_hw_id.h xlat/perf_ioctl_cmds.h xlat/perf_ioctl_flags.h xlat/perf_sw_ids.h xlat/perf_type_id.h xlat/personality_flags.h xlat/personality_types.h xlat/phonet_protocols.h xlat/pkey_access.h xlat/policies.h xlat/pollflags.h xlat/pr_cap_ambient.h xlat/pr_dumpable.h xlat/pr_fp_mode.h xlat/pr_mce_kill.h xlat/pr_mce_kill_policy.h xlat/pr_set_mm.h xlat/pr_spec_cmds.h xlat/pr_spec_get_store_bypass_flags.h xlat/pr_spec_set_store_bypass_flags.h xlat/pr_sve_vl_flags.h xlat/pr_tsc.h xlat/pr_unalign_flags.h xlat/prctl_options.h xlat/priorities.h xlat/ptp_flags_options.h xlat/ptrace_cmds.h xlat/ptrace_events.h xlat/ptrace_peeksiginfo_flags.h xlat/ptrace_setoptions_flags.h xlat/quota_formats.h xlat/quotacmds.h xlat/quotatypes.h xlat/random_ioctl_cmds.h xlat/rename_flags.h xlat/resource_flags.h xlat/resources.h xlat/riscv_flush_icache_flags.h xlat/route_nexthop_flags.h xlat/routing_flags.h xlat/routing_protocols.h xlat/routing_scopes.h xlat/routing_table_ids.h xlat/routing_types.h xlat/rtnl_addr_attrs.h xlat/rtnl_addrlabel_attrs.h xlat/rtnl_dcb_attrs.h xlat/rtnl_ifla_af_spec_inet6_attrs.h xlat/rtnl_ifla_af_spec_inet_attrs.h xlat/rtnl_ifla_brport_attrs.h xlat/rtnl_ifla_events.h xlat/rtnl_ifla_info_attrs.h xlat/rtnl_ifla_info_data_bridge_attrs.h xlat/rtnl_ifla_info_data_tun_attrs.h xlat/rtnl_ifla_port_attrs.h xlat/rtnl_ifla_vf_port_attrs.h xlat/rtnl_ifla_xdp_attrs.h xlat/rtnl_link_attrs.h xlat/rtnl_mdb_attrs.h xlat/rtnl_mdba_mdb_attrs.h xlat/rtnl_mdba_mdb_eattr_attrs.h xlat/rtnl_mdba_mdb_entry_attrs.h xlat/rtnl_mdba_router_attrs.h xlat/rtnl_mdba_router_pattr_attrs.h xlat/rtnl_neigh_attrs.h xlat/rtnl_neightbl_attrs.h xlat/rtnl_neightbl_parms_attrs.h xlat/rtnl_netconf_attrs.h xlat/rtnl_nsid_attrs.h xlat/rtnl_route_attrs.h xlat/rtnl_rta_metrics_attrs.h xlat/rtnl_rule_attrs.h xlat/rtnl_tc_action_attrs.h xlat/rtnl_tc_attrs.h xlat/rtnl_tca_stab_attrs.h xlat/rtnl_tca_stats_attrs.h xlat/rwf_flags.h xlat/s390_guarded_storage_commands.h xlat/s390_runtime_instr_commands.h xlat/s390_sthyi_function_codes.h xlat/sa_handler_values.h xlat/sched_flags.h xlat/schedulers.h xlat/scmvals.h xlat/scsi_sg_commands.h xlat/secbits.h xlat/seccomp_filter_flags.h xlat/seccomp_mode.h xlat/seccomp_ops.h xlat/seccomp_ret_action.h xlat/semctl_flags.h xlat/semop_flags.h xlat/setns_types.h xlat/setsock_ip_options.h xlat/setsock_ipv6_options.h xlat/setsock_options.h xlat/sfd_flags.h xlat/sg_io_dxfer_direction.h xlat/sg_io_flags.h xlat/sg_io_info.h xlat/sg_scsi_reset.h xlat/shm_flags.h xlat/shm_resource_flags.h xlat/shmctl_flags.h xlat/shutdown_modes.h xlat/sigact_flags.h xlat/sigaltstack_flags.h xlat/sigbus_codes.h xlat/sigchld_codes.h xlat/sigemt_codes.h xlat/sigev_value.h xlat/sigfpe_codes.h xlat/sigill_codes.h xlat/siginfo_codes.h xlat/sigpoll_codes.h xlat/sigprocmaskcmds.h xlat/sigprof_codes.h xlat/sigsegv_codes.h xlat/sigsys_codes.h xlat/sigtrap_codes.h xlat/skf_ad.h xlat/skf_off.h xlat/smc_diag_attrs.h xlat/smc_diag_extended_flags.h xlat/smc_link_group_roles.h xlat/smc_protocols.h xlat/smc_states.h xlat/snmp_icmp6_stats.h xlat/snmp_ip_stats.h xlat/sock_alg_options.h xlat/sock_bluetooth_options.h xlat/sock_caif_options.h xlat/sock_dccp_options.h xlat/sock_ip_options.h xlat/sock_ipv6_options.h xlat/sock_ipx_options.h xlat/sock_irda_options.h xlat/sock_iucv_options.h xlat/sock_kcm_options.h xlat/sock_llc_options.h xlat/sock_netlink_options.h xlat/sock_nfcllcp_options.h xlat/sock_options.h xlat/sock_packet_options.h xlat/sock_pnp_options.h xlat/sock_pppol2tp_options.h xlat/sock_raw_options.h xlat/sock_rds_options.h xlat/sock_rxrpc_options.h xlat/sock_sctp_options.h xlat/sock_tcp_options.h xlat/sock_tipc_options.h xlat/sock_tls_options.h xlat/sock_type_flags.h xlat/sock_udp_options.h xlat/socketcalls.h xlat/socketlayers.h xlat/socktypes.h xlat/sparc_kern_features.h xlat/splice_flags.h xlat/sram_alloc_flags.h xlat/statfs_flags.h xlat/statx_attrs.h xlat/statx_masks.h xlat/swap_flags.h xlat/sync_file_range_flags.h xlat/sysctl_kern.h xlat/sysctl_net.h xlat/sysctl_net_core.h xlat/sysctl_net_ipv4.h xlat/sysctl_net_ipv4_conf.h xlat/sysctl_net_ipv4_route.h xlat/sysctl_net_ipv6.h xlat/sysctl_net_ipv6_route.h xlat/sysctl_net_unix.h xlat/sysctl_root.h xlat/sysctl_vm.h xlat/syslog_action_type.h xlat/sysmips_operations.h xlat/tcflsh_options.h xlat/tcp_state_flags.h xlat/tcp_states.h xlat/tcxonc_options.h xlat/timerfdflags.h xlat/tun_device_types.h xlat/ubi_volume_props.h xlat/ubi_volume_types.h xlat/uffd_api_features.h xlat/uffd_api_flags.h xlat/uffd_copy_flags.h xlat/uffd_flags.h xlat/uffd_register_ioctl_flags.h xlat/uffd_register_mode_flags.h xlat/uffd_zeropage_flags.h xlat/umount_flags.h xlat/unix_diag_attrs.h xlat/unix_diag_show.h xlat/unshare_flags.h xlat/usagewho.h xlat/v4l2_buf_flags.h xlat/v4l2_buf_types.h xlat/v4l2_capture_modes.h xlat/v4l2_colorspaces.h xlat/v4l2_control_classes.h xlat/v4l2_control_flags.h xlat/v4l2_control_id_bases.h xlat/v4l2_control_ids.h xlat/v4l2_control_types.h xlat/v4l2_device_capabilities_flags.h xlat/v4l2_fields.h xlat/v4l2_format_description_flags.h xlat/v4l2_frameinterval_types.h xlat/v4l2_framesize_types.h xlat/v4l2_input_types.h xlat/v4l2_memories.h xlat/v4l2_pix_fmts.h xlat/v4l2_sdr_fmts.h xlat/v4l2_sliced_flags.h xlat/v4l2_streaming_capabilities.h xlat/v4l2_tuner_audmodes.h xlat/v4l2_tuner_capabilities.h xlat/v4l2_tuner_rxsubchanses.h xlat/v4l2_tuner_types.h xlat/v4l2_vbi_flags.h xlat/wait4_options.h xlat/waitid_types.h xlat/whence_codes.h xlat/xattrflags.h xlat/xdp_flags.h xlat/xfs_dqblk_flags.h xlat/xfs_quota_flags.h
 $(top_srcdir)/xlat/access_flags.h: $(top_srcdir)/xlat/access_flags.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/addrfams.h: $(top_srcdir)/xlat/addrfams.in $(top_srcdir)/xlat/gen.sh
@@ -80,6 +80,8 @@ $(top_srcdir)/xlat/bpf_size.h: $(top_srcdir)/xlat/bpf_size.in $(top_srcdir)/xlat
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/bpf_src.h: $(top_srcdir)/xlat/bpf_src.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
+$(top_srcdir)/xlat/bpf_task_fd_type.h: $(top_srcdir)/xlat/bpf_task_fd_type.in $(top_srcdir)/xlat/gen.sh
+	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/bsg_flags.h: $(top_srcdir)/xlat/bsg_flags.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/bsg_protocol.h: $(top_srcdir)/xlat/bsg_protocol.in $(top_srcdir)/xlat/gen.sh
@@ -252,6 +254,8 @@ $(top_srcdir)/xlat/flockcmds.h: $(top_srcdir)/xlat/flockcmds.in $(top_srcdir)/xl
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/fsmagic.h: $(top_srcdir)/xlat/fsmagic.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
+$(top_srcdir)/xlat/futexbitset.h: $(top_srcdir)/xlat/futexbitset.in $(top_srcdir)/xlat/gen.sh
+	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/futexops.h: $(top_srcdir)/xlat/futexops.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/futexwakecmps.h: $(top_srcdir)/xlat/futexwakecmps.in $(top_srcdir)/xlat/gen.sh
@@ -420,6 +424,8 @@ $(top_srcdir)/xlat/multicast_router_types.h: $(top_srcdir)/xlat/multicast_router
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/name_to_handle_at_flags.h: $(top_srcdir)/xlat/name_to_handle_at_flags.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
+$(top_srcdir)/xlat/nbd_ioctl_cmds.h: $(top_srcdir)/xlat/nbd_ioctl_cmds.in $(top_srcdir)/xlat/gen.sh
+	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/neighbor_cache_entry_flags.h: $(top_srcdir)/xlat/neighbor_cache_entry_flags.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/neighbor_cache_entry_states.h: $(top_srcdir)/xlat/neighbor_cache_entry_states.in $(top_srcdir)/xlat/gen.sh
@@ -592,6 +598,8 @@ $(top_srcdir)/xlat/quotacmds.h: $(top_srcdir)/xlat/quotacmds.in $(top_srcdir)/xl
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/quotatypes.h: $(top_srcdir)/xlat/quotatypes.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
+$(top_srcdir)/xlat/random_ioctl_cmds.h: $(top_srcdir)/xlat/random_ioctl_cmds.in $(top_srcdir)/xlat/gen.sh
+	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/rename_flags.h: $(top_srcdir)/xlat/rename_flags.in $(top_srcdir)/xlat/gen.sh
 	$(AM_V_GEN)$(top_srcdir)/xlat/gen.sh $< $@
 $(top_srcdir)/xlat/resource_flags.h: $(top_srcdir)/xlat/resource_flags.in $(top_srcdir)/xlat/gen.sh
diff --git a/xlat/af_packet_versions.h b/xlat/af_packet_versions.h
new file mode 100644
index 0000000..8d82eba
--- /dev/null
+++ b/xlat/af_packet_versions.h
@@ -0,0 +1,46 @@
+/* Generated by ./xlat/gen.sh from ./xlat/af_packet_versions.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(TPACKET_V1) || (defined(HAVE_DECL_TPACKET_V1) && HAVE_DECL_TPACKET_V1)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((TPACKET_V1) == (0), "TPACKET_V1 != 0");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define TPACKET_V1 0
+#endif
+#if defined(TPACKET_V2) || (defined(HAVE_DECL_TPACKET_V2) && HAVE_DECL_TPACKET_V2)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((TPACKET_V2) == (1), "TPACKET_V2 != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define TPACKET_V2 1
+#endif
+#if defined(TPACKET_V3) || (defined(HAVE_DECL_TPACKET_V3) && HAVE_DECL_TPACKET_V3)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((TPACKET_V3) == (2), "TPACKET_V3 != 2");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define TPACKET_V3 2
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat af_packet_versions in mpers mode
+
+# else
+
+static
+const struct xlat af_packet_versions[] = {
+ XLAT(TPACKET_V1),
+ XLAT(TPACKET_V2),
+ XLAT(TPACKET_V3),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/ax25_protocols.h b/xlat/ax25_protocols.h
new file mode 100644
index 0000000..8f72ebb
--- /dev/null
+++ b/xlat/ax25_protocols.h
@@ -0,0 +1,130 @@
+/* Generated by ./xlat/gen.sh from ./xlat/ax25_protocols.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(AX25_P_ROSE) || (defined(HAVE_DECL_AX25_P_ROSE) && HAVE_DECL_AX25_P_ROSE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_ROSE) == (0x01), "AX25_P_ROSE != 0x01");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_ROSE 0x01
+#endif
+#if defined(AX25_P_VJCOMP) || (defined(HAVE_DECL_AX25_P_VJCOMP) && HAVE_DECL_AX25_P_VJCOMP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_VJCOMP) == (0x06), "AX25_P_VJCOMP != 0x06");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_VJCOMP 0x06
+#endif
+#if defined(AX25_P_VJUNCOMP) || (defined(HAVE_DECL_AX25_P_VJUNCOMP) && HAVE_DECL_AX25_P_VJUNCOMP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_VJUNCOMP) == (0x07), "AX25_P_VJUNCOMP != 0x07");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_VJUNCOMP 0x07
+#endif
+#if defined(AX25_P_SEGMENT) || (defined(HAVE_DECL_AX25_P_SEGMENT) && HAVE_DECL_AX25_P_SEGMENT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_SEGMENT) == (0x08), "AX25_P_SEGMENT != 0x08");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_SEGMENT 0x08
+#endif
+#if defined(AX25_P_TEXNET) || (defined(HAVE_DECL_AX25_P_TEXNET) && HAVE_DECL_AX25_P_TEXNET)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_TEXNET) == (0xc3), "AX25_P_TEXNET != 0xc3");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_TEXNET 0xc3
+#endif
+#if defined(AX25_P_LQ) || (defined(HAVE_DECL_AX25_P_LQ) && HAVE_DECL_AX25_P_LQ)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_LQ) == (0xc4), "AX25_P_LQ != 0xc4");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_LQ 0xc4
+#endif
+#if defined(AX25_P_ATALK) || (defined(HAVE_DECL_AX25_P_ATALK) && HAVE_DECL_AX25_P_ATALK)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_ATALK) == (0xca), "AX25_P_ATALK != 0xca");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_ATALK 0xca
+#endif
+#if defined(AX25_P_ATALK_ARP) || (defined(HAVE_DECL_AX25_P_ATALK_ARP) && HAVE_DECL_AX25_P_ATALK_ARP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_ATALK_ARP) == (0xcb), "AX25_P_ATALK_ARP != 0xcb");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_ATALK_ARP 0xcb
+#endif
+#if defined(AX25_P_IP) || (defined(HAVE_DECL_AX25_P_IP) && HAVE_DECL_AX25_P_IP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_IP) == (0xcc), "AX25_P_IP != 0xcc");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_IP 0xcc
+#endif
+#if defined(AX25_P_ARP) || (defined(HAVE_DECL_AX25_P_ARP) && HAVE_DECL_AX25_P_ARP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_ARP) == (0xcd), "AX25_P_ARP != 0xcd");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_ARP 0xcd
+#endif
+#if defined(AX25_P_FLEXNET) || (defined(HAVE_DECL_AX25_P_FLEXNET) && HAVE_DECL_AX25_P_FLEXNET)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_FLEXNET) == (0xce), "AX25_P_FLEXNET != 0xce");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_FLEXNET 0xce
+#endif
+#if defined(AX25_P_NETROM) || (defined(HAVE_DECL_AX25_P_NETROM) && HAVE_DECL_AX25_P_NETROM)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_NETROM) == (0xcf), "AX25_P_NETROM != 0xcf");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_NETROM 0xcf
+#endif
+#if defined(AX25_P_TEXT) || (defined(HAVE_DECL_AX25_P_TEXT) && HAVE_DECL_AX25_P_TEXT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_P_TEXT) == (0xf0), "AX25_P_TEXT != 0xf0");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_P_TEXT 0xf0
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat ax25_protocols in mpers mode
+
+# else
+
+static
+const struct xlat ax25_protocols[] = {
+
+
+ XLAT(AX25_P_ROSE),
+ XLAT(AX25_P_VJCOMP),
+
+ XLAT(AX25_P_VJUNCOMP),
+
+ XLAT(AX25_P_SEGMENT),
+ XLAT(AX25_P_TEXNET),
+ XLAT(AX25_P_LQ),
+ XLAT(AX25_P_ATALK),
+ XLAT(AX25_P_ATALK_ARP),
+ XLAT(AX25_P_IP),
+ XLAT(AX25_P_ARP),
+ XLAT(AX25_P_FLEXNET),
+ XLAT(AX25_P_NETROM),
+ XLAT(AX25_P_TEXT),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/bpf_task_fd_type.h b/xlat/bpf_task_fd_type.h
new file mode 100644
index 0000000..c4d1993
--- /dev/null
+++ b/xlat/bpf_task_fd_type.h
@@ -0,0 +1,70 @@
+/* Generated by ./xlat/gen.sh from ./xlat/bpf_task_fd_type.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(BPF_FD_TYPE_RAW_TRACEPOINT) || (defined(HAVE_DECL_BPF_FD_TYPE_RAW_TRACEPOINT) && HAVE_DECL_BPF_FD_TYPE_RAW_TRACEPOINT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((BPF_FD_TYPE_RAW_TRACEPOINT) == (0), "BPF_FD_TYPE_RAW_TRACEPOINT != 0");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define BPF_FD_TYPE_RAW_TRACEPOINT 0
+#endif
+#if defined(BPF_FD_TYPE_TRACEPOINT) || (defined(HAVE_DECL_BPF_FD_TYPE_TRACEPOINT) && HAVE_DECL_BPF_FD_TYPE_TRACEPOINT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((BPF_FD_TYPE_TRACEPOINT) == (1), "BPF_FD_TYPE_TRACEPOINT != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define BPF_FD_TYPE_TRACEPOINT 1
+#endif
+#if defined(BPF_FD_TYPE_KPROBE) || (defined(HAVE_DECL_BPF_FD_TYPE_KPROBE) && HAVE_DECL_BPF_FD_TYPE_KPROBE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((BPF_FD_TYPE_KPROBE) == (2), "BPF_FD_TYPE_KPROBE != 2");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define BPF_FD_TYPE_KPROBE 2
+#endif
+#if defined(BPF_FD_TYPE_KRETPROBE) || (defined(HAVE_DECL_BPF_FD_TYPE_KRETPROBE) && HAVE_DECL_BPF_FD_TYPE_KRETPROBE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((BPF_FD_TYPE_KRETPROBE) == (3), "BPF_FD_TYPE_KRETPROBE != 3");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define BPF_FD_TYPE_KRETPROBE 3
+#endif
+#if defined(BPF_FD_TYPE_UPROBE) || (defined(HAVE_DECL_BPF_FD_TYPE_UPROBE) && HAVE_DECL_BPF_FD_TYPE_UPROBE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((BPF_FD_TYPE_UPROBE) == (4), "BPF_FD_TYPE_UPROBE != 4");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define BPF_FD_TYPE_UPROBE 4
+#endif
+#if defined(BPF_FD_TYPE_URETPROBE) || (defined(HAVE_DECL_BPF_FD_TYPE_URETPROBE) && HAVE_DECL_BPF_FD_TYPE_URETPROBE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((BPF_FD_TYPE_URETPROBE) == (5), "BPF_FD_TYPE_URETPROBE != 5");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define BPF_FD_TYPE_URETPROBE 5
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat bpf_task_fd_type in mpers mode
+
+# else
+
+static
+const struct xlat bpf_task_fd_type[] = {
+ [BPF_FD_TYPE_RAW_TRACEPOINT] = XLAT(BPF_FD_TYPE_RAW_TRACEPOINT),
+ [BPF_FD_TYPE_TRACEPOINT] = XLAT(BPF_FD_TYPE_TRACEPOINT),
+ [BPF_FD_TYPE_KPROBE] = XLAT(BPF_FD_TYPE_KPROBE),
+ [BPF_FD_TYPE_KRETPROBE] = XLAT(BPF_FD_TYPE_KRETPROBE),
+ [BPF_FD_TYPE_UPROBE] = XLAT(BPF_FD_TYPE_UPROBE),
+ [BPF_FD_TYPE_URETPROBE] = XLAT(BPF_FD_TYPE_URETPROBE),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/evdev_ev.h b/xlat/evdev_ev.h
index 30adf93..a112805 100644
--- a/xlat/evdev_ev.h
+++ b/xlat/evdev_ev.h
@@ -90,13 +90,8 @@ DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 
 #ifndef XLAT_MACROS_ONLY
 
-# ifdef IN_MPERS
+# ifndef IN_MPERS
 
-#  error static const struct xlat evdev_ev in mpers mode
-
-# else
-
-static
 const struct xlat evdev_ev[] = {
  XLAT(EV_SYN),
  XLAT(EV_KEY),
diff --git a/xlat/futexbitset.h b/xlat/futexbitset.h
new file mode 100644
index 0000000..566c8cb
--- /dev/null
+++ b/xlat/futexbitset.h
@@ -0,0 +1,30 @@
+/* Generated by ./xlat/gen.sh from ./xlat/futexbitset.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(FUTEX_BITSET_MATCH_ANY) || (defined(HAVE_DECL_FUTEX_BITSET_MATCH_ANY) && HAVE_DECL_FUTEX_BITSET_MATCH_ANY)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((FUTEX_BITSET_MATCH_ANY) == (0xffffffff), "FUTEX_BITSET_MATCH_ANY != 0xffffffff");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define FUTEX_BITSET_MATCH_ANY 0xffffffff
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat futexbitset in mpers mode
+
+# else
+
+static
+const struct xlat futexbitset[] = {
+ XLAT(FUTEX_BITSET_MATCH_ANY),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/ioprio_class.h b/xlat/ioprio_class.h
index c7bfa4b..b396784 100644
--- a/xlat/ioprio_class.h
+++ b/xlat/ioprio_class.h
@@ -3,6 +3,34 @@
 #include "gcc_compat.h"
 #include "static_assert.h"
 
+#if defined(IOPRIO_CLASS_NONE) || (defined(HAVE_DECL_IOPRIO_CLASS_NONE) && HAVE_DECL_IOPRIO_CLASS_NONE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IOPRIO_CLASS_NONE) == (0), "IOPRIO_CLASS_NONE != 0");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IOPRIO_CLASS_NONE 0
+#endif
+#if defined(IOPRIO_CLASS_RT) || (defined(HAVE_DECL_IOPRIO_CLASS_RT) && HAVE_DECL_IOPRIO_CLASS_RT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IOPRIO_CLASS_RT) == (1), "IOPRIO_CLASS_RT != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IOPRIO_CLASS_RT 1
+#endif
+#if defined(IOPRIO_CLASS_BE) || (defined(HAVE_DECL_IOPRIO_CLASS_BE) && HAVE_DECL_IOPRIO_CLASS_BE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IOPRIO_CLASS_BE) == (2), "IOPRIO_CLASS_BE != 2");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IOPRIO_CLASS_BE 2
+#endif
+#if defined(IOPRIO_CLASS_IDLE) || (defined(HAVE_DECL_IOPRIO_CLASS_IDLE) && HAVE_DECL_IOPRIO_CLASS_IDLE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IOPRIO_CLASS_IDLE) == (3), "IOPRIO_CLASS_IDLE != 3");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IOPRIO_CLASS_IDLE 3
+#endif
 
 #ifndef XLAT_MACROS_ONLY
 
diff --git a/xlat/ioprio_who.h b/xlat/ioprio_who.h
index e296fde..9bb2703 100644
--- a/xlat/ioprio_who.h
+++ b/xlat/ioprio_who.h
@@ -3,6 +3,27 @@
 #include "gcc_compat.h"
 #include "static_assert.h"
 
+#if defined(IOPRIO_WHO_PROCESS) || (defined(HAVE_DECL_IOPRIO_WHO_PROCESS) && HAVE_DECL_IOPRIO_WHO_PROCESS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IOPRIO_WHO_PROCESS) == (1), "IOPRIO_WHO_PROCESS != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IOPRIO_WHO_PROCESS 1
+#endif
+#if defined(IOPRIO_WHO_PGRP) || (defined(HAVE_DECL_IOPRIO_WHO_PGRP) && HAVE_DECL_IOPRIO_WHO_PGRP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IOPRIO_WHO_PGRP) == (2), "IOPRIO_WHO_PGRP != 2");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IOPRIO_WHO_PGRP 2
+#endif
+#if defined(IOPRIO_WHO_USER) || (defined(HAVE_DECL_IOPRIO_WHO_USER) && HAVE_DECL_IOPRIO_WHO_USER)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IOPRIO_WHO_USER) == (3), "IOPRIO_WHO_USER != 3");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IOPRIO_WHO_USER 3
+#endif
 
 #ifndef XLAT_MACROS_ONLY
 
diff --git a/xlat/kvm_cap.h b/xlat/kvm_cap.h
new file mode 100644
index 0000000..316b28a
--- /dev/null
+++ b/xlat/kvm_cap.h
@@ -0,0 +1,1302 @@
+/* Generated by ./xlat/gen.sh from ./xlat/kvm_cap.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(KVM_CAP_IRQCHIP) || (defined(HAVE_DECL_KVM_CAP_IRQCHIP) && HAVE_DECL_KVM_CAP_IRQCHIP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IRQCHIP) == (0), "KVM_CAP_IRQCHIP != 0");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IRQCHIP 0
+#endif
+#if defined(KVM_CAP_HLT) || (defined(HAVE_DECL_KVM_CAP_HLT) && HAVE_DECL_KVM_CAP_HLT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_HLT) == (1), "KVM_CAP_HLT != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_HLT 1
+#endif
+#if defined(KVM_CAP_MMU_SHADOW_CACHE_CONTROL) || (defined(HAVE_DECL_KVM_CAP_MMU_SHADOW_CACHE_CONTROL) && HAVE_DECL_KVM_CAP_MMU_SHADOW_CACHE_CONTROL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MMU_SHADOW_CACHE_CONTROL) == (2), "KVM_CAP_MMU_SHADOW_CACHE_CONTROL != 2");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MMU_SHADOW_CACHE_CONTROL 2
+#endif
+#if defined(KVM_CAP_USER_MEMORY) || (defined(HAVE_DECL_KVM_CAP_USER_MEMORY) && HAVE_DECL_KVM_CAP_USER_MEMORY)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_USER_MEMORY) == (3), "KVM_CAP_USER_MEMORY != 3");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_USER_MEMORY 3
+#endif
+#if defined(KVM_CAP_SET_TSS_ADDR) || (defined(HAVE_DECL_KVM_CAP_SET_TSS_ADDR) && HAVE_DECL_KVM_CAP_SET_TSS_ADDR)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SET_TSS_ADDR) == (4), "KVM_CAP_SET_TSS_ADDR != 4");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SET_TSS_ADDR 4
+#endif
+#if defined(KVM_CAP_VAPIC) || (defined(HAVE_DECL_KVM_CAP_VAPIC) && HAVE_DECL_KVM_CAP_VAPIC)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_VAPIC) == (6), "KVM_CAP_VAPIC != 6");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_VAPIC 6
+#endif
+#if defined(KVM_CAP_EXT_CPUID) || (defined(HAVE_DECL_KVM_CAP_EXT_CPUID) && HAVE_DECL_KVM_CAP_EXT_CPUID)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_EXT_CPUID) == (7), "KVM_CAP_EXT_CPUID != 7");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_EXT_CPUID 7
+#endif
+#if defined(KVM_CAP_CLOCKSOURCE) || (defined(HAVE_DECL_KVM_CAP_CLOCKSOURCE) && HAVE_DECL_KVM_CAP_CLOCKSOURCE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_CLOCKSOURCE) == (8), "KVM_CAP_CLOCKSOURCE != 8");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_CLOCKSOURCE 8
+#endif
+#if defined(KVM_CAP_NR_VCPUS) || (defined(HAVE_DECL_KVM_CAP_NR_VCPUS) && HAVE_DECL_KVM_CAP_NR_VCPUS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_NR_VCPUS) == (9), "KVM_CAP_NR_VCPUS != 9");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_NR_VCPUS 9
+#endif
+#if defined(KVM_CAP_NR_MEMSLOTS) || (defined(HAVE_DECL_KVM_CAP_NR_MEMSLOTS) && HAVE_DECL_KVM_CAP_NR_MEMSLOTS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_NR_MEMSLOTS) == (10), "KVM_CAP_NR_MEMSLOTS != 10");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_NR_MEMSLOTS 10
+#endif
+#if defined(KVM_CAP_PIT) || (defined(HAVE_DECL_KVM_CAP_PIT) && HAVE_DECL_KVM_CAP_PIT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PIT) == (11), "KVM_CAP_PIT != 11");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PIT 11
+#endif
+#if defined(KVM_CAP_NOP_IO_DELAY) || (defined(HAVE_DECL_KVM_CAP_NOP_IO_DELAY) && HAVE_DECL_KVM_CAP_NOP_IO_DELAY)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_NOP_IO_DELAY) == (12), "KVM_CAP_NOP_IO_DELAY != 12");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_NOP_IO_DELAY 12
+#endif
+#if defined(KVM_CAP_PV_MMU) || (defined(HAVE_DECL_KVM_CAP_PV_MMU) && HAVE_DECL_KVM_CAP_PV_MMU)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PV_MMU) == (13), "KVM_CAP_PV_MMU != 13");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PV_MMU 13
+#endif
+#if defined(KVM_CAP_MP_STATE) || (defined(HAVE_DECL_KVM_CAP_MP_STATE) && HAVE_DECL_KVM_CAP_MP_STATE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MP_STATE) == (14), "KVM_CAP_MP_STATE != 14");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MP_STATE 14
+#endif
+#if defined(KVM_CAP_COALESCED_MMIO) || (defined(HAVE_DECL_KVM_CAP_COALESCED_MMIO) && HAVE_DECL_KVM_CAP_COALESCED_MMIO)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_COALESCED_MMIO) == (15), "KVM_CAP_COALESCED_MMIO != 15");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_COALESCED_MMIO 15
+#endif
+#if defined(KVM_CAP_SYNC_MMU) || (defined(HAVE_DECL_KVM_CAP_SYNC_MMU) && HAVE_DECL_KVM_CAP_SYNC_MMU)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SYNC_MMU) == (16), "KVM_CAP_SYNC_MMU != 16");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SYNC_MMU 16
+#endif
+#if defined(KVM_CAP_IOMMU) || (defined(HAVE_DECL_KVM_CAP_IOMMU) && HAVE_DECL_KVM_CAP_IOMMU)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IOMMU) == (18), "KVM_CAP_IOMMU != 18");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IOMMU 18
+#endif
+#if defined(KVM_CAP_DESTROY_MEMORY_REGION_WORKS) || (defined(HAVE_DECL_KVM_CAP_DESTROY_MEMORY_REGION_WORKS) && HAVE_DECL_KVM_CAP_DESTROY_MEMORY_REGION_WORKS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_DESTROY_MEMORY_REGION_WORKS) == (21), "KVM_CAP_DESTROY_MEMORY_REGION_WORKS != 21");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_DESTROY_MEMORY_REGION_WORKS 21
+#endif
+#if defined(KVM_CAP_USER_NMI) || (defined(HAVE_DECL_KVM_CAP_USER_NMI) && HAVE_DECL_KVM_CAP_USER_NMI)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_USER_NMI) == (22), "KVM_CAP_USER_NMI != 22");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_USER_NMI 22
+#endif
+#if defined(KVM_CAP_SET_GUEST_DEBUG) || (defined(HAVE_DECL_KVM_CAP_SET_GUEST_DEBUG) && HAVE_DECL_KVM_CAP_SET_GUEST_DEBUG)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SET_GUEST_DEBUG) == (23), "KVM_CAP_SET_GUEST_DEBUG != 23");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SET_GUEST_DEBUG 23
+#endif
+#if defined(KVM_CAP_REINJECT_CONTROL) || (defined(HAVE_DECL_KVM_CAP_REINJECT_CONTROL) && HAVE_DECL_KVM_CAP_REINJECT_CONTROL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_REINJECT_CONTROL) == (24), "KVM_CAP_REINJECT_CONTROL != 24");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_REINJECT_CONTROL 24
+#endif
+#if defined(KVM_CAP_IRQ_ROUTING) || (defined(HAVE_DECL_KVM_CAP_IRQ_ROUTING) && HAVE_DECL_KVM_CAP_IRQ_ROUTING)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IRQ_ROUTING) == (25), "KVM_CAP_IRQ_ROUTING != 25");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IRQ_ROUTING 25
+#endif
+#if defined(KVM_CAP_IRQ_INJECT_STATUS) || (defined(HAVE_DECL_KVM_CAP_IRQ_INJECT_STATUS) && HAVE_DECL_KVM_CAP_IRQ_INJECT_STATUS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IRQ_INJECT_STATUS) == (26), "KVM_CAP_IRQ_INJECT_STATUS != 26");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IRQ_INJECT_STATUS 26
+#endif
+#if defined(KVM_CAP_ASSIGN_DEV_IRQ) || (defined(HAVE_DECL_KVM_CAP_ASSIGN_DEV_IRQ) && HAVE_DECL_KVM_CAP_ASSIGN_DEV_IRQ)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ASSIGN_DEV_IRQ) == (29), "KVM_CAP_ASSIGN_DEV_IRQ != 29");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ASSIGN_DEV_IRQ 29
+#endif
+#if defined(KVM_CAP_JOIN_MEMORY_REGIONS_WORKS) || (defined(HAVE_DECL_KVM_CAP_JOIN_MEMORY_REGIONS_WORKS) && HAVE_DECL_KVM_CAP_JOIN_MEMORY_REGIONS_WORKS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_JOIN_MEMORY_REGIONS_WORKS) == (30), "KVM_CAP_JOIN_MEMORY_REGIONS_WORKS != 30");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_JOIN_MEMORY_REGIONS_WORKS 30
+#endif
+#if defined(KVM_CAP_MCE) || (defined(HAVE_DECL_KVM_CAP_MCE) && HAVE_DECL_KVM_CAP_MCE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MCE) == (31), "KVM_CAP_MCE != 31");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MCE 31
+#endif
+#if defined(KVM_CAP_IRQFD) || (defined(HAVE_DECL_KVM_CAP_IRQFD) && HAVE_DECL_KVM_CAP_IRQFD)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IRQFD) == (32), "KVM_CAP_IRQFD != 32");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IRQFD 32
+#endif
+#if defined(KVM_CAP_PIT2) || (defined(HAVE_DECL_KVM_CAP_PIT2) && HAVE_DECL_KVM_CAP_PIT2)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PIT2) == (33), "KVM_CAP_PIT2 != 33");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PIT2 33
+#endif
+#if defined(KVM_CAP_SET_BOOT_CPU_ID) || (defined(HAVE_DECL_KVM_CAP_SET_BOOT_CPU_ID) && HAVE_DECL_KVM_CAP_SET_BOOT_CPU_ID)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SET_BOOT_CPU_ID) == (34), "KVM_CAP_SET_BOOT_CPU_ID != 34");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SET_BOOT_CPU_ID 34
+#endif
+#if defined(KVM_CAP_PIT_STATE2) || (defined(HAVE_DECL_KVM_CAP_PIT_STATE2) && HAVE_DECL_KVM_CAP_PIT_STATE2)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PIT_STATE2) == (35), "KVM_CAP_PIT_STATE2 != 35");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PIT_STATE2 35
+#endif
+#if defined(KVM_CAP_IOEVENTFD) || (defined(HAVE_DECL_KVM_CAP_IOEVENTFD) && HAVE_DECL_KVM_CAP_IOEVENTFD)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IOEVENTFD) == (36), "KVM_CAP_IOEVENTFD != 36");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IOEVENTFD 36
+#endif
+#if defined(KVM_CAP_SET_IDENTITY_MAP_ADDR) || (defined(HAVE_DECL_KVM_CAP_SET_IDENTITY_MAP_ADDR) && HAVE_DECL_KVM_CAP_SET_IDENTITY_MAP_ADDR)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SET_IDENTITY_MAP_ADDR) == (37), "KVM_CAP_SET_IDENTITY_MAP_ADDR != 37");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SET_IDENTITY_MAP_ADDR 37
+#endif
+#if defined(KVM_CAP_XEN_HVM) || (defined(HAVE_DECL_KVM_CAP_XEN_HVM) && HAVE_DECL_KVM_CAP_XEN_HVM)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_XEN_HVM) == (38), "KVM_CAP_XEN_HVM != 38");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_XEN_HVM 38
+#endif
+#if defined(KVM_CAP_ADJUST_CLOCK) || (defined(HAVE_DECL_KVM_CAP_ADJUST_CLOCK) && HAVE_DECL_KVM_CAP_ADJUST_CLOCK)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ADJUST_CLOCK) == (39), "KVM_CAP_ADJUST_CLOCK != 39");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ADJUST_CLOCK 39
+#endif
+#if defined(KVM_CAP_INTERNAL_ERROR_DATA) || (defined(HAVE_DECL_KVM_CAP_INTERNAL_ERROR_DATA) && HAVE_DECL_KVM_CAP_INTERNAL_ERROR_DATA)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_INTERNAL_ERROR_DATA) == (40), "KVM_CAP_INTERNAL_ERROR_DATA != 40");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_INTERNAL_ERROR_DATA 40
+#endif
+#if defined(KVM_CAP_VCPU_EVENTS) || (defined(HAVE_DECL_KVM_CAP_VCPU_EVENTS) && HAVE_DECL_KVM_CAP_VCPU_EVENTS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_VCPU_EVENTS) == (41), "KVM_CAP_VCPU_EVENTS != 41");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_VCPU_EVENTS 41
+#endif
+#if defined(KVM_CAP_S390_PSW) || (defined(HAVE_DECL_KVM_CAP_S390_PSW) && HAVE_DECL_KVM_CAP_S390_PSW)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_PSW) == (42), "KVM_CAP_S390_PSW != 42");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_PSW 42
+#endif
+#if defined(KVM_CAP_PPC_SEGSTATE) || (defined(HAVE_DECL_KVM_CAP_PPC_SEGSTATE) && HAVE_DECL_KVM_CAP_PPC_SEGSTATE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_SEGSTATE) == (43), "KVM_CAP_PPC_SEGSTATE != 43");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_SEGSTATE 43
+#endif
+#if defined(KVM_CAP_HYPERV) || (defined(HAVE_DECL_KVM_CAP_HYPERV) && HAVE_DECL_KVM_CAP_HYPERV)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_HYPERV) == (44), "KVM_CAP_HYPERV != 44");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_HYPERV 44
+#endif
+#if defined(KVM_CAP_HYPERV_VAPIC) || (defined(HAVE_DECL_KVM_CAP_HYPERV_VAPIC) && HAVE_DECL_KVM_CAP_HYPERV_VAPIC)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_HYPERV_VAPIC) == (45), "KVM_CAP_HYPERV_VAPIC != 45");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_HYPERV_VAPIC 45
+#endif
+#if defined(KVM_CAP_HYPERV_SPIN) || (defined(HAVE_DECL_KVM_CAP_HYPERV_SPIN) && HAVE_DECL_KVM_CAP_HYPERV_SPIN)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_HYPERV_SPIN) == (46), "KVM_CAP_HYPERV_SPIN != 46");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_HYPERV_SPIN 46
+#endif
+#if defined(KVM_CAP_PCI_SEGMENT) || (defined(HAVE_DECL_KVM_CAP_PCI_SEGMENT) && HAVE_DECL_KVM_CAP_PCI_SEGMENT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PCI_SEGMENT) == (47), "KVM_CAP_PCI_SEGMENT != 47");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PCI_SEGMENT 47
+#endif
+#if defined(KVM_CAP_PPC_PAIRED_SINGLES) || (defined(HAVE_DECL_KVM_CAP_PPC_PAIRED_SINGLES) && HAVE_DECL_KVM_CAP_PPC_PAIRED_SINGLES)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_PAIRED_SINGLES) == (48), "KVM_CAP_PPC_PAIRED_SINGLES != 48");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_PAIRED_SINGLES 48
+#endif
+#if defined(KVM_CAP_INTR_SHADOW) || (defined(HAVE_DECL_KVM_CAP_INTR_SHADOW) && HAVE_DECL_KVM_CAP_INTR_SHADOW)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_INTR_SHADOW) == (49), "KVM_CAP_INTR_SHADOW != 49");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_INTR_SHADOW 49
+#endif
+#if defined(KVM_CAP_DEBUGREGS) || (defined(HAVE_DECL_KVM_CAP_DEBUGREGS) && HAVE_DECL_KVM_CAP_DEBUGREGS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_DEBUGREGS) == (50), "KVM_CAP_DEBUGREGS != 50");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_DEBUGREGS 50
+#endif
+#if defined(KVM_CAP_X86_ROBUST_SINGLESTEP) || (defined(HAVE_DECL_KVM_CAP_X86_ROBUST_SINGLESTEP) && HAVE_DECL_KVM_CAP_X86_ROBUST_SINGLESTEP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_X86_ROBUST_SINGLESTEP) == (51), "KVM_CAP_X86_ROBUST_SINGLESTEP != 51");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_X86_ROBUST_SINGLESTEP 51
+#endif
+#if defined(KVM_CAP_PPC_OSI) || (defined(HAVE_DECL_KVM_CAP_PPC_OSI) && HAVE_DECL_KVM_CAP_PPC_OSI)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_OSI) == (52), "KVM_CAP_PPC_OSI != 52");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_OSI 52
+#endif
+#if defined(KVM_CAP_PPC_UNSET_IRQ) || (defined(HAVE_DECL_KVM_CAP_PPC_UNSET_IRQ) && HAVE_DECL_KVM_CAP_PPC_UNSET_IRQ)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_UNSET_IRQ) == (53), "KVM_CAP_PPC_UNSET_IRQ != 53");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_UNSET_IRQ 53
+#endif
+#if defined(KVM_CAP_ENABLE_CAP) || (defined(HAVE_DECL_KVM_CAP_ENABLE_CAP) && HAVE_DECL_KVM_CAP_ENABLE_CAP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ENABLE_CAP) == (54), "KVM_CAP_ENABLE_CAP != 54");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ENABLE_CAP 54
+#endif
+#if defined(KVM_CAP_XSAVE) || (defined(HAVE_DECL_KVM_CAP_XSAVE) && HAVE_DECL_KVM_CAP_XSAVE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_XSAVE) == (55), "KVM_CAP_XSAVE != 55");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_XSAVE 55
+#endif
+#if defined(KVM_CAP_XCRS) || (defined(HAVE_DECL_KVM_CAP_XCRS) && HAVE_DECL_KVM_CAP_XCRS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_XCRS) == (56), "KVM_CAP_XCRS != 56");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_XCRS 56
+#endif
+#if defined(KVM_CAP_PPC_GET_PVINFO) || (defined(HAVE_DECL_KVM_CAP_PPC_GET_PVINFO) && HAVE_DECL_KVM_CAP_PPC_GET_PVINFO)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_GET_PVINFO) == (57), "KVM_CAP_PPC_GET_PVINFO != 57");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_GET_PVINFO 57
+#endif
+#if defined(KVM_CAP_PPC_IRQ_LEVEL) || (defined(HAVE_DECL_KVM_CAP_PPC_IRQ_LEVEL) && HAVE_DECL_KVM_CAP_PPC_IRQ_LEVEL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_IRQ_LEVEL) == (58), "KVM_CAP_PPC_IRQ_LEVEL != 58");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_IRQ_LEVEL 58
+#endif
+#if defined(KVM_CAP_ASYNC_PF) || (defined(HAVE_DECL_KVM_CAP_ASYNC_PF) && HAVE_DECL_KVM_CAP_ASYNC_PF)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ASYNC_PF) == (59), "KVM_CAP_ASYNC_PF != 59");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ASYNC_PF 59
+#endif
+#if defined(KVM_CAP_TSC_CONTROL) || (defined(HAVE_DECL_KVM_CAP_TSC_CONTROL) && HAVE_DECL_KVM_CAP_TSC_CONTROL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_TSC_CONTROL) == (60), "KVM_CAP_TSC_CONTROL != 60");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_TSC_CONTROL 60
+#endif
+#if defined(KVM_CAP_GET_TSC_KHZ) || (defined(HAVE_DECL_KVM_CAP_GET_TSC_KHZ) && HAVE_DECL_KVM_CAP_GET_TSC_KHZ)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_GET_TSC_KHZ) == (61), "KVM_CAP_GET_TSC_KHZ != 61");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_GET_TSC_KHZ 61
+#endif
+#if defined(KVM_CAP_PPC_BOOKE_SREGS) || (defined(HAVE_DECL_KVM_CAP_PPC_BOOKE_SREGS) && HAVE_DECL_KVM_CAP_PPC_BOOKE_SREGS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_BOOKE_SREGS) == (62), "KVM_CAP_PPC_BOOKE_SREGS != 62");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_BOOKE_SREGS 62
+#endif
+#if defined(KVM_CAP_SPAPR_TCE) || (defined(HAVE_DECL_KVM_CAP_SPAPR_TCE) && HAVE_DECL_KVM_CAP_SPAPR_TCE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SPAPR_TCE) == (63), "KVM_CAP_SPAPR_TCE != 63");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SPAPR_TCE 63
+#endif
+#if defined(KVM_CAP_PPC_SMT) || (defined(HAVE_DECL_KVM_CAP_PPC_SMT) && HAVE_DECL_KVM_CAP_PPC_SMT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_SMT) == (64), "KVM_CAP_PPC_SMT != 64");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_SMT 64
+#endif
+#if defined(KVM_CAP_PPC_RMA) || (defined(HAVE_DECL_KVM_CAP_PPC_RMA) && HAVE_DECL_KVM_CAP_PPC_RMA)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_RMA) == (65), "KVM_CAP_PPC_RMA != 65");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_RMA 65
+#endif
+#if defined(KVM_CAP_MAX_VCPUS) || (defined(HAVE_DECL_KVM_CAP_MAX_VCPUS) && HAVE_DECL_KVM_CAP_MAX_VCPUS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MAX_VCPUS) == (66), "KVM_CAP_MAX_VCPUS != 66");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MAX_VCPUS 66
+#endif
+#if defined(KVM_CAP_PPC_HIOR) || (defined(HAVE_DECL_KVM_CAP_PPC_HIOR) && HAVE_DECL_KVM_CAP_PPC_HIOR)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_HIOR) == (67), "KVM_CAP_PPC_HIOR != 67");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_HIOR 67
+#endif
+#if defined(KVM_CAP_PPC_PAPR) || (defined(HAVE_DECL_KVM_CAP_PPC_PAPR) && HAVE_DECL_KVM_CAP_PPC_PAPR)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_PAPR) == (68), "KVM_CAP_PPC_PAPR != 68");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_PAPR 68
+#endif
+#if defined(KVM_CAP_SW_TLB) || (defined(HAVE_DECL_KVM_CAP_SW_TLB) && HAVE_DECL_KVM_CAP_SW_TLB)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SW_TLB) == (69), "KVM_CAP_SW_TLB != 69");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SW_TLB 69
+#endif
+#if defined(KVM_CAP_ONE_REG) || (defined(HAVE_DECL_KVM_CAP_ONE_REG) && HAVE_DECL_KVM_CAP_ONE_REG)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ONE_REG) == (70), "KVM_CAP_ONE_REG != 70");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ONE_REG 70
+#endif
+#if defined(KVM_CAP_S390_GMAP) || (defined(HAVE_DECL_KVM_CAP_S390_GMAP) && HAVE_DECL_KVM_CAP_S390_GMAP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_GMAP) == (71), "KVM_CAP_S390_GMAP != 71");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_GMAP 71
+#endif
+#if defined(KVM_CAP_TSC_DEADLINE_TIMER) || (defined(HAVE_DECL_KVM_CAP_TSC_DEADLINE_TIMER) && HAVE_DECL_KVM_CAP_TSC_DEADLINE_TIMER)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_TSC_DEADLINE_TIMER) == (72), "KVM_CAP_TSC_DEADLINE_TIMER != 72");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_TSC_DEADLINE_TIMER 72
+#endif
+#if defined(KVM_CAP_S390_UCONTROL) || (defined(HAVE_DECL_KVM_CAP_S390_UCONTROL) && HAVE_DECL_KVM_CAP_S390_UCONTROL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_UCONTROL) == (73), "KVM_CAP_S390_UCONTROL != 73");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_UCONTROL 73
+#endif
+#if defined(KVM_CAP_SYNC_REGS) || (defined(HAVE_DECL_KVM_CAP_SYNC_REGS) && HAVE_DECL_KVM_CAP_SYNC_REGS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SYNC_REGS) == (74), "KVM_CAP_SYNC_REGS != 74");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SYNC_REGS 74
+#endif
+#if defined(KVM_CAP_PCI_2_3) || (defined(HAVE_DECL_KVM_CAP_PCI_2_3) && HAVE_DECL_KVM_CAP_PCI_2_3)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PCI_2_3) == (75), "KVM_CAP_PCI_2_3 != 75");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PCI_2_3 75
+#endif
+#if defined(KVM_CAP_KVMCLOCK_CTRL) || (defined(HAVE_DECL_KVM_CAP_KVMCLOCK_CTRL) && HAVE_DECL_KVM_CAP_KVMCLOCK_CTRL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_KVMCLOCK_CTRL) == (76), "KVM_CAP_KVMCLOCK_CTRL != 76");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_KVMCLOCK_CTRL 76
+#endif
+#if defined(KVM_CAP_SIGNAL_MSI) || (defined(HAVE_DECL_KVM_CAP_SIGNAL_MSI) && HAVE_DECL_KVM_CAP_SIGNAL_MSI)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SIGNAL_MSI) == (77), "KVM_CAP_SIGNAL_MSI != 77");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SIGNAL_MSI 77
+#endif
+#if defined(KVM_CAP_PPC_GET_SMMU_INFO) || (defined(HAVE_DECL_KVM_CAP_PPC_GET_SMMU_INFO) && HAVE_DECL_KVM_CAP_PPC_GET_SMMU_INFO)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_GET_SMMU_INFO) == (78), "KVM_CAP_PPC_GET_SMMU_INFO != 78");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_GET_SMMU_INFO 78
+#endif
+#if defined(KVM_CAP_S390_COW) || (defined(HAVE_DECL_KVM_CAP_S390_COW) && HAVE_DECL_KVM_CAP_S390_COW)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_COW) == (79), "KVM_CAP_S390_COW != 79");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_COW 79
+#endif
+#if defined(KVM_CAP_PPC_ALLOC_HTAB) || (defined(HAVE_DECL_KVM_CAP_PPC_ALLOC_HTAB) && HAVE_DECL_KVM_CAP_PPC_ALLOC_HTAB)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_ALLOC_HTAB) == (80), "KVM_CAP_PPC_ALLOC_HTAB != 80");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_ALLOC_HTAB 80
+#endif
+#if defined(KVM_CAP_READONLY_MEM) || (defined(HAVE_DECL_KVM_CAP_READONLY_MEM) && HAVE_DECL_KVM_CAP_READONLY_MEM)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_READONLY_MEM) == (81), "KVM_CAP_READONLY_MEM != 81");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_READONLY_MEM 81
+#endif
+#if defined(KVM_CAP_IRQFD_RESAMPLE) || (defined(HAVE_DECL_KVM_CAP_IRQFD_RESAMPLE) && HAVE_DECL_KVM_CAP_IRQFD_RESAMPLE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IRQFD_RESAMPLE) == (82), "KVM_CAP_IRQFD_RESAMPLE != 82");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IRQFD_RESAMPLE 82
+#endif
+#if defined(KVM_CAP_PPC_BOOKE_WATCHDOG) || (defined(HAVE_DECL_KVM_CAP_PPC_BOOKE_WATCHDOG) && HAVE_DECL_KVM_CAP_PPC_BOOKE_WATCHDOG)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_BOOKE_WATCHDOG) == (83), "KVM_CAP_PPC_BOOKE_WATCHDOG != 83");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_BOOKE_WATCHDOG 83
+#endif
+#if defined(KVM_CAP_PPC_HTAB_FD) || (defined(HAVE_DECL_KVM_CAP_PPC_HTAB_FD) && HAVE_DECL_KVM_CAP_PPC_HTAB_FD)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_HTAB_FD) == (84), "KVM_CAP_PPC_HTAB_FD != 84");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_HTAB_FD 84
+#endif
+#if defined(KVM_CAP_S390_CSS_SUPPORT) || (defined(HAVE_DECL_KVM_CAP_S390_CSS_SUPPORT) && HAVE_DECL_KVM_CAP_S390_CSS_SUPPORT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_CSS_SUPPORT) == (85), "KVM_CAP_S390_CSS_SUPPORT != 85");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_CSS_SUPPORT 85
+#endif
+#if defined(KVM_CAP_PPC_EPR) || (defined(HAVE_DECL_KVM_CAP_PPC_EPR) && HAVE_DECL_KVM_CAP_PPC_EPR)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_EPR) == (86), "KVM_CAP_PPC_EPR != 86");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_EPR 86
+#endif
+#if defined(KVM_CAP_ARM_PSCI) || (defined(HAVE_DECL_KVM_CAP_ARM_PSCI) && HAVE_DECL_KVM_CAP_ARM_PSCI)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ARM_PSCI) == (87), "KVM_CAP_ARM_PSCI != 87");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ARM_PSCI 87
+#endif
+#if defined(KVM_CAP_ARM_SET_DEVICE_ADDR) || (defined(HAVE_DECL_KVM_CAP_ARM_SET_DEVICE_ADDR) && HAVE_DECL_KVM_CAP_ARM_SET_DEVICE_ADDR)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ARM_SET_DEVICE_ADDR) == (88), "KVM_CAP_ARM_SET_DEVICE_ADDR != 88");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ARM_SET_DEVICE_ADDR 88
+#endif
+#if defined(KVM_CAP_DEVICE_CTRL) || (defined(HAVE_DECL_KVM_CAP_DEVICE_CTRL) && HAVE_DECL_KVM_CAP_DEVICE_CTRL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_DEVICE_CTRL) == (89), "KVM_CAP_DEVICE_CTRL != 89");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_DEVICE_CTRL 89
+#endif
+#if defined(KVM_CAP_IRQ_MPIC) || (defined(HAVE_DECL_KVM_CAP_IRQ_MPIC) && HAVE_DECL_KVM_CAP_IRQ_MPIC)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IRQ_MPIC) == (90), "KVM_CAP_IRQ_MPIC != 90");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IRQ_MPIC 90
+#endif
+#if defined(KVM_CAP_PPC_RTAS) || (defined(HAVE_DECL_KVM_CAP_PPC_RTAS) && HAVE_DECL_KVM_CAP_PPC_RTAS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_RTAS) == (91), "KVM_CAP_PPC_RTAS != 91");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_RTAS 91
+#endif
+#if defined(KVM_CAP_IRQ_XICS) || (defined(HAVE_DECL_KVM_CAP_IRQ_XICS) && HAVE_DECL_KVM_CAP_IRQ_XICS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IRQ_XICS) == (92), "KVM_CAP_IRQ_XICS != 92");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IRQ_XICS 92
+#endif
+#if defined(KVM_CAP_ARM_EL1_32BIT) || (defined(HAVE_DECL_KVM_CAP_ARM_EL1_32BIT) && HAVE_DECL_KVM_CAP_ARM_EL1_32BIT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ARM_EL1_32BIT) == (93), "KVM_CAP_ARM_EL1_32BIT != 93");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ARM_EL1_32BIT 93
+#endif
+#if defined(KVM_CAP_SPAPR_MULTITCE) || (defined(HAVE_DECL_KVM_CAP_SPAPR_MULTITCE) && HAVE_DECL_KVM_CAP_SPAPR_MULTITCE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SPAPR_MULTITCE) == (94), "KVM_CAP_SPAPR_MULTITCE != 94");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SPAPR_MULTITCE 94
+#endif
+#if defined(KVM_CAP_EXT_EMUL_CPUID) || (defined(HAVE_DECL_KVM_CAP_EXT_EMUL_CPUID) && HAVE_DECL_KVM_CAP_EXT_EMUL_CPUID)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_EXT_EMUL_CPUID) == (95), "KVM_CAP_EXT_EMUL_CPUID != 95");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_EXT_EMUL_CPUID 95
+#endif
+#if defined(KVM_CAP_HYPERV_TIME) || (defined(HAVE_DECL_KVM_CAP_HYPERV_TIME) && HAVE_DECL_KVM_CAP_HYPERV_TIME)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_HYPERV_TIME) == (96), "KVM_CAP_HYPERV_TIME != 96");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_HYPERV_TIME 96
+#endif
+#if defined(KVM_CAP_IOAPIC_POLARITY_IGNORED) || (defined(HAVE_DECL_KVM_CAP_IOAPIC_POLARITY_IGNORED) && HAVE_DECL_KVM_CAP_IOAPIC_POLARITY_IGNORED)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IOAPIC_POLARITY_IGNORED) == (97), "KVM_CAP_IOAPIC_POLARITY_IGNORED != 97");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IOAPIC_POLARITY_IGNORED 97
+#endif
+#if defined(KVM_CAP_ENABLE_CAP_VM) || (defined(HAVE_DECL_KVM_CAP_ENABLE_CAP_VM) && HAVE_DECL_KVM_CAP_ENABLE_CAP_VM)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ENABLE_CAP_VM) == (98), "KVM_CAP_ENABLE_CAP_VM != 98");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ENABLE_CAP_VM 98
+#endif
+#if defined(KVM_CAP_S390_IRQCHIP) || (defined(HAVE_DECL_KVM_CAP_S390_IRQCHIP) && HAVE_DECL_KVM_CAP_S390_IRQCHIP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_IRQCHIP) == (99), "KVM_CAP_S390_IRQCHIP != 99");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_IRQCHIP 99
+#endif
+#if defined(KVM_CAP_IOEVENTFD_NO_LENGTH) || (defined(HAVE_DECL_KVM_CAP_IOEVENTFD_NO_LENGTH) && HAVE_DECL_KVM_CAP_IOEVENTFD_NO_LENGTH)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IOEVENTFD_NO_LENGTH) == (100), "KVM_CAP_IOEVENTFD_NO_LENGTH != 100");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IOEVENTFD_NO_LENGTH 100
+#endif
+#if defined(KVM_CAP_VM_ATTRIBUTES) || (defined(HAVE_DECL_KVM_CAP_VM_ATTRIBUTES) && HAVE_DECL_KVM_CAP_VM_ATTRIBUTES)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_VM_ATTRIBUTES) == (101), "KVM_CAP_VM_ATTRIBUTES != 101");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_VM_ATTRIBUTES 101
+#endif
+#if defined(KVM_CAP_ARM_PSCI_0_2) || (defined(HAVE_DECL_KVM_CAP_ARM_PSCI_0_2) && HAVE_DECL_KVM_CAP_ARM_PSCI_0_2)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ARM_PSCI_0_2) == (102), "KVM_CAP_ARM_PSCI_0_2 != 102");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ARM_PSCI_0_2 102
+#endif
+#if defined(KVM_CAP_PPC_FIXUP_HCALL) || (defined(HAVE_DECL_KVM_CAP_PPC_FIXUP_HCALL) && HAVE_DECL_KVM_CAP_PPC_FIXUP_HCALL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_FIXUP_HCALL) == (103), "KVM_CAP_PPC_FIXUP_HCALL != 103");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_FIXUP_HCALL 103
+#endif
+#if defined(KVM_CAP_PPC_ENABLE_HCALL) || (defined(HAVE_DECL_KVM_CAP_PPC_ENABLE_HCALL) && HAVE_DECL_KVM_CAP_PPC_ENABLE_HCALL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_ENABLE_HCALL) == (104), "KVM_CAP_PPC_ENABLE_HCALL != 104");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_ENABLE_HCALL 104
+#endif
+#if defined(KVM_CAP_CHECK_EXTENSION_VM) || (defined(HAVE_DECL_KVM_CAP_CHECK_EXTENSION_VM) && HAVE_DECL_KVM_CAP_CHECK_EXTENSION_VM)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_CHECK_EXTENSION_VM) == (105), "KVM_CAP_CHECK_EXTENSION_VM != 105");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_CHECK_EXTENSION_VM 105
+#endif
+#if defined(KVM_CAP_S390_USER_SIGP) || (defined(HAVE_DECL_KVM_CAP_S390_USER_SIGP) && HAVE_DECL_KVM_CAP_S390_USER_SIGP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_USER_SIGP) == (106), "KVM_CAP_S390_USER_SIGP != 106");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_USER_SIGP 106
+#endif
+#if defined(KVM_CAP_S390_VECTOR_REGISTERS) || (defined(HAVE_DECL_KVM_CAP_S390_VECTOR_REGISTERS) && HAVE_DECL_KVM_CAP_S390_VECTOR_REGISTERS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_VECTOR_REGISTERS) == (107), "KVM_CAP_S390_VECTOR_REGISTERS != 107");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_VECTOR_REGISTERS 107
+#endif
+#if defined(KVM_CAP_S390_MEM_OP) || (defined(HAVE_DECL_KVM_CAP_S390_MEM_OP) && HAVE_DECL_KVM_CAP_S390_MEM_OP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_MEM_OP) == (108), "KVM_CAP_S390_MEM_OP != 108");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_MEM_OP 108
+#endif
+#if defined(KVM_CAP_S390_USER_STSI) || (defined(HAVE_DECL_KVM_CAP_S390_USER_STSI) && HAVE_DECL_KVM_CAP_S390_USER_STSI)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_USER_STSI) == (109), "KVM_CAP_S390_USER_STSI != 109");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_USER_STSI 109
+#endif
+#if defined(KVM_CAP_S390_SKEYS) || (defined(HAVE_DECL_KVM_CAP_S390_SKEYS) && HAVE_DECL_KVM_CAP_S390_SKEYS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_SKEYS) == (110), "KVM_CAP_S390_SKEYS != 110");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_SKEYS 110
+#endif
+#if defined(KVM_CAP_MIPS_FPU) || (defined(HAVE_DECL_KVM_CAP_MIPS_FPU) && HAVE_DECL_KVM_CAP_MIPS_FPU)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MIPS_FPU) == (111), "KVM_CAP_MIPS_FPU != 111");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MIPS_FPU 111
+#endif
+#if defined(KVM_CAP_MIPS_MSA) || (defined(HAVE_DECL_KVM_CAP_MIPS_MSA) && HAVE_DECL_KVM_CAP_MIPS_MSA)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MIPS_MSA) == (112), "KVM_CAP_MIPS_MSA != 112");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MIPS_MSA 112
+#endif
+#if defined(KVM_CAP_S390_INJECT_IRQ) || (defined(HAVE_DECL_KVM_CAP_S390_INJECT_IRQ) && HAVE_DECL_KVM_CAP_S390_INJECT_IRQ)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_INJECT_IRQ) == (113), "KVM_CAP_S390_INJECT_IRQ != 113");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_INJECT_IRQ 113
+#endif
+#if defined(KVM_CAP_S390_IRQ_STATE) || (defined(HAVE_DECL_KVM_CAP_S390_IRQ_STATE) && HAVE_DECL_KVM_CAP_S390_IRQ_STATE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_IRQ_STATE) == (114), "KVM_CAP_S390_IRQ_STATE != 114");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_IRQ_STATE 114
+#endif
+#if defined(KVM_CAP_PPC_HWRNG) || (defined(HAVE_DECL_KVM_CAP_PPC_HWRNG) && HAVE_DECL_KVM_CAP_PPC_HWRNG)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_HWRNG) == (115), "KVM_CAP_PPC_HWRNG != 115");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_HWRNG 115
+#endif
+#if defined(KVM_CAP_DISABLE_QUIRKS) || (defined(HAVE_DECL_KVM_CAP_DISABLE_QUIRKS) && HAVE_DECL_KVM_CAP_DISABLE_QUIRKS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_DISABLE_QUIRKS) == (116), "KVM_CAP_DISABLE_QUIRKS != 116");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_DISABLE_QUIRKS 116
+#endif
+#if defined(KVM_CAP_X86_SMM) || (defined(HAVE_DECL_KVM_CAP_X86_SMM) && HAVE_DECL_KVM_CAP_X86_SMM)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_X86_SMM) == (117), "KVM_CAP_X86_SMM != 117");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_X86_SMM 117
+#endif
+#if defined(KVM_CAP_MULTI_ADDRESS_SPACE) || (defined(HAVE_DECL_KVM_CAP_MULTI_ADDRESS_SPACE) && HAVE_DECL_KVM_CAP_MULTI_ADDRESS_SPACE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MULTI_ADDRESS_SPACE) == (118), "KVM_CAP_MULTI_ADDRESS_SPACE != 118");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MULTI_ADDRESS_SPACE 118
+#endif
+#if defined(KVM_CAP_GUEST_DEBUG_HW_BPS) || (defined(HAVE_DECL_KVM_CAP_GUEST_DEBUG_HW_BPS) && HAVE_DECL_KVM_CAP_GUEST_DEBUG_HW_BPS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_GUEST_DEBUG_HW_BPS) == (119), "KVM_CAP_GUEST_DEBUG_HW_BPS != 119");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_GUEST_DEBUG_HW_BPS 119
+#endif
+#if defined(KVM_CAP_GUEST_DEBUG_HW_WPS) || (defined(HAVE_DECL_KVM_CAP_GUEST_DEBUG_HW_WPS) && HAVE_DECL_KVM_CAP_GUEST_DEBUG_HW_WPS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_GUEST_DEBUG_HW_WPS) == (120), "KVM_CAP_GUEST_DEBUG_HW_WPS != 120");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_GUEST_DEBUG_HW_WPS 120
+#endif
+#if defined(KVM_CAP_SPLIT_IRQCHIP) || (defined(HAVE_DECL_KVM_CAP_SPLIT_IRQCHIP) && HAVE_DECL_KVM_CAP_SPLIT_IRQCHIP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SPLIT_IRQCHIP) == (121), "KVM_CAP_SPLIT_IRQCHIP != 121");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SPLIT_IRQCHIP 121
+#endif
+#if defined(KVM_CAP_IOEVENTFD_ANY_LENGTH) || (defined(HAVE_DECL_KVM_CAP_IOEVENTFD_ANY_LENGTH) && HAVE_DECL_KVM_CAP_IOEVENTFD_ANY_LENGTH)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IOEVENTFD_ANY_LENGTH) == (122), "KVM_CAP_IOEVENTFD_ANY_LENGTH != 122");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IOEVENTFD_ANY_LENGTH 122
+#endif
+#if defined(KVM_CAP_HYPERV_SYNIC) || (defined(HAVE_DECL_KVM_CAP_HYPERV_SYNIC) && HAVE_DECL_KVM_CAP_HYPERV_SYNIC)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_HYPERV_SYNIC) == (123), "KVM_CAP_HYPERV_SYNIC != 123");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_HYPERV_SYNIC 123
+#endif
+#if defined(KVM_CAP_S390_RI) || (defined(HAVE_DECL_KVM_CAP_S390_RI) && HAVE_DECL_KVM_CAP_S390_RI)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_RI) == (124), "KVM_CAP_S390_RI != 124");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_RI 124
+#endif
+#if defined(KVM_CAP_SPAPR_TCE_64) || (defined(HAVE_DECL_KVM_CAP_SPAPR_TCE_64) && HAVE_DECL_KVM_CAP_SPAPR_TCE_64)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SPAPR_TCE_64) == (125), "KVM_CAP_SPAPR_TCE_64 != 125");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SPAPR_TCE_64 125
+#endif
+#if defined(KVM_CAP_ARM_PMU_V3) || (defined(HAVE_DECL_KVM_CAP_ARM_PMU_V3) && HAVE_DECL_KVM_CAP_ARM_PMU_V3)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ARM_PMU_V3) == (126), "KVM_CAP_ARM_PMU_V3 != 126");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ARM_PMU_V3 126
+#endif
+#if defined(KVM_CAP_VCPU_ATTRIBUTES) || (defined(HAVE_DECL_KVM_CAP_VCPU_ATTRIBUTES) && HAVE_DECL_KVM_CAP_VCPU_ATTRIBUTES)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_VCPU_ATTRIBUTES) == (127), "KVM_CAP_VCPU_ATTRIBUTES != 127");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_VCPU_ATTRIBUTES 127
+#endif
+#if defined(KVM_CAP_MAX_VCPU_ID) || (defined(HAVE_DECL_KVM_CAP_MAX_VCPU_ID) && HAVE_DECL_KVM_CAP_MAX_VCPU_ID)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MAX_VCPU_ID) == (128), "KVM_CAP_MAX_VCPU_ID != 128");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MAX_VCPU_ID 128
+#endif
+#if defined(KVM_CAP_X2APIC_API) || (defined(HAVE_DECL_KVM_CAP_X2APIC_API) && HAVE_DECL_KVM_CAP_X2APIC_API)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_X2APIC_API) == (129), "KVM_CAP_X2APIC_API != 129");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_X2APIC_API 129
+#endif
+#if defined(KVM_CAP_S390_USER_INSTR0) || (defined(HAVE_DECL_KVM_CAP_S390_USER_INSTR0) && HAVE_DECL_KVM_CAP_S390_USER_INSTR0)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_USER_INSTR0) == (130), "KVM_CAP_S390_USER_INSTR0 != 130");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_USER_INSTR0 130
+#endif
+#if defined(KVM_CAP_MSI_DEVID) || (defined(HAVE_DECL_KVM_CAP_MSI_DEVID) && HAVE_DECL_KVM_CAP_MSI_DEVID)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MSI_DEVID) == (131), "KVM_CAP_MSI_DEVID != 131");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MSI_DEVID 131
+#endif
+#if defined(KVM_CAP_PPC_HTM) || (defined(HAVE_DECL_KVM_CAP_PPC_HTM) && HAVE_DECL_KVM_CAP_PPC_HTM)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_HTM) == (132), "KVM_CAP_PPC_HTM != 132");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_HTM 132
+#endif
+#if defined(KVM_CAP_SPAPR_RESIZE_HPT) || (defined(HAVE_DECL_KVM_CAP_SPAPR_RESIZE_HPT) && HAVE_DECL_KVM_CAP_SPAPR_RESIZE_HPT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SPAPR_RESIZE_HPT) == (133), "KVM_CAP_SPAPR_RESIZE_HPT != 133");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SPAPR_RESIZE_HPT 133
+#endif
+#if defined(KVM_CAP_PPC_MMU_RADIX) || (defined(HAVE_DECL_KVM_CAP_PPC_MMU_RADIX) && HAVE_DECL_KVM_CAP_PPC_MMU_RADIX)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_MMU_RADIX) == (134), "KVM_CAP_PPC_MMU_RADIX != 134");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_MMU_RADIX 134
+#endif
+#if defined(KVM_CAP_PPC_MMU_HASH_V3) || (defined(HAVE_DECL_KVM_CAP_PPC_MMU_HASH_V3) && HAVE_DECL_KVM_CAP_PPC_MMU_HASH_V3)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_MMU_HASH_V3) == (135), "KVM_CAP_PPC_MMU_HASH_V3 != 135");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_MMU_HASH_V3 135
+#endif
+#if defined(KVM_CAP_IMMEDIATE_EXIT) || (defined(HAVE_DECL_KVM_CAP_IMMEDIATE_EXIT) && HAVE_DECL_KVM_CAP_IMMEDIATE_EXIT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_IMMEDIATE_EXIT) == (136), "KVM_CAP_IMMEDIATE_EXIT != 136");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_IMMEDIATE_EXIT 136
+#endif
+#if defined(KVM_CAP_MIPS_VZ) || (defined(HAVE_DECL_KVM_CAP_MIPS_VZ) && HAVE_DECL_KVM_CAP_MIPS_VZ)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MIPS_VZ) == (137), "KVM_CAP_MIPS_VZ != 137");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MIPS_VZ 137
+#endif
+#if defined(KVM_CAP_MIPS_TE) || (defined(HAVE_DECL_KVM_CAP_MIPS_TE) && HAVE_DECL_KVM_CAP_MIPS_TE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MIPS_TE) == (138), "KVM_CAP_MIPS_TE != 138");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MIPS_TE 138
+#endif
+#if defined(KVM_CAP_MIPS_64BIT) || (defined(HAVE_DECL_KVM_CAP_MIPS_64BIT) && HAVE_DECL_KVM_CAP_MIPS_64BIT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MIPS_64BIT) == (139), "KVM_CAP_MIPS_64BIT != 139");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MIPS_64BIT 139
+#endif
+#if defined(KVM_CAP_S390_GS) || (defined(HAVE_DECL_KVM_CAP_S390_GS) && HAVE_DECL_KVM_CAP_S390_GS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_GS) == (140), "KVM_CAP_S390_GS != 140");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_GS 140
+#endif
+#if defined(KVM_CAP_S390_AIS) || (defined(HAVE_DECL_KVM_CAP_S390_AIS) && HAVE_DECL_KVM_CAP_S390_AIS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_AIS) == (141), "KVM_CAP_S390_AIS != 141");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_AIS 141
+#endif
+#if defined(KVM_CAP_SPAPR_TCE_VFIO) || (defined(HAVE_DECL_KVM_CAP_SPAPR_TCE_VFIO) && HAVE_DECL_KVM_CAP_SPAPR_TCE_VFIO)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_SPAPR_TCE_VFIO) == (142), "KVM_CAP_SPAPR_TCE_VFIO != 142");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_SPAPR_TCE_VFIO 142
+#endif
+#if defined(KVM_CAP_X86_DISABLE_EXITS) || (defined(HAVE_DECL_KVM_CAP_X86_DISABLE_EXITS) && HAVE_DECL_KVM_CAP_X86_DISABLE_EXITS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_X86_DISABLE_EXITS) == (143), "KVM_CAP_X86_DISABLE_EXITS != 143");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_X86_DISABLE_EXITS 143
+#endif
+#if defined(KVM_CAP_ARM_USER_IRQ) || (defined(HAVE_DECL_KVM_CAP_ARM_USER_IRQ) && HAVE_DECL_KVM_CAP_ARM_USER_IRQ)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ARM_USER_IRQ) == (144), "KVM_CAP_ARM_USER_IRQ != 144");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ARM_USER_IRQ 144
+#endif
+#if defined(KVM_CAP_S390_CMMA_MIGRATION) || (defined(HAVE_DECL_KVM_CAP_S390_CMMA_MIGRATION) && HAVE_DECL_KVM_CAP_S390_CMMA_MIGRATION)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_CMMA_MIGRATION) == (145), "KVM_CAP_S390_CMMA_MIGRATION != 145");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_CMMA_MIGRATION 145
+#endif
+#if defined(KVM_CAP_PPC_FWNMI) || (defined(HAVE_DECL_KVM_CAP_PPC_FWNMI) && HAVE_DECL_KVM_CAP_PPC_FWNMI)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_FWNMI) == (146), "KVM_CAP_PPC_FWNMI != 146");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_FWNMI 146
+#endif
+#if defined(KVM_CAP_PPC_SMT_POSSIBLE) || (defined(HAVE_DECL_KVM_CAP_PPC_SMT_POSSIBLE) && HAVE_DECL_KVM_CAP_PPC_SMT_POSSIBLE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_SMT_POSSIBLE) == (147), "KVM_CAP_PPC_SMT_POSSIBLE != 147");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_SMT_POSSIBLE 147
+#endif
+#if defined(KVM_CAP_HYPERV_SYNIC2) || (defined(HAVE_DECL_KVM_CAP_HYPERV_SYNIC2) && HAVE_DECL_KVM_CAP_HYPERV_SYNIC2)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_HYPERV_SYNIC2) == (148), "KVM_CAP_HYPERV_SYNIC2 != 148");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_HYPERV_SYNIC2 148
+#endif
+#if defined(KVM_CAP_HYPERV_VP_INDEX) || (defined(HAVE_DECL_KVM_CAP_HYPERV_VP_INDEX) && HAVE_DECL_KVM_CAP_HYPERV_VP_INDEX)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_HYPERV_VP_INDEX) == (149), "KVM_CAP_HYPERV_VP_INDEX != 149");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_HYPERV_VP_INDEX 149
+#endif
+#if defined(KVM_CAP_S390_AIS_MIGRATION) || (defined(HAVE_DECL_KVM_CAP_S390_AIS_MIGRATION) && HAVE_DECL_KVM_CAP_S390_AIS_MIGRATION)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_AIS_MIGRATION) == (150), "KVM_CAP_S390_AIS_MIGRATION != 150");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_AIS_MIGRATION 150
+#endif
+#if defined(KVM_CAP_PPC_GET_CPU_CHAR) || (defined(HAVE_DECL_KVM_CAP_PPC_GET_CPU_CHAR) && HAVE_DECL_KVM_CAP_PPC_GET_CPU_CHAR)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_GET_CPU_CHAR) == (151), "KVM_CAP_PPC_GET_CPU_CHAR != 151");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_GET_CPU_CHAR 151
+#endif
+#if defined(KVM_CAP_S390_BPB) || (defined(HAVE_DECL_KVM_CAP_S390_BPB) && HAVE_DECL_KVM_CAP_S390_BPB)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_BPB) == (152), "KVM_CAP_S390_BPB != 152");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_BPB 152
+#endif
+#if defined(KVM_CAP_GET_MSR_FEATURES) || (defined(HAVE_DECL_KVM_CAP_GET_MSR_FEATURES) && HAVE_DECL_KVM_CAP_GET_MSR_FEATURES)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_GET_MSR_FEATURES) == (153), "KVM_CAP_GET_MSR_FEATURES != 153");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_GET_MSR_FEATURES 153
+#endif
+#if defined(KVM_CAP_HYPERV_EVENTFD) || (defined(HAVE_DECL_KVM_CAP_HYPERV_EVENTFD) && HAVE_DECL_KVM_CAP_HYPERV_EVENTFD)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_HYPERV_EVENTFD) == (154), "KVM_CAP_HYPERV_EVENTFD != 154");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_HYPERV_EVENTFD 154
+#endif
+#if defined(KVM_CAP_HYPERV_TLBFLUSH) || (defined(HAVE_DECL_KVM_CAP_HYPERV_TLBFLUSH) && HAVE_DECL_KVM_CAP_HYPERV_TLBFLUSH)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_HYPERV_TLBFLUSH) == (155), "KVM_CAP_HYPERV_TLBFLUSH != 155");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_HYPERV_TLBFLUSH 155
+#endif
+#if defined(KVM_CAP_S390_HPAGE_1M) || (defined(HAVE_DECL_KVM_CAP_S390_HPAGE_1M) && HAVE_DECL_KVM_CAP_S390_HPAGE_1M)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_S390_HPAGE_1M) == (156), "KVM_CAP_S390_HPAGE_1M != 156");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_S390_HPAGE_1M 156
+#endif
+#if defined(KVM_CAP_NESTED_STATE) || (defined(HAVE_DECL_KVM_CAP_NESTED_STATE) && HAVE_DECL_KVM_CAP_NESTED_STATE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_NESTED_STATE) == (157), "KVM_CAP_NESTED_STATE != 157");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_NESTED_STATE 157
+#endif
+#if defined(KVM_CAP_ARM_INJECT_SERROR_ESR) || (defined(HAVE_DECL_KVM_CAP_ARM_INJECT_SERROR_ESR) && HAVE_DECL_KVM_CAP_ARM_INJECT_SERROR_ESR)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ARM_INJECT_SERROR_ESR) == (158), "KVM_CAP_ARM_INJECT_SERROR_ESR != 158");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ARM_INJECT_SERROR_ESR 158
+#endif
+#if defined(KVM_CAP_MSR_PLATFORM_INFO) || (defined(HAVE_DECL_KVM_CAP_MSR_PLATFORM_INFO) && HAVE_DECL_KVM_CAP_MSR_PLATFORM_INFO)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_MSR_PLATFORM_INFO) == (159), "KVM_CAP_MSR_PLATFORM_INFO != 159");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_MSR_PLATFORM_INFO 159
+#endif
+#if defined(KVM_CAP_PPC_NESTED_HV) || (defined(HAVE_DECL_KVM_CAP_PPC_NESTED_HV) && HAVE_DECL_KVM_CAP_PPC_NESTED_HV)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_PPC_NESTED_HV) == (160), "KVM_CAP_PPC_NESTED_HV != 160");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_PPC_NESTED_HV 160
+#endif
+#if defined(KVM_CAP_HYPERV_SEND_IPI) || (defined(HAVE_DECL_KVM_CAP_HYPERV_SEND_IPI) && HAVE_DECL_KVM_CAP_HYPERV_SEND_IPI)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_HYPERV_SEND_IPI) == (161), "KVM_CAP_HYPERV_SEND_IPI != 161");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_HYPERV_SEND_IPI 161
+#endif
+#if defined(KVM_CAP_COALESCED_PIO) || (defined(HAVE_DECL_KVM_CAP_COALESCED_PIO) && HAVE_DECL_KVM_CAP_COALESCED_PIO)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_COALESCED_PIO) == (162), "KVM_CAP_COALESCED_PIO != 162");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_COALESCED_PIO 162
+#endif
+#if defined(KVM_CAP_HYPERV_ENLIGHTENED_VMCS) || (defined(HAVE_DECL_KVM_CAP_HYPERV_ENLIGHTENED_VMCS) && HAVE_DECL_KVM_CAP_HYPERV_ENLIGHTENED_VMCS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_HYPERV_ENLIGHTENED_VMCS) == (163), "KVM_CAP_HYPERV_ENLIGHTENED_VMCS != 163");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_HYPERV_ENLIGHTENED_VMCS 163
+#endif
+#if defined(KVM_CAP_EXCEPTION_PAYLOAD) || (defined(HAVE_DECL_KVM_CAP_EXCEPTION_PAYLOAD) && HAVE_DECL_KVM_CAP_EXCEPTION_PAYLOAD)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_EXCEPTION_PAYLOAD) == (164), "KVM_CAP_EXCEPTION_PAYLOAD != 164");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_EXCEPTION_PAYLOAD 164
+#endif
+#if defined(KVM_CAP_ARM_VM_IPA_SIZE) || (defined(HAVE_DECL_KVM_CAP_ARM_VM_IPA_SIZE) && HAVE_DECL_KVM_CAP_ARM_VM_IPA_SIZE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((KVM_CAP_ARM_VM_IPA_SIZE) == (165), "KVM_CAP_ARM_VM_IPA_SIZE != 165");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define KVM_CAP_ARM_VM_IPA_SIZE 165
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat kvm_cap in mpers mode
+
+# else
+
+static
+const struct xlat kvm_cap[] = {
+ [KVM_CAP_IRQCHIP] = XLAT(KVM_CAP_IRQCHIP),
+ [KVM_CAP_HLT] = XLAT(KVM_CAP_HLT),
+ [KVM_CAP_MMU_SHADOW_CACHE_CONTROL] = XLAT(KVM_CAP_MMU_SHADOW_CACHE_CONTROL),
+ [KVM_CAP_USER_MEMORY] = XLAT(KVM_CAP_USER_MEMORY),
+ [KVM_CAP_SET_TSS_ADDR] = XLAT(KVM_CAP_SET_TSS_ADDR),
+ [KVM_CAP_VAPIC] = XLAT(KVM_CAP_VAPIC),
+ [KVM_CAP_EXT_CPUID] = XLAT(KVM_CAP_EXT_CPUID),
+ [KVM_CAP_CLOCKSOURCE] = XLAT(KVM_CAP_CLOCKSOURCE),
+ [KVM_CAP_NR_VCPUS] = XLAT(KVM_CAP_NR_VCPUS),
+ [KVM_CAP_NR_MEMSLOTS] = XLAT(KVM_CAP_NR_MEMSLOTS),
+ [KVM_CAP_PIT] = XLAT(KVM_CAP_PIT),
+ [KVM_CAP_NOP_IO_DELAY] = XLAT(KVM_CAP_NOP_IO_DELAY),
+ [KVM_CAP_PV_MMU] = XLAT(KVM_CAP_PV_MMU),
+ [KVM_CAP_MP_STATE] = XLAT(KVM_CAP_MP_STATE),
+ [KVM_CAP_COALESCED_MMIO] = XLAT(KVM_CAP_COALESCED_MMIO),
+ [KVM_CAP_SYNC_MMU] = XLAT(KVM_CAP_SYNC_MMU),
+ [KVM_CAP_IOMMU] = XLAT(KVM_CAP_IOMMU),
+ [KVM_CAP_DESTROY_MEMORY_REGION_WORKS] = XLAT(KVM_CAP_DESTROY_MEMORY_REGION_WORKS),
+ [KVM_CAP_USER_NMI] = XLAT(KVM_CAP_USER_NMI),
+ [KVM_CAP_SET_GUEST_DEBUG] = XLAT(KVM_CAP_SET_GUEST_DEBUG),
+ [KVM_CAP_REINJECT_CONTROL] = XLAT(KVM_CAP_REINJECT_CONTROL),
+ [KVM_CAP_IRQ_ROUTING] = XLAT(KVM_CAP_IRQ_ROUTING),
+ [KVM_CAP_IRQ_INJECT_STATUS] = XLAT(KVM_CAP_IRQ_INJECT_STATUS),
+ [KVM_CAP_ASSIGN_DEV_IRQ] = XLAT(KVM_CAP_ASSIGN_DEV_IRQ),
+ [KVM_CAP_JOIN_MEMORY_REGIONS_WORKS] = XLAT(KVM_CAP_JOIN_MEMORY_REGIONS_WORKS),
+ [KVM_CAP_MCE] = XLAT(KVM_CAP_MCE),
+ [KVM_CAP_IRQFD] = XLAT(KVM_CAP_IRQFD),
+ [KVM_CAP_PIT2] = XLAT(KVM_CAP_PIT2),
+ [KVM_CAP_SET_BOOT_CPU_ID] = XLAT(KVM_CAP_SET_BOOT_CPU_ID),
+ [KVM_CAP_PIT_STATE2] = XLAT(KVM_CAP_PIT_STATE2),
+ [KVM_CAP_IOEVENTFD] = XLAT(KVM_CAP_IOEVENTFD),
+ [KVM_CAP_SET_IDENTITY_MAP_ADDR] = XLAT(KVM_CAP_SET_IDENTITY_MAP_ADDR),
+ [KVM_CAP_XEN_HVM] = XLAT(KVM_CAP_XEN_HVM),
+ [KVM_CAP_ADJUST_CLOCK] = XLAT(KVM_CAP_ADJUST_CLOCK),
+ [KVM_CAP_INTERNAL_ERROR_DATA] = XLAT(KVM_CAP_INTERNAL_ERROR_DATA),
+ [KVM_CAP_VCPU_EVENTS] = XLAT(KVM_CAP_VCPU_EVENTS),
+ [KVM_CAP_S390_PSW] = XLAT(KVM_CAP_S390_PSW),
+ [KVM_CAP_PPC_SEGSTATE] = XLAT(KVM_CAP_PPC_SEGSTATE),
+ [KVM_CAP_HYPERV] = XLAT(KVM_CAP_HYPERV),
+ [KVM_CAP_HYPERV_VAPIC] = XLAT(KVM_CAP_HYPERV_VAPIC),
+ [KVM_CAP_HYPERV_SPIN] = XLAT(KVM_CAP_HYPERV_SPIN),
+ [KVM_CAP_PCI_SEGMENT] = XLAT(KVM_CAP_PCI_SEGMENT),
+ [KVM_CAP_PPC_PAIRED_SINGLES] = XLAT(KVM_CAP_PPC_PAIRED_SINGLES),
+ [KVM_CAP_INTR_SHADOW] = XLAT(KVM_CAP_INTR_SHADOW),
+ [KVM_CAP_DEBUGREGS] = XLAT(KVM_CAP_DEBUGREGS),
+ [KVM_CAP_X86_ROBUST_SINGLESTEP] = XLAT(KVM_CAP_X86_ROBUST_SINGLESTEP),
+ [KVM_CAP_PPC_OSI] = XLAT(KVM_CAP_PPC_OSI),
+ [KVM_CAP_PPC_UNSET_IRQ] = XLAT(KVM_CAP_PPC_UNSET_IRQ),
+ [KVM_CAP_ENABLE_CAP] = XLAT(KVM_CAP_ENABLE_CAP),
+ [KVM_CAP_XSAVE] = XLAT(KVM_CAP_XSAVE),
+ [KVM_CAP_XCRS] = XLAT(KVM_CAP_XCRS),
+ [KVM_CAP_PPC_GET_PVINFO] = XLAT(KVM_CAP_PPC_GET_PVINFO),
+ [KVM_CAP_PPC_IRQ_LEVEL] = XLAT(KVM_CAP_PPC_IRQ_LEVEL),
+ [KVM_CAP_ASYNC_PF] = XLAT(KVM_CAP_ASYNC_PF),
+ [KVM_CAP_TSC_CONTROL] = XLAT(KVM_CAP_TSC_CONTROL),
+ [KVM_CAP_GET_TSC_KHZ] = XLAT(KVM_CAP_GET_TSC_KHZ),
+ [KVM_CAP_PPC_BOOKE_SREGS] = XLAT(KVM_CAP_PPC_BOOKE_SREGS),
+ [KVM_CAP_SPAPR_TCE] = XLAT(KVM_CAP_SPAPR_TCE),
+ [KVM_CAP_PPC_SMT] = XLAT(KVM_CAP_PPC_SMT),
+ [KVM_CAP_PPC_RMA] = XLAT(KVM_CAP_PPC_RMA),
+ [KVM_CAP_MAX_VCPUS] = XLAT(KVM_CAP_MAX_VCPUS),
+ [KVM_CAP_PPC_HIOR] = XLAT(KVM_CAP_PPC_HIOR),
+ [KVM_CAP_PPC_PAPR] = XLAT(KVM_CAP_PPC_PAPR),
+ [KVM_CAP_SW_TLB] = XLAT(KVM_CAP_SW_TLB),
+ [KVM_CAP_ONE_REG] = XLAT(KVM_CAP_ONE_REG),
+ [KVM_CAP_S390_GMAP] = XLAT(KVM_CAP_S390_GMAP),
+ [KVM_CAP_TSC_DEADLINE_TIMER] = XLAT(KVM_CAP_TSC_DEADLINE_TIMER),
+ [KVM_CAP_S390_UCONTROL] = XLAT(KVM_CAP_S390_UCONTROL),
+ [KVM_CAP_SYNC_REGS] = XLAT(KVM_CAP_SYNC_REGS),
+ [KVM_CAP_PCI_2_3] = XLAT(KVM_CAP_PCI_2_3),
+ [KVM_CAP_KVMCLOCK_CTRL] = XLAT(KVM_CAP_KVMCLOCK_CTRL),
+ [KVM_CAP_SIGNAL_MSI] = XLAT(KVM_CAP_SIGNAL_MSI),
+ [KVM_CAP_PPC_GET_SMMU_INFO] = XLAT(KVM_CAP_PPC_GET_SMMU_INFO),
+ [KVM_CAP_S390_COW] = XLAT(KVM_CAP_S390_COW),
+ [KVM_CAP_PPC_ALLOC_HTAB] = XLAT(KVM_CAP_PPC_ALLOC_HTAB),
+ [KVM_CAP_READONLY_MEM] = XLAT(KVM_CAP_READONLY_MEM),
+ [KVM_CAP_IRQFD_RESAMPLE] = XLAT(KVM_CAP_IRQFD_RESAMPLE),
+ [KVM_CAP_PPC_BOOKE_WATCHDOG] = XLAT(KVM_CAP_PPC_BOOKE_WATCHDOG),
+ [KVM_CAP_PPC_HTAB_FD] = XLAT(KVM_CAP_PPC_HTAB_FD),
+ [KVM_CAP_S390_CSS_SUPPORT] = XLAT(KVM_CAP_S390_CSS_SUPPORT),
+ [KVM_CAP_PPC_EPR] = XLAT(KVM_CAP_PPC_EPR),
+ [KVM_CAP_ARM_PSCI] = XLAT(KVM_CAP_ARM_PSCI),
+ [KVM_CAP_ARM_SET_DEVICE_ADDR] = XLAT(KVM_CAP_ARM_SET_DEVICE_ADDR),
+ [KVM_CAP_DEVICE_CTRL] = XLAT(KVM_CAP_DEVICE_CTRL),
+ [KVM_CAP_IRQ_MPIC] = XLAT(KVM_CAP_IRQ_MPIC),
+ [KVM_CAP_PPC_RTAS] = XLAT(KVM_CAP_PPC_RTAS),
+ [KVM_CAP_IRQ_XICS] = XLAT(KVM_CAP_IRQ_XICS),
+ [KVM_CAP_ARM_EL1_32BIT] = XLAT(KVM_CAP_ARM_EL1_32BIT),
+ [KVM_CAP_SPAPR_MULTITCE] = XLAT(KVM_CAP_SPAPR_MULTITCE),
+ [KVM_CAP_EXT_EMUL_CPUID] = XLAT(KVM_CAP_EXT_EMUL_CPUID),
+ [KVM_CAP_HYPERV_TIME] = XLAT(KVM_CAP_HYPERV_TIME),
+ [KVM_CAP_IOAPIC_POLARITY_IGNORED] = XLAT(KVM_CAP_IOAPIC_POLARITY_IGNORED),
+ [KVM_CAP_ENABLE_CAP_VM] = XLAT(KVM_CAP_ENABLE_CAP_VM),
+ [KVM_CAP_S390_IRQCHIP] = XLAT(KVM_CAP_S390_IRQCHIP),
+ [KVM_CAP_IOEVENTFD_NO_LENGTH] = XLAT(KVM_CAP_IOEVENTFD_NO_LENGTH),
+ [KVM_CAP_VM_ATTRIBUTES] = XLAT(KVM_CAP_VM_ATTRIBUTES),
+ [KVM_CAP_ARM_PSCI_0_2] = XLAT(KVM_CAP_ARM_PSCI_0_2),
+ [KVM_CAP_PPC_FIXUP_HCALL] = XLAT(KVM_CAP_PPC_FIXUP_HCALL),
+ [KVM_CAP_PPC_ENABLE_HCALL] = XLAT(KVM_CAP_PPC_ENABLE_HCALL),
+ [KVM_CAP_CHECK_EXTENSION_VM] = XLAT(KVM_CAP_CHECK_EXTENSION_VM),
+ [KVM_CAP_S390_USER_SIGP] = XLAT(KVM_CAP_S390_USER_SIGP),
+ [KVM_CAP_S390_VECTOR_REGISTERS] = XLAT(KVM_CAP_S390_VECTOR_REGISTERS),
+ [KVM_CAP_S390_MEM_OP] = XLAT(KVM_CAP_S390_MEM_OP),
+ [KVM_CAP_S390_USER_STSI] = XLAT(KVM_CAP_S390_USER_STSI),
+ [KVM_CAP_S390_SKEYS] = XLAT(KVM_CAP_S390_SKEYS),
+ [KVM_CAP_MIPS_FPU] = XLAT(KVM_CAP_MIPS_FPU),
+ [KVM_CAP_MIPS_MSA] = XLAT(KVM_CAP_MIPS_MSA),
+ [KVM_CAP_S390_INJECT_IRQ] = XLAT(KVM_CAP_S390_INJECT_IRQ),
+ [KVM_CAP_S390_IRQ_STATE] = XLAT(KVM_CAP_S390_IRQ_STATE),
+ [KVM_CAP_PPC_HWRNG] = XLAT(KVM_CAP_PPC_HWRNG),
+ [KVM_CAP_DISABLE_QUIRKS] = XLAT(KVM_CAP_DISABLE_QUIRKS),
+ [KVM_CAP_X86_SMM] = XLAT(KVM_CAP_X86_SMM),
+ [KVM_CAP_MULTI_ADDRESS_SPACE] = XLAT(KVM_CAP_MULTI_ADDRESS_SPACE),
+ [KVM_CAP_GUEST_DEBUG_HW_BPS] = XLAT(KVM_CAP_GUEST_DEBUG_HW_BPS),
+ [KVM_CAP_GUEST_DEBUG_HW_WPS] = XLAT(KVM_CAP_GUEST_DEBUG_HW_WPS),
+ [KVM_CAP_SPLIT_IRQCHIP] = XLAT(KVM_CAP_SPLIT_IRQCHIP),
+ [KVM_CAP_IOEVENTFD_ANY_LENGTH] = XLAT(KVM_CAP_IOEVENTFD_ANY_LENGTH),
+ [KVM_CAP_HYPERV_SYNIC] = XLAT(KVM_CAP_HYPERV_SYNIC),
+ [KVM_CAP_S390_RI] = XLAT(KVM_CAP_S390_RI),
+ [KVM_CAP_SPAPR_TCE_64] = XLAT(KVM_CAP_SPAPR_TCE_64),
+ [KVM_CAP_ARM_PMU_V3] = XLAT(KVM_CAP_ARM_PMU_V3),
+ [KVM_CAP_VCPU_ATTRIBUTES] = XLAT(KVM_CAP_VCPU_ATTRIBUTES),
+ [KVM_CAP_MAX_VCPU_ID] = XLAT(KVM_CAP_MAX_VCPU_ID),
+ [KVM_CAP_X2APIC_API] = XLAT(KVM_CAP_X2APIC_API),
+ [KVM_CAP_S390_USER_INSTR0] = XLAT(KVM_CAP_S390_USER_INSTR0),
+ [KVM_CAP_MSI_DEVID] = XLAT(KVM_CAP_MSI_DEVID),
+ [KVM_CAP_PPC_HTM] = XLAT(KVM_CAP_PPC_HTM),
+ [KVM_CAP_SPAPR_RESIZE_HPT] = XLAT(KVM_CAP_SPAPR_RESIZE_HPT),
+ [KVM_CAP_PPC_MMU_RADIX] = XLAT(KVM_CAP_PPC_MMU_RADIX),
+ [KVM_CAP_PPC_MMU_HASH_V3] = XLAT(KVM_CAP_PPC_MMU_HASH_V3),
+ [KVM_CAP_IMMEDIATE_EXIT] = XLAT(KVM_CAP_IMMEDIATE_EXIT),
+ [KVM_CAP_MIPS_VZ] = XLAT(KVM_CAP_MIPS_VZ),
+ [KVM_CAP_MIPS_TE] = XLAT(KVM_CAP_MIPS_TE),
+ [KVM_CAP_MIPS_64BIT] = XLAT(KVM_CAP_MIPS_64BIT),
+ [KVM_CAP_S390_GS] = XLAT(KVM_CAP_S390_GS),
+ [KVM_CAP_S390_AIS] = XLAT(KVM_CAP_S390_AIS),
+ [KVM_CAP_SPAPR_TCE_VFIO] = XLAT(KVM_CAP_SPAPR_TCE_VFIO),
+ [KVM_CAP_X86_DISABLE_EXITS] = XLAT(KVM_CAP_X86_DISABLE_EXITS),
+ [KVM_CAP_ARM_USER_IRQ] = XLAT(KVM_CAP_ARM_USER_IRQ),
+ [KVM_CAP_S390_CMMA_MIGRATION] = XLAT(KVM_CAP_S390_CMMA_MIGRATION),
+ [KVM_CAP_PPC_FWNMI] = XLAT(KVM_CAP_PPC_FWNMI),
+ [KVM_CAP_PPC_SMT_POSSIBLE] = XLAT(KVM_CAP_PPC_SMT_POSSIBLE),
+ [KVM_CAP_HYPERV_SYNIC2] = XLAT(KVM_CAP_HYPERV_SYNIC2),
+ [KVM_CAP_HYPERV_VP_INDEX] = XLAT(KVM_CAP_HYPERV_VP_INDEX),
+ [KVM_CAP_S390_AIS_MIGRATION] = XLAT(KVM_CAP_S390_AIS_MIGRATION),
+ [KVM_CAP_PPC_GET_CPU_CHAR] = XLAT(KVM_CAP_PPC_GET_CPU_CHAR),
+ [KVM_CAP_S390_BPB] = XLAT(KVM_CAP_S390_BPB),
+ [KVM_CAP_GET_MSR_FEATURES] = XLAT(KVM_CAP_GET_MSR_FEATURES),
+ [KVM_CAP_HYPERV_EVENTFD] = XLAT(KVM_CAP_HYPERV_EVENTFD),
+ [KVM_CAP_HYPERV_TLBFLUSH] = XLAT(KVM_CAP_HYPERV_TLBFLUSH),
+ [KVM_CAP_S390_HPAGE_1M] = XLAT(KVM_CAP_S390_HPAGE_1M),
+ [KVM_CAP_NESTED_STATE] = XLAT(KVM_CAP_NESTED_STATE),
+ [KVM_CAP_ARM_INJECT_SERROR_ESR] = XLAT(KVM_CAP_ARM_INJECT_SERROR_ESR),
+ [KVM_CAP_MSR_PLATFORM_INFO] = XLAT(KVM_CAP_MSR_PLATFORM_INFO),
+ [KVM_CAP_PPC_NESTED_HV] = XLAT(KVM_CAP_PPC_NESTED_HV),
+ [KVM_CAP_HYPERV_SEND_IPI] = XLAT(KVM_CAP_HYPERV_SEND_IPI),
+ [KVM_CAP_COALESCED_PIO] = XLAT(KVM_CAP_COALESCED_PIO),
+ [KVM_CAP_HYPERV_ENLIGHTENED_VMCS] = XLAT(KVM_CAP_HYPERV_ENLIGHTENED_VMCS),
+ [KVM_CAP_EXCEPTION_PAYLOAD] = XLAT(KVM_CAP_EXCEPTION_PAYLOAD),
+ [KVM_CAP_ARM_VM_IPA_SIZE] = XLAT(KVM_CAP_ARM_VM_IPA_SIZE),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/nbd_ioctl_cmds.h b/xlat/nbd_ioctl_cmds.h
new file mode 100644
index 0000000..840dc8e
--- /dev/null
+++ b/xlat/nbd_ioctl_cmds.h
@@ -0,0 +1,110 @@
+/* Generated by ./xlat/gen.sh from ./xlat/nbd_ioctl_cmds.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(NBD_SET_SOCK) || (defined(HAVE_DECL_NBD_SET_SOCK) && HAVE_DECL_NBD_SET_SOCK)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_SET_SOCK) == (_IO( 0xab, 0 )), "NBD_SET_SOCK != _IO( 0xab, 0 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_SET_SOCK _IO( 0xab, 0 )
+#endif
+#if defined(NBD_SET_BLKSIZE) || (defined(HAVE_DECL_NBD_SET_BLKSIZE) && HAVE_DECL_NBD_SET_BLKSIZE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_SET_BLKSIZE) == (_IO( 0xab, 1 )), "NBD_SET_BLKSIZE != _IO( 0xab, 1 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_SET_BLKSIZE _IO( 0xab, 1 )
+#endif
+#if defined(NBD_SET_SIZE) || (defined(HAVE_DECL_NBD_SET_SIZE) && HAVE_DECL_NBD_SET_SIZE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_SET_SIZE) == (_IO( 0xab, 2 )), "NBD_SET_SIZE != _IO( 0xab, 2 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_SET_SIZE _IO( 0xab, 2 )
+#endif
+#if defined(NBD_DO_IT) || (defined(HAVE_DECL_NBD_DO_IT) && HAVE_DECL_NBD_DO_IT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_DO_IT) == (_IO( 0xab, 3 )), "NBD_DO_IT != _IO( 0xab, 3 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_DO_IT _IO( 0xab, 3 )
+#endif
+#if defined(NBD_CLEAR_SOCK) || (defined(HAVE_DECL_NBD_CLEAR_SOCK) && HAVE_DECL_NBD_CLEAR_SOCK)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_CLEAR_SOCK) == (_IO( 0xab, 4 )), "NBD_CLEAR_SOCK != _IO( 0xab, 4 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_CLEAR_SOCK _IO( 0xab, 4 )
+#endif
+#if defined(NBD_CLEAR_QUE) || (defined(HAVE_DECL_NBD_CLEAR_QUE) && HAVE_DECL_NBD_CLEAR_QUE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_CLEAR_QUE) == (_IO( 0xab, 5 )), "NBD_CLEAR_QUE != _IO( 0xab, 5 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_CLEAR_QUE _IO( 0xab, 5 )
+#endif
+#if defined(NBD_PRINT_DEBUG) || (defined(HAVE_DECL_NBD_PRINT_DEBUG) && HAVE_DECL_NBD_PRINT_DEBUG)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_PRINT_DEBUG) == (_IO( 0xab, 6 )), "NBD_PRINT_DEBUG != _IO( 0xab, 6 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_PRINT_DEBUG _IO( 0xab, 6 )
+#endif
+#if defined(NBD_SET_SIZE_BLOCKS) || (defined(HAVE_DECL_NBD_SET_SIZE_BLOCKS) && HAVE_DECL_NBD_SET_SIZE_BLOCKS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_SET_SIZE_BLOCKS) == (_IO( 0xab, 7 )), "NBD_SET_SIZE_BLOCKS != _IO( 0xab, 7 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_SET_SIZE_BLOCKS _IO( 0xab, 7 )
+#endif
+#if defined(NBD_DISCONNECT) || (defined(HAVE_DECL_NBD_DISCONNECT) && HAVE_DECL_NBD_DISCONNECT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_DISCONNECT) == (_IO( 0xab, 8 )), "NBD_DISCONNECT != _IO( 0xab, 8 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_DISCONNECT _IO( 0xab, 8 )
+#endif
+#if defined(NBD_SET_TIMEOUT) || (defined(HAVE_DECL_NBD_SET_TIMEOUT) && HAVE_DECL_NBD_SET_TIMEOUT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_SET_TIMEOUT) == (_IO( 0xab, 9 )), "NBD_SET_TIMEOUT != _IO( 0xab, 9 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_SET_TIMEOUT _IO( 0xab, 9 )
+#endif
+#if defined(NBD_SET_FLAGS) || (defined(HAVE_DECL_NBD_SET_FLAGS) && HAVE_DECL_NBD_SET_FLAGS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_SET_FLAGS) == (_IO( 0xab, 10)), "NBD_SET_FLAGS != _IO( 0xab, 10)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_SET_FLAGS _IO( 0xab, 10)
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat nbd_ioctl_cmds in mpers mode
+
+# else
+
+static
+const struct xlat nbd_ioctl_cmds[] = {
+ XLAT(NBD_SET_SOCK),
+ XLAT(NBD_SET_BLKSIZE),
+ XLAT(NBD_SET_SIZE),
+ XLAT(NBD_DO_IT),
+ XLAT(NBD_CLEAR_SOCK),
+ XLAT(NBD_CLEAR_QUE),
+ XLAT(NBD_PRINT_DEBUG),
+ XLAT(NBD_SET_SIZE_BLOCKS),
+ XLAT(NBD_DISCONNECT),
+ XLAT(NBD_SET_TIMEOUT),
+ XLAT(NBD_SET_FLAGS),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/nbd_ioctl_flags.h b/xlat/nbd_ioctl_flags.h
new file mode 100644
index 0000000..a1311a2
--- /dev/null
+++ b/xlat/nbd_ioctl_flags.h
@@ -0,0 +1,128 @@
+/* Generated by ./xlat/gen.sh from ./xlat/nbd_ioctl_flags.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(NBD_FLAG_HAS_FLAGS) || (defined(HAVE_DECL_NBD_FLAG_HAS_FLAGS) && HAVE_DECL_NBD_FLAG_HAS_FLAGS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_FLAG_HAS_FLAGS) == ((1 << 0)), "NBD_FLAG_HAS_FLAGS != (1 << 0)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_FLAG_HAS_FLAGS (1 << 0)
+#endif
+#if defined(NBD_FLAG_READ_ONLY) || (defined(HAVE_DECL_NBD_FLAG_READ_ONLY) && HAVE_DECL_NBD_FLAG_READ_ONLY)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_FLAG_READ_ONLY) == ((1 << 1)), "NBD_FLAG_READ_ONLY != (1 << 1)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_FLAG_READ_ONLY (1 << 1)
+#endif
+#if defined(NBD_FLAG_SEND_FLUSH) || (defined(HAVE_DECL_NBD_FLAG_SEND_FLUSH) && HAVE_DECL_NBD_FLAG_SEND_FLUSH)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_FLAG_SEND_FLUSH) == ((1 << 2)), "NBD_FLAG_SEND_FLUSH != (1 << 2)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_FLAG_SEND_FLUSH (1 << 2)
+#endif
+#if defined(NBD_FLAG_SEND_FUA) || (defined(HAVE_DECL_NBD_FLAG_SEND_FUA) && HAVE_DECL_NBD_FLAG_SEND_FUA)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_FLAG_SEND_FUA) == ((1 << 3)), "NBD_FLAG_SEND_FUA != (1 << 3)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_FLAG_SEND_FUA (1 << 3)
+#endif
+#if defined(NBD_FLAG_ROTATIONAL) || (defined(HAVE_DECL_NBD_FLAG_ROTATIONAL) && HAVE_DECL_NBD_FLAG_ROTATIONAL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_FLAG_ROTATIONAL) == ((1 << 4)), "NBD_FLAG_ROTATIONAL != (1 << 4)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_FLAG_ROTATIONAL (1 << 4)
+#endif
+#if defined(NBD_FLAG_SEND_TRIM) || (defined(HAVE_DECL_NBD_FLAG_SEND_TRIM) && HAVE_DECL_NBD_FLAG_SEND_TRIM)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_FLAG_SEND_TRIM) == ((1 << 5)), "NBD_FLAG_SEND_TRIM != (1 << 5)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_FLAG_SEND_TRIM (1 << 5)
+#endif
+#if defined(NBD_FLAG_SEND_WRITE_ZEROES) || (defined(HAVE_DECL_NBD_FLAG_SEND_WRITE_ZEROES) && HAVE_DECL_NBD_FLAG_SEND_WRITE_ZEROES)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_FLAG_SEND_WRITE_ZEROES) == ((1 << 6)), "NBD_FLAG_SEND_WRITE_ZEROES != (1 << 6)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_FLAG_SEND_WRITE_ZEROES (1 << 6)
+#endif
+#if defined(NBD_FLAG_SEND_DF) || (defined(HAVE_DECL_NBD_FLAG_SEND_DF) && HAVE_DECL_NBD_FLAG_SEND_DF)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_FLAG_SEND_DF) == ((1 << 7)), "NBD_FLAG_SEND_DF != (1 << 7)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_FLAG_SEND_DF (1 << 7)
+#endif
+#if defined(NBD_FLAG_CAN_MULTI_CONN) || (defined(HAVE_DECL_NBD_FLAG_CAN_MULTI_CONN) && HAVE_DECL_NBD_FLAG_CAN_MULTI_CONN)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_FLAG_CAN_MULTI_CONN) == ((1 << 8)), "NBD_FLAG_CAN_MULTI_CONN != (1 << 8)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_FLAG_CAN_MULTI_CONN (1 << 8)
+#endif
+#if defined(NBD_FLAG_SEND_RESIZE) || (defined(HAVE_DECL_NBD_FLAG_SEND_RESIZE) && HAVE_DECL_NBD_FLAG_SEND_RESIZE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_FLAG_SEND_RESIZE) == ((1 << 9)), "NBD_FLAG_SEND_RESIZE != (1 << 9)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_FLAG_SEND_RESIZE (1 << 9)
+#endif
+#if defined(NBD_FLAG_SEND_CACHE) || (defined(HAVE_DECL_NBD_FLAG_SEND_CACHE) && HAVE_DECL_NBD_FLAG_SEND_CACHE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NBD_FLAG_SEND_CACHE) == ((1 << 10)), "NBD_FLAG_SEND_CACHE != (1 << 10)");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NBD_FLAG_SEND_CACHE (1 << 10)
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat nbd_ioctl_flags in mpers mode
+
+# else
+
+static
+const struct xlat nbd_ioctl_flags[] = {
+/*
+* Some flags are not defined in <linux/nbd.h>, but are passed anyway.
+* These flags are sent from nbd-server to the client, and the client
+* passes them to the kernel unmodified after parsing. Both the client
+* and the kernel ignore flags unknown to them.
+*/
+
+
+ XLAT(NBD_FLAG_HAS_FLAGS),
+
+ XLAT(NBD_FLAG_READ_ONLY),
+
+ XLAT(NBD_FLAG_SEND_FLUSH),
+
+ XLAT(NBD_FLAG_SEND_FUA),
+
+ XLAT(NBD_FLAG_ROTATIONAL),
+
+ XLAT(NBD_FLAG_SEND_TRIM),
+
+ XLAT(NBD_FLAG_SEND_WRITE_ZEROES),
+
+ XLAT(NBD_FLAG_SEND_DF),
+
+ XLAT(NBD_FLAG_CAN_MULTI_CONN),
+
+ XLAT(NBD_FLAG_SEND_RESIZE),
+
+ XLAT(NBD_FLAG_SEND_CACHE),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/pr_spec_cmds.h b/xlat/pr_spec_cmds.h
index 7724d24..9fa9f65 100644
--- a/xlat/pr_spec_cmds.h
+++ b/xlat/pr_spec_cmds.h
@@ -10,6 +10,13 @@ DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
 # define PR_SPEC_STORE_BYPASS 0
 #endif
+#if defined(PR_SPEC_INDIRECT_BRANCH) || (defined(HAVE_DECL_PR_SPEC_INDIRECT_BRANCH) && HAVE_DECL_PR_SPEC_INDIRECT_BRANCH)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((PR_SPEC_INDIRECT_BRANCH) == (1), "PR_SPEC_INDIRECT_BRANCH != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define PR_SPEC_INDIRECT_BRANCH 1
+#endif
 
 #ifndef XLAT_MACROS_ONLY
 
@@ -21,7 +28,8 @@ DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 
 static
 const struct xlat pr_spec_cmds[] = {
- XLAT(PR_SPEC_STORE_BYPASS),
+ [PR_SPEC_STORE_BYPASS] = XLAT(PR_SPEC_STORE_BYPASS),
+ [PR_SPEC_INDIRECT_BRANCH] = XLAT(PR_SPEC_INDIRECT_BRANCH),
  XLAT_END
 };
 
diff --git a/xlat/ptrace_cmds.h b/xlat/ptrace_cmds.h
index 36b4eae..77faa90 100644
--- a/xlat/ptrace_cmds.h
+++ b/xlat/ptrace_cmds.h
@@ -6,13 +6,8 @@
 
 #ifndef XLAT_MACROS_ONLY
 
-# ifdef IN_MPERS
+# ifndef IN_MPERS
 
-#  error static const struct xlat ptrace_cmds in mpers mode
-
-# else
-
-static
 const struct xlat ptrace_cmds[] = {
 #if defined(PTRACE_TRACEME) || (defined(HAVE_DECL_PTRACE_TRACEME) && HAVE_DECL_PTRACE_TRACEME)
   XLAT(PTRACE_TRACEME),
diff --git a/xlat/random_ioctl_cmds.h b/xlat/random_ioctl_cmds.h
new file mode 100644
index 0000000..e556474
--- /dev/null
+++ b/xlat/random_ioctl_cmds.h
@@ -0,0 +1,78 @@
+/* Generated by ./xlat/gen.sh from ./xlat/random_ioctl_cmds.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(RNDGETENTCNT) || (defined(HAVE_DECL_RNDGETENTCNT) && HAVE_DECL_RNDGETENTCNT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((RNDGETENTCNT) == (_IOR( 'R', 0x00, int )), "RNDGETENTCNT != _IOR( 'R', 0x00, int )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define RNDGETENTCNT _IOR( 'R', 0x00, int )
+#endif
+#if defined(RNDADDTOENTCNT) || (defined(HAVE_DECL_RNDADDTOENTCNT) && HAVE_DECL_RNDADDTOENTCNT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((RNDADDTOENTCNT) == (_IOW( 'R', 0x01, int )), "RNDADDTOENTCNT != _IOW( 'R', 0x01, int )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define RNDADDTOENTCNT _IOW( 'R', 0x01, int )
+#endif
+#if defined(RNDGETPOOL) || (defined(HAVE_DECL_RNDGETPOOL) && HAVE_DECL_RNDGETPOOL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((RNDGETPOOL) == (_IOR( 'R', 0x02, int [2] )), "RNDGETPOOL != _IOR( 'R', 0x02, int [2] )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define RNDGETPOOL _IOR( 'R', 0x02, int [2] )
+#endif
+#if defined(RNDADDENTROPY) || (defined(HAVE_DECL_RNDADDENTROPY) && HAVE_DECL_RNDADDENTROPY)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((RNDADDENTROPY) == (_IOW( 'R', 0x03, int [2] )), "RNDADDENTROPY != _IOW( 'R', 0x03, int [2] )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define RNDADDENTROPY _IOW( 'R', 0x03, int [2] )
+#endif
+#if defined(RNDZAPENTCNT) || (defined(HAVE_DECL_RNDZAPENTCNT) && HAVE_DECL_RNDZAPENTCNT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((RNDZAPENTCNT) == (_IO( 'R', 0x04 )), "RNDZAPENTCNT != _IO( 'R', 0x04 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define RNDZAPENTCNT _IO( 'R', 0x04 )
+#endif
+#if defined(RNDCLEARPOOL) || (defined(HAVE_DECL_RNDCLEARPOOL) && HAVE_DECL_RNDCLEARPOOL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((RNDCLEARPOOL) == (_IO( 'R', 0x06 )), "RNDCLEARPOOL != _IO( 'R', 0x06 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define RNDCLEARPOOL _IO( 'R', 0x06 )
+#endif
+#if defined(RNDRESEEDCRNG) || (defined(HAVE_DECL_RNDRESEEDCRNG) && HAVE_DECL_RNDRESEEDCRNG)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((RNDRESEEDCRNG) == (_IO( 'R', 0x07 )), "RNDRESEEDCRNG != _IO( 'R', 0x07 )");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define RNDRESEEDCRNG _IO( 'R', 0x07 )
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat random_ioctl_cmds in mpers mode
+
+# else
+
+static
+const struct xlat random_ioctl_cmds[] = {
+ XLAT(RNDGETENTCNT),
+ XLAT(RNDADDTOENTCNT),
+ XLAT(RNDGETPOOL),
+ XLAT(RNDADDENTROPY),
+ XLAT(RNDZAPENTCNT),
+ XLAT(RNDCLEARPOOL),
+ XLAT(RNDRESEEDCRNG),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/rtnl_ifla_brport_attrs.h b/xlat/rtnl_ifla_brport_attrs.h
index 07d2c2d..fdef1af 100644
--- a/xlat/rtnl_ifla_brport_attrs.h
+++ b/xlat/rtnl_ifla_brport_attrs.h
@@ -241,6 +241,13 @@ DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
 # define IFLA_BRPORT_ISOLATED 33
 #endif
+#if defined(IFLA_BRPORT_BACKUP_PORT) || (defined(HAVE_DECL_IFLA_BRPORT_BACKUP_PORT) && HAVE_DECL_IFLA_BRPORT_BACKUP_PORT)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IFLA_BRPORT_BACKUP_PORT) == (34), "IFLA_BRPORT_BACKUP_PORT != 34");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IFLA_BRPORT_BACKUP_PORT 34
+#endif
 
 #ifndef XLAT_MACROS_ONLY
 
@@ -286,6 +293,7 @@ const struct xlat rtnl_ifla_brport_attrs[] = {
  XLAT(IFLA_BRPORT_GROUP_FWD_MASK),
  XLAT(IFLA_BRPORT_NEIGH_SUPPRESS),
  XLAT(IFLA_BRPORT_ISOLATED),
+ XLAT(IFLA_BRPORT_BACKUP_PORT),
  XLAT_END
 };
 
diff --git a/xlat/rtnl_ifla_xdp_attached_mode.h b/xlat/rtnl_ifla_xdp_attached_mode.h
new file mode 100644
index 0000000..bfa9dee
--- /dev/null
+++ b/xlat/rtnl_ifla_xdp_attached_mode.h
@@ -0,0 +1,62 @@
+/* Generated by ./xlat/gen.sh from ./xlat/rtnl_ifla_xdp_attached_mode.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(XDP_ATTACHED_NONE) || (defined(HAVE_DECL_XDP_ATTACHED_NONE) && HAVE_DECL_XDP_ATTACHED_NONE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((XDP_ATTACHED_NONE) == (0), "XDP_ATTACHED_NONE != 0");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define XDP_ATTACHED_NONE 0
+#endif
+#if defined(XDP_ATTACHED_DRV) || (defined(HAVE_DECL_XDP_ATTACHED_DRV) && HAVE_DECL_XDP_ATTACHED_DRV)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((XDP_ATTACHED_DRV) == (1), "XDP_ATTACHED_DRV != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define XDP_ATTACHED_DRV 1
+#endif
+#if defined(XDP_ATTACHED_SKB) || (defined(HAVE_DECL_XDP_ATTACHED_SKB) && HAVE_DECL_XDP_ATTACHED_SKB)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((XDP_ATTACHED_SKB) == (2), "XDP_ATTACHED_SKB != 2");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define XDP_ATTACHED_SKB 2
+#endif
+#if defined(XDP_ATTACHED_HW) || (defined(HAVE_DECL_XDP_ATTACHED_HW) && HAVE_DECL_XDP_ATTACHED_HW)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((XDP_ATTACHED_HW) == (3), "XDP_ATTACHED_HW != 3");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define XDP_ATTACHED_HW 3
+#endif
+#if defined(XDP_ATTACHED_MULTI) || (defined(HAVE_DECL_XDP_ATTACHED_MULTI) && HAVE_DECL_XDP_ATTACHED_MULTI)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((XDP_ATTACHED_MULTI) == (4), "XDP_ATTACHED_MULTI != 4");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define XDP_ATTACHED_MULTI 4
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat rtnl_ifla_xdp_attached_mode in mpers mode
+
+# else
+
+static
+const struct xlat rtnl_ifla_xdp_attached_mode[] = {
+ [XDP_ATTACHED_NONE] = XLAT(XDP_ATTACHED_NONE),
+ [XDP_ATTACHED_DRV] = XLAT(XDP_ATTACHED_DRV),
+ [XDP_ATTACHED_SKB] = XLAT(XDP_ATTACHED_SKB),
+ [XDP_ATTACHED_HW] = XLAT(XDP_ATTACHED_HW),
+ [XDP_ATTACHED_MULTI] = XLAT(XDP_ATTACHED_MULTI),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/rtnl_ifla_xdp_attrs.h b/xlat/rtnl_ifla_xdp_attrs.h
index 3972d8e..dc9018f 100644
--- a/xlat/rtnl_ifla_xdp_attrs.h
+++ b/xlat/rtnl_ifla_xdp_attrs.h
@@ -38,6 +38,27 @@ DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
 # define IFLA_XDP_PROG_ID 4
 #endif
+#if defined(IFLA_XDP_DRV_PROG_ID) || (defined(HAVE_DECL_IFLA_XDP_DRV_PROG_ID) && HAVE_DECL_IFLA_XDP_DRV_PROG_ID)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IFLA_XDP_DRV_PROG_ID) == (5), "IFLA_XDP_DRV_PROG_ID != 5");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IFLA_XDP_DRV_PROG_ID 5
+#endif
+#if defined(IFLA_XDP_SKB_PROG_ID) || (defined(HAVE_DECL_IFLA_XDP_SKB_PROG_ID) && HAVE_DECL_IFLA_XDP_SKB_PROG_ID)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IFLA_XDP_SKB_PROG_ID) == (6), "IFLA_XDP_SKB_PROG_ID != 6");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IFLA_XDP_SKB_PROG_ID 6
+#endif
+#if defined(IFLA_XDP_HW_PROG_ID) || (defined(HAVE_DECL_IFLA_XDP_HW_PROG_ID) && HAVE_DECL_IFLA_XDP_HW_PROG_ID)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IFLA_XDP_HW_PROG_ID) == (7), "IFLA_XDP_HW_PROG_ID != 7");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IFLA_XDP_HW_PROG_ID 7
+#endif
 
 #ifndef XLAT_MACROS_ONLY
 
@@ -54,6 +75,9 @@ const struct xlat rtnl_ifla_xdp_attrs[] = {
  XLAT(IFLA_XDP_ATTACHED),
  XLAT(IFLA_XDP_FLAGS),
  XLAT(IFLA_XDP_PROG_ID),
+ XLAT(IFLA_XDP_DRV_PROG_ID),
+ XLAT(IFLA_XDP_SKB_PROG_ID),
+ XLAT(IFLA_XDP_HW_PROG_ID),
  XLAT_END
 };
 
diff --git a/xlat/rtnl_link_attrs.h b/xlat/rtnl_link_attrs.h
index 2ce3ee4..6a29860 100644
--- a/xlat/rtnl_link_attrs.h
+++ b/xlat/rtnl_link_attrs.h
@@ -353,6 +353,20 @@ DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
 # define IFLA_NEW_IFINDEX 49
 #endif
+#if defined(IFLA_MIN_MTU) || (defined(HAVE_DECL_IFLA_MIN_MTU) && HAVE_DECL_IFLA_MIN_MTU)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IFLA_MIN_MTU) == (50), "IFLA_MIN_MTU != 50");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IFLA_MIN_MTU 50
+#endif
+#if defined(IFLA_MAX_MTU) || (defined(HAVE_DECL_IFLA_MAX_MTU) && HAVE_DECL_IFLA_MAX_MTU)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((IFLA_MAX_MTU) == (51), "IFLA_MAX_MTU != 51");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define IFLA_MAX_MTU 51
+#endif
 
 #ifndef XLAT_MACROS_ONLY
 
@@ -414,6 +428,8 @@ const struct xlat rtnl_link_attrs[] = {
  XLAT(IFLA_CARRIER_UP_COUNT),
  XLAT(IFLA_CARRIER_DOWN_COUNT),
  XLAT(IFLA_NEW_IFINDEX),
+ XLAT(IFLA_MIN_MTU),
+ XLAT(IFLA_MAX_MTU),
  XLAT_END
 };
 
diff --git a/xlat/rtnl_netconf_attrs.h b/xlat/rtnl_netconf_attrs.h
index 194aa58..d1d7c87 100644
--- a/xlat/rtnl_netconf_attrs.h
+++ b/xlat/rtnl_netconf_attrs.h
@@ -59,6 +59,13 @@ DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
 # define NETCONFA_INPUT 7
 #endif
+#if defined(NETCONFA_BC_FORWARDING) || (defined(HAVE_DECL_NETCONFA_BC_FORWARDING) && HAVE_DECL_NETCONFA_BC_FORWARDING)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((NETCONFA_BC_FORWARDING) == (8), "NETCONFA_BC_FORWARDING != 8");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define NETCONFA_BC_FORWARDING 8
+#endif
 
 #ifndef XLAT_MACROS_ONLY
 
@@ -78,6 +85,7 @@ const struct xlat rtnl_netconf_attrs[] = {
  XLAT(NETCONFA_PROXY_NEIGH),
  XLAT(NETCONFA_IGNORE_ROUTES_WITH_LINKDOWN),
  XLAT(NETCONFA_INPUT),
+ XLAT(NETCONFA_BC_FORWARDING),
  XLAT_END
 };
 
diff --git a/xlat/smc_decl_codes.h b/xlat/smc_decl_codes.h
new file mode 100644
index 0000000..2f8f859
--- /dev/null
+++ b/xlat/smc_decl_codes.h
@@ -0,0 +1,151 @@
+/* Generated by ./xlat/gen.sh from ./xlat/smc_decl_codes.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(SMC_CLC_DECL_MEM) || (defined(HAVE_DECL_SMC_CLC_DECL_MEM) && HAVE_DECL_SMC_CLC_DECL_MEM)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_MEM) == (0x01010000), "SMC_CLC_DECL_MEM != 0x01010000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_MEM 0x01010000
+#endif
+#if defined(SMC_CLC_DECL_TIMEOUT_CL) || (defined(HAVE_DECL_SMC_CLC_DECL_TIMEOUT_CL) && HAVE_DECL_SMC_CLC_DECL_TIMEOUT_CL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_TIMEOUT_CL) == (0x02010000), "SMC_CLC_DECL_TIMEOUT_CL != 0x02010000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_TIMEOUT_CL 0x02010000
+#endif
+#if defined(SMC_CLC_DECL_TIMEOUT_AL) || (defined(HAVE_DECL_SMC_CLC_DECL_TIMEOUT_AL) && HAVE_DECL_SMC_CLC_DECL_TIMEOUT_AL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_TIMEOUT_AL) == (0x02020000), "SMC_CLC_DECL_TIMEOUT_AL != 0x02020000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_TIMEOUT_AL 0x02020000
+#endif
+#if defined(SMC_CLC_DECL_CNFERR) || (defined(HAVE_DECL_SMC_CLC_DECL_CNFERR) && HAVE_DECL_SMC_CLC_DECL_CNFERR)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_CNFERR) == (0x03000000), "SMC_CLC_DECL_CNFERR != 0x03000000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_CNFERR 0x03000000
+#endif
+#if defined(SMC_CLC_DECL_PEERNOSMC) || (defined(HAVE_DECL_SMC_CLC_DECL_PEERNOSMC) && HAVE_DECL_SMC_CLC_DECL_PEERNOSMC)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_PEERNOSMC) == (0x03010000), "SMC_CLC_DECL_PEERNOSMC != 0x03010000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_PEERNOSMC 0x03010000
+#endif
+#if defined(SMC_CLC_DECL_IPSEC) || (defined(HAVE_DECL_SMC_CLC_DECL_IPSEC) && HAVE_DECL_SMC_CLC_DECL_IPSEC)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_IPSEC) == (0x03020000), "SMC_CLC_DECL_IPSEC != 0x03020000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_IPSEC 0x03020000
+#endif
+#if defined(SMC_CLC_DECL_NOSMCDEV) || (defined(HAVE_DECL_SMC_CLC_DECL_NOSMCDEV) && HAVE_DECL_SMC_CLC_DECL_NOSMCDEV)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_NOSMCDEV) == (0x03030000), "SMC_CLC_DECL_NOSMCDEV != 0x03030000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_NOSMCDEV 0x03030000
+#endif
+#if defined(SMC_CLC_DECL_MODEUNSUPP) || (defined(HAVE_DECL_SMC_CLC_DECL_MODEUNSUPP) && HAVE_DECL_SMC_CLC_DECL_MODEUNSUPP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_MODEUNSUPP) == (0x03040000), "SMC_CLC_DECL_MODEUNSUPP != 0x03040000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_MODEUNSUPP 0x03040000
+#endif
+#if defined(SMC_CLC_DECL_RMBE_EC) || (defined(HAVE_DECL_SMC_CLC_DECL_RMBE_EC) && HAVE_DECL_SMC_CLC_DECL_RMBE_EC)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_RMBE_EC) == (0x03050000), "SMC_CLC_DECL_RMBE_EC != 0x03050000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_RMBE_EC 0x03050000
+#endif
+#if defined(SMC_CLC_DECL_OPTUNSUPP) || (defined(HAVE_DECL_SMC_CLC_DECL_OPTUNSUPP) && HAVE_DECL_SMC_CLC_DECL_OPTUNSUPP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_OPTUNSUPP) == (0x03060000), "SMC_CLC_DECL_OPTUNSUPP != 0x03060000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_OPTUNSUPP 0x03060000
+#endif
+#if defined(SMC_CLC_DECL_SYNCERR) || (defined(HAVE_DECL_SMC_CLC_DECL_SYNCERR) && HAVE_DECL_SMC_CLC_DECL_SYNCERR)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_SYNCERR) == (0x04000000), "SMC_CLC_DECL_SYNCERR != 0x04000000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_SYNCERR 0x04000000
+#endif
+#if defined(SMC_CLC_DECL_PEERDECL) || (defined(HAVE_DECL_SMC_CLC_DECL_PEERDECL) && HAVE_DECL_SMC_CLC_DECL_PEERDECL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_PEERDECL) == (0x05000000), "SMC_CLC_DECL_PEERDECL != 0x05000000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_PEERDECL 0x05000000
+#endif
+#if defined(SMC_CLC_DECL_INTERR) || (defined(HAVE_DECL_SMC_CLC_DECL_INTERR) && HAVE_DECL_SMC_CLC_DECL_INTERR)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_INTERR) == (0x99990000), "SMC_CLC_DECL_INTERR != 0x99990000");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_INTERR 0x99990000
+#endif
+#if defined(SMC_CLC_DECL_ERR_RTOK) || (defined(HAVE_DECL_SMC_CLC_DECL_ERR_RTOK) && HAVE_DECL_SMC_CLC_DECL_ERR_RTOK)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_ERR_RTOK) == (0x99990001), "SMC_CLC_DECL_ERR_RTOK != 0x99990001");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_ERR_RTOK 0x99990001
+#endif
+#if defined(SMC_CLC_DECL_ERR_RDYLNK) || (defined(HAVE_DECL_SMC_CLC_DECL_ERR_RDYLNK) && HAVE_DECL_SMC_CLC_DECL_ERR_RDYLNK)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_ERR_RDYLNK) == (0x99990002), "SMC_CLC_DECL_ERR_RDYLNK != 0x99990002");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_ERR_RDYLNK 0x99990002
+#endif
+#if defined(SMC_CLC_DECL_ERR_REGRMB) || (defined(HAVE_DECL_SMC_CLC_DECL_ERR_REGRMB) && HAVE_DECL_SMC_CLC_DECL_ERR_REGRMB)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_CLC_DECL_ERR_REGRMB) == (0x99990003), "SMC_CLC_DECL_ERR_REGRMB != 0x99990003");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_CLC_DECL_ERR_REGRMB 0x99990003
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat smc_decl_codes in mpers mode
+
+# else
+
+static
+const struct xlat smc_decl_codes[] = {
+
+ XLAT(SMC_CLC_DECL_MEM),
+ XLAT(SMC_CLC_DECL_TIMEOUT_CL),
+ XLAT(SMC_CLC_DECL_TIMEOUT_AL),
+ XLAT(SMC_CLC_DECL_CNFERR),
+ XLAT(SMC_CLC_DECL_PEERNOSMC),
+ XLAT(SMC_CLC_DECL_IPSEC),
+ XLAT(SMC_CLC_DECL_NOSMCDEV),
+ XLAT(SMC_CLC_DECL_MODEUNSUPP),
+ XLAT(SMC_CLC_DECL_RMBE_EC),
+ XLAT(SMC_CLC_DECL_OPTUNSUPP),
+ XLAT(SMC_CLC_DECL_SYNCERR),
+ XLAT(SMC_CLC_DECL_PEERDECL),
+ XLAT(SMC_CLC_DECL_INTERR),
+ XLAT(SMC_CLC_DECL_ERR_RTOK),
+ XLAT(SMC_CLC_DECL_ERR_RDYLNK),
+ XLAT(SMC_CLC_DECL_ERR_REGRMB),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/smc_diag_mode.h b/xlat/smc_diag_mode.h
new file mode 100644
index 0000000..7cbddcd
--- /dev/null
+++ b/xlat/smc_diag_mode.h
@@ -0,0 +1,46 @@
+/* Generated by ./xlat/gen.sh from ./xlat/smc_diag_mode.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(SMC_DIAG_MODE_SMCR) || (defined(HAVE_DECL_SMC_DIAG_MODE_SMCR) && HAVE_DECL_SMC_DIAG_MODE_SMCR)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_DIAG_MODE_SMCR) == (0), "SMC_DIAG_MODE_SMCR != 0");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_DIAG_MODE_SMCR 0
+#endif
+#if defined(SMC_DIAG_MODE_FALLBACK_TCP) || (defined(HAVE_DECL_SMC_DIAG_MODE_FALLBACK_TCP) && HAVE_DECL_SMC_DIAG_MODE_FALLBACK_TCP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_DIAG_MODE_FALLBACK_TCP) == (1), "SMC_DIAG_MODE_FALLBACK_TCP != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_DIAG_MODE_FALLBACK_TCP 1
+#endif
+#if defined(SMC_DIAG_MODE_SMCD) || (defined(HAVE_DECL_SMC_DIAG_MODE_SMCD) && HAVE_DECL_SMC_DIAG_MODE_SMCD)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SMC_DIAG_MODE_SMCD) == (2), "SMC_DIAG_MODE_SMCD != 2");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SMC_DIAG_MODE_SMCD 2
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat smc_diag_mode in mpers mode
+
+# else
+
+static
+const struct xlat smc_diag_mode[] = {
+ [SMC_DIAG_MODE_SMCR] = XLAT(SMC_DIAG_MODE_SMCR),
+ [SMC_DIAG_MODE_FALLBACK_TCP] = XLAT(SMC_DIAG_MODE_FALLBACK_TCP),
+ [SMC_DIAG_MODE_SMCD] = XLAT(SMC_DIAG_MODE_SMCD),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/sock_ax25_options.h b/xlat/sock_ax25_options.h
new file mode 100644
index 0000000..11c833d
--- /dev/null
+++ b/xlat/sock_ax25_options.h
@@ -0,0 +1,116 @@
+/* Generated by ./xlat/gen.sh from ./xlat/sock_ax25_options.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(AX25_WINDOW) || (defined(HAVE_DECL_AX25_WINDOW) && HAVE_DECL_AX25_WINDOW)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_WINDOW) == (1), "AX25_WINDOW != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_WINDOW 1
+#endif
+#if defined(AX25_T1) || (defined(HAVE_DECL_AX25_T1) && HAVE_DECL_AX25_T1)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_T1) == (2), "AX25_T1 != 2");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_T1 2
+#endif
+#if defined(AX25_N2) || (defined(HAVE_DECL_AX25_N2) && HAVE_DECL_AX25_N2)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_N2) == (3), "AX25_N2 != 3");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_N2 3
+#endif
+#if defined(AX25_T3) || (defined(HAVE_DECL_AX25_T3) && HAVE_DECL_AX25_T3)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_T3) == (4), "AX25_T3 != 4");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_T3 4
+#endif
+#if defined(AX25_T2) || (defined(HAVE_DECL_AX25_T2) && HAVE_DECL_AX25_T2)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_T2) == (5), "AX25_T2 != 5");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_T2 5
+#endif
+#if defined(AX25_BACKOFF) || (defined(HAVE_DECL_AX25_BACKOFF) && HAVE_DECL_AX25_BACKOFF)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_BACKOFF) == (6), "AX25_BACKOFF != 6");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_BACKOFF 6
+#endif
+#if defined(AX25_EXTSEQ) || (defined(HAVE_DECL_AX25_EXTSEQ) && HAVE_DECL_AX25_EXTSEQ)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_EXTSEQ) == (7), "AX25_EXTSEQ != 7");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_EXTSEQ 7
+#endif
+#if defined(AX25_PIDINCL) || (defined(HAVE_DECL_AX25_PIDINCL) && HAVE_DECL_AX25_PIDINCL)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_PIDINCL) == (8), "AX25_PIDINCL != 8");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_PIDINCL 8
+#endif
+#if defined(AX25_IDLE) || (defined(HAVE_DECL_AX25_IDLE) && HAVE_DECL_AX25_IDLE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_IDLE) == (9), "AX25_IDLE != 9");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_IDLE 9
+#endif
+#if defined(AX25_PACLEN) || (defined(HAVE_DECL_AX25_PACLEN) && HAVE_DECL_AX25_PACLEN)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_PACLEN) == (10), "AX25_PACLEN != 10");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_PACLEN 10
+#endif
+#if defined(AX25_IAMDIGI) || (defined(HAVE_DECL_AX25_IAMDIGI) && HAVE_DECL_AX25_IAMDIGI)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((AX25_IAMDIGI) == (12), "AX25_IAMDIGI != 12");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define AX25_IAMDIGI 12
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat sock_ax25_options in mpers mode
+
+# else
+
+static
+const struct xlat sock_ax25_options[] = {
+
+ XLAT(AX25_WINDOW),
+ XLAT(AX25_T1),
+ XLAT(AX25_N2),
+ XLAT(AX25_T3),
+ XLAT(AX25_T2),
+ XLAT(AX25_BACKOFF),
+ XLAT(AX25_EXTSEQ),
+ XLAT(AX25_PIDINCL),
+ XLAT(AX25_IDLE),
+ XLAT(AX25_PACLEN),
+ XLAT(AX25_IAMDIGI),
+
+
+#if defined(SO_BINDTODEVICE) || (defined(HAVE_DECL_SO_BINDTODEVICE) && HAVE_DECL_SO_BINDTODEVICE)
+  XLAT(SO_BINDTODEVICE),
+#endif
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/sock_shutdown_flags.h b/xlat/sock_shutdown_flags.h
new file mode 100644
index 0000000..8f6caa2
--- /dev/null
+++ b/xlat/sock_shutdown_flags.h
@@ -0,0 +1,38 @@
+/* Generated by ./xlat/gen.sh from ./xlat/sock_shutdown_flags.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(RCV_SHUTDOWN) || (defined(HAVE_DECL_RCV_SHUTDOWN) && HAVE_DECL_RCV_SHUTDOWN)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((RCV_SHUTDOWN) == (1), "RCV_SHUTDOWN != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define RCV_SHUTDOWN 1
+#endif
+#if defined(SEND_SHUTDOWN) || (defined(HAVE_DECL_SEND_SHUTDOWN) && HAVE_DECL_SEND_SHUTDOWN)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SEND_SHUTDOWN) == (2), "SEND_SHUTDOWN != 2");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SEND_SHUTDOWN 2
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat sock_shutdown_flags in mpers mode
+
+# else
+
+static
+const struct xlat sock_shutdown_flags[] = {
+ XLAT(RCV_SHUTDOWN),
+ XLAT(SEND_SHUTDOWN),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/sock_xdp_options.h b/xlat/sock_xdp_options.h
new file mode 100644
index 0000000..8cd2ded
--- /dev/null
+++ b/xlat/sock_xdp_options.h
@@ -0,0 +1,78 @@
+/* Generated by ./xlat/gen.sh from ./xlat/sock_xdp_options.in; do not edit. */
+
+#include "gcc_compat.h"
+#include "static_assert.h"
+
+#if defined(XDP_MMAP_OFFSETS) || (defined(HAVE_DECL_XDP_MMAP_OFFSETS) && HAVE_DECL_XDP_MMAP_OFFSETS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((XDP_MMAP_OFFSETS) == (1), "XDP_MMAP_OFFSETS != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define XDP_MMAP_OFFSETS 1
+#endif
+#if defined(XDP_RX_RING) || (defined(HAVE_DECL_XDP_RX_RING) && HAVE_DECL_XDP_RX_RING)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((XDP_RX_RING) == (2), "XDP_RX_RING != 2");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define XDP_RX_RING 2
+#endif
+#if defined(XDP_TX_RING) || (defined(HAVE_DECL_XDP_TX_RING) && HAVE_DECL_XDP_TX_RING)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((XDP_TX_RING) == (3), "XDP_TX_RING != 3");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define XDP_TX_RING 3
+#endif
+#if defined(XDP_UMEM_REG) || (defined(HAVE_DECL_XDP_UMEM_REG) && HAVE_DECL_XDP_UMEM_REG)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((XDP_UMEM_REG) == (4), "XDP_UMEM_REG != 4");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define XDP_UMEM_REG 4
+#endif
+#if defined(XDP_UMEM_FILL_RING) || (defined(HAVE_DECL_XDP_UMEM_FILL_RING) && HAVE_DECL_XDP_UMEM_FILL_RING)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((XDP_UMEM_FILL_RING) == (5), "XDP_UMEM_FILL_RING != 5");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define XDP_UMEM_FILL_RING 5
+#endif
+#if defined(XDP_UMEM_COMPLETION_RING) || (defined(HAVE_DECL_XDP_UMEM_COMPLETION_RING) && HAVE_DECL_XDP_UMEM_COMPLETION_RING)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((XDP_UMEM_COMPLETION_RING) == (6), "XDP_UMEM_COMPLETION_RING != 6");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define XDP_UMEM_COMPLETION_RING 6
+#endif
+#if defined(XDP_STATISTICS) || (defined(HAVE_DECL_XDP_STATISTICS) && HAVE_DECL_XDP_STATISTICS)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((XDP_STATISTICS) == (7), "XDP_STATISTICS != 7");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define XDP_STATISTICS 7
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifdef IN_MPERS
+
+#  error static const struct xlat sock_xdp_options in mpers mode
+
+# else
+
+static
+const struct xlat sock_xdp_options[] = {
+ [XDP_MMAP_OFFSETS] = XLAT(XDP_MMAP_OFFSETS),
+ [XDP_RX_RING] = XLAT(XDP_RX_RING),
+ [XDP_TX_RING] = XLAT(XDP_TX_RING),
+ [XDP_UMEM_REG] = XLAT(XDP_UMEM_REG),
+ [XDP_UMEM_FILL_RING] = XLAT(XDP_UMEM_FILL_RING),
+ [XDP_UMEM_COMPLETION_RING] = XLAT(XDP_UMEM_COMPLETION_RING),
+ [XDP_STATISTICS] = XLAT(XDP_STATISTICS),
+ XLAT_END
+};
+
+# endif /* !IN_MPERS */
+
+#endif /* !XLAT_MACROS_ONLY */
diff --git a/xlat/socketlayers.h b/xlat/socketlayers.h
index 5296344..2239cdc 100644
--- a/xlat/socketlayers.h
+++ b/xlat/socketlayers.h
@@ -47,6 +47,20 @@ DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
 # define SOL_ICMPV6 58
 #endif
+#if defined(SOL_CAN_BASE) || (defined(HAVE_DECL_SOL_CAN_BASE) && HAVE_DECL_SOL_CAN_BASE)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SOL_CAN_BASE) == (100), "SOL_CAN_BASE != 100");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SOL_CAN_BASE 100
+#endif
+#if defined(SOL_CAN_RAW) || (defined(HAVE_DECL_SOL_CAN_RAW) && HAVE_DECL_SOL_CAN_RAW)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SOL_CAN_RAW) == (101), "SOL_CAN_RAW != 101");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SOL_CAN_RAW 101
+#endif
 #if defined(SOL_SCTP) || (defined(HAVE_DECL_SOL_SCTP) && HAVE_DECL_SOL_SCTP)
 DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
 static_assert((SOL_SCTP) == (132), "SOL_SCTP != 132");
@@ -257,6 +271,13 @@ DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
 # define SOL_TLS 282
 #endif
+#if defined(SOL_XDP) || (defined(HAVE_DECL_SOL_XDP) && HAVE_DECL_SOL_XDP)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SOL_XDP) == (283), "SOL_XDP != 283");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SOL_XDP 283
+#endif
 #if defined __alpha__ || defined __hppa__ || defined __mips__ || defined __sparc__
 #if defined(SOL_SOCKET) || (defined(HAVE_DECL_SOL_SOCKET) && HAVE_DECL_SOL_SOCKET)
 DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
@@ -281,6 +302,8 @@ const struct xlat socketlayers[] = {
  XLAT(SOL_UDP),
  XLAT(SOL_IPV6),
  XLAT(SOL_ICMPV6),
+ XLAT(SOL_CAN_BASE),
+ XLAT(SOL_CAN_RAW),
  XLAT(SOL_SCTP),
  XLAT(SOL_UDPLITE),
  XLAT(SOL_RAW),
@@ -311,6 +334,7 @@ const struct xlat socketlayers[] = {
  XLAT(SOL_NFC),
  XLAT(SOL_KCM),
  XLAT(SOL_TLS),
+ XLAT(SOL_XDP),
 #if defined __alpha__ || defined __hppa__ || defined __mips__ || defined __sparc__
  XLAT(SOL_SOCKET),
 #endif
diff --git a/xlat/socktypes.h b/xlat/socktypes.h
index 208c172..113ccb0 100644
--- a/xlat/socktypes.h
+++ b/xlat/socktypes.h
@@ -3,33 +3,90 @@
 #include "gcc_compat.h"
 #include "static_assert.h"
 
-
-#ifndef XLAT_MACROS_ONLY
-
-# ifndef IN_MPERS
-
-const struct xlat socktypes[] = {
+#ifdef __mips__
+#if defined(SOCK_DGRAM) || (defined(HAVE_DECL_SOCK_DGRAM) && HAVE_DECL_SOCK_DGRAM)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SOCK_DGRAM) == (1), "SOCK_DGRAM != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SOCK_DGRAM 1
+#endif
+#if defined(SOCK_STREAM) || (defined(HAVE_DECL_SOCK_STREAM) && HAVE_DECL_SOCK_STREAM)
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SOCK_STREAM) == (2), "SOCK_STREAM != 2");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SOCK_STREAM 2
+#endif
+#else
 #if defined(SOCK_STREAM) || (defined(HAVE_DECL_SOCK_STREAM) && HAVE_DECL_SOCK_STREAM)
-  XLAT(SOCK_STREAM),
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SOCK_STREAM) == (1), "SOCK_STREAM != 1");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SOCK_STREAM 1
 #endif
 #if defined(SOCK_DGRAM) || (defined(HAVE_DECL_SOCK_DGRAM) && HAVE_DECL_SOCK_DGRAM)
-  XLAT(SOCK_DGRAM),
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SOCK_DGRAM) == (2), "SOCK_DGRAM != 2");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SOCK_DGRAM 2
+#endif
 #endif
 #if defined(SOCK_RAW) || (defined(HAVE_DECL_SOCK_RAW) && HAVE_DECL_SOCK_RAW)
-  XLAT(SOCK_RAW),
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SOCK_RAW) == (3), "SOCK_RAW != 3");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SOCK_RAW 3
 #endif
 #if defined(SOCK_RDM) || (defined(HAVE_DECL_SOCK_RDM) && HAVE_DECL_SOCK_RDM)
-  XLAT(SOCK_RDM),
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SOCK_RDM) == (4), "SOCK_RDM != 4");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SOCK_RDM 4
 #endif
 #if defined(SOCK_SEQPACKET) || (defined(HAVE_DECL_SOCK_SEQPACKET) && HAVE_DECL_SOCK_SEQPACKET)
-  XLAT(SOCK_SEQPACKET),
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SOCK_SEQPACKET) == (5), "SOCK_SEQPACKET != 5");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SOCK_SEQPACKET 5
 #endif
 #if defined(SOCK_DCCP) || (defined(HAVE_DECL_SOCK_DCCP) && HAVE_DECL_SOCK_DCCP)
-  XLAT(SOCK_DCCP),
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SOCK_DCCP) == (6), "SOCK_DCCP != 6");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SOCK_DCCP 6
 #endif
 #if defined(SOCK_PACKET) || (defined(HAVE_DECL_SOCK_PACKET) && HAVE_DECL_SOCK_PACKET)
-  XLAT(SOCK_PACKET),
+DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
+static_assert((SOCK_PACKET) == (10), "SOCK_PACKET != 10");
+DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
+#else
+# define SOCK_PACKET 10
+#endif
+
+#ifndef XLAT_MACROS_ONLY
+
+# ifndef IN_MPERS
+
+const struct xlat socktypes[] = {
+#ifdef __mips__
+ XLAT(SOCK_DGRAM),
+ XLAT(SOCK_STREAM),
+#else
+ XLAT(SOCK_STREAM),
+ XLAT(SOCK_DGRAM),
 #endif
+ XLAT(SOCK_RAW),
+ XLAT(SOCK_RDM),
+ XLAT(SOCK_SEQPACKET),
+ XLAT(SOCK_DCCP),
+ XLAT(SOCK_PACKET),
  XLAT_END
 };
 
diff --git a/xlat/v4l2_control_id_bases.h b/xlat/v4l2_control_id_bases.h
index e668d94..cd82577 100644
--- a/xlat/v4l2_control_id_bases.h
+++ b/xlat/v4l2_control_id_bases.h
@@ -31,12 +31,16 @@ DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
 # define V4L2_CID_USER_TI_VPE_BASE (V4L2_CID_BASE + 0x1050)
 #endif
+#ifndef STRACE_WORKAROUND_FOR_V4L2_CID_USER_IMX_BASE
+# define STRACE_WORKAROUND_FOR_V4L2_CID_USER_IMX_BASE
+# undef V4L2_CID_USER_IMX_BASE
+#endif
 #if defined(V4L2_CID_USER_IMX_BASE) || (defined(HAVE_DECL_V4L2_CID_USER_IMX_BASE) && HAVE_DECL_V4L2_CID_USER_IMX_BASE)
 DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
-static_assert((V4L2_CID_USER_IMX_BASE) == ((V4L2_CID_BASE + 0x1090)), "V4L2_CID_USER_IMX_BASE != (V4L2_CID_BASE + 0x1090)");
+static_assert((V4L2_CID_USER_IMX_BASE) == ((V4L2_CID_BASE | 0x10b0)), "V4L2_CID_USER_IMX_BASE != (V4L2_CID_BASE | 0x10b0)");
 DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
 #else
-# define V4L2_CID_USER_IMX_BASE (V4L2_CID_BASE + 0x1090)
+# define V4L2_CID_USER_IMX_BASE (V4L2_CID_BASE | 0x10b0)
 #endif
 #if defined(V4L2_CID_MPEG_BASE) || (defined(HAVE_DECL_V4L2_CID_MPEG_BASE) && HAVE_DECL_V4L2_CID_MPEG_BASE)
 DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
@@ -146,6 +150,21 @@ const struct xlat v4l2_control_id_bases[] = {
  XLAT(V4L2_CID_USER_MEYE_BASE),
  XLAT(V4L2_CID_USER_BTTV_BASE),
  XLAT(V4L2_CID_USER_TI_VPE_BASE),
+#ifndef STRACE_WORKAROUND_FOR_V4L2_CID_USER_IMX_BASE
+# define STRACE_WORKAROUND_FOR_V4L2_CID_USER_IMX_BASE
+/*
+ * * Linux kernel commit v4.18-rc2-106-g421860b9d47053badce4b247576fa48df9ab4c48
+ * * has changed the value of V4L2_CID_USER_IMX_BASE constant introduced
+ * * by commit v4.13-rc1~141^2~121 because the old value was already used
+ * * by V4L2_CID_USER_MAX217X_BASE.
+ * * This is of course an ABI breakage that affects Linux kernels starting
+ * * with 4.13 and up to 4.18, as well as their LTS derivatives.
+ * * Since the imx driver didn't provide any public control ID definitions,
+ * * it looks like the best way to handle this situation is to pretend that
+ * * the old value of V4L2_CID_USER_IMX_BASE didn't exist.
+ * */
+# undef V4L2_CID_USER_IMX_BASE
+#endif
  XLAT(V4L2_CID_USER_IMX_BASE),
  XLAT(V4L2_CID_MPEG_BASE),
  XLAT(V4L2_CID_MPEG_CX2341X_BASE),
-- 
1.8.3.1

