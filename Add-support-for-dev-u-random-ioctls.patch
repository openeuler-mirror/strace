From 2649c8c8b6832f267fb20cbcfdead19d32b8f2fc Mon Sep 17 00:00:00 2001
From: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
Date: Mon, 5 Nov 2018 17:29:00 +0000
Subject: [PATCH 102/293] Add support for /dev/[u]random ioctls

* random_ioctl.c: New file.
* Makefile.am (strace_SOURCES): Add it.
* defs.h (DECL_IOCTL): Add random.
* ioctl.c (ioctl_decode): Add 'R' case.
* xlat/random_ioctl_cmds.in: New file.
* tests/ioctl_random.c: New file.
* tests/pure_executables.list: Likewise.
* tests/gen_tests.in (ioctl_random): New entry.

Signed-off-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
---
 Makefile.am                 |  1 +
 defs.h                      |  1 +
 ioctl.c                     |  2 ++
 random_ioctl.c              | 81 +++++++++++++++++++++++++++++++++++++++++++++
 xlat/random_ioctl_cmds.in   |  7 ++++
 5 files changed, 92 insertions(+)
 create mode 100644 random_ioctl.c
 create mode 100644 xlat/random_ioctl_cmds.in

diff --git a/Makefile.am b/Makefile.am
index db16b3a..350bc51 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -267,6 +267,7 @@ strace_SOURCES =	\
 	ptp.c		\
 	ptrace.h	\
 	quota.c		\
+	random_ioctl.c	\
 	readahead.c	\
 	readlink.c	\
 	reboot.c	\
diff --git a/defs.h b/defs.h
index 5ba95f5..b8d561a 100644
--- a/defs.h
+++ b/defs.h
@@ -973,6 +973,7 @@ DECL_IOCTL(kvm);
 DECL_IOCTL(nbd);
 DECL_IOCTL(nsfs);
 DECL_IOCTL(ptp);
+DECL_IOCTL(random);
 DECL_IOCTL(scsi);
 DECL_IOCTL(term);
 DECL_IOCTL(ubi);
diff --git a/ioctl.c b/ioctl.c
index 4c9e7db..e7dd4c4 100644
--- a/ioctl.c
+++ b/ioctl.c
@@ -329,6 +329,8 @@ ioctl_decode(struct tcb *tcp)
 		return inotify_ioctl(tcp, code, arg);
 	case 0xab:
 		return nbd_ioctl(tcp, code, arg);
+	case 'R':
+		return random_ioctl(tcp, code, arg);
 	default:
 		break;
 	}
diff --git a/random_ioctl.c b/random_ioctl.c
new file mode 100644
index 0000000..6eaf6da
--- /dev/null
+++ b/random_ioctl.c
@@ -0,0 +1,81 @@
+/*
+ * Copyright (c) 2018 The strace developers.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "defs.h"
+#include "print_fields.h"
+
+#include <linux/types.h>
+#include <linux/random.h>
+
+#define XLAT_MACROS_ONLY
+# include "xlat/random_ioctl_cmds.h"
+#undef XLAT_MACROS_ONLY
+
+/*
+ * RNDGETPOOL was removed in 2.6.9, so non-ancient kernels always
+ * return -EINVAL for that.
+ */
+
+int
+random_ioctl(struct tcb *const tcp, const unsigned int code,
+	   const kernel_ulong_t arg)
+{
+	struct rand_pool_info info;
+	kernel_ulong_t buf;
+
+	switch (code) {
+	case RNDGETENTCNT:
+		if (entering(tcp))
+			return 0;
+		ATTRIBUTE_FALLTHROUGH;
+	case RNDADDTOENTCNT:
+		tprints(", ");
+		printnum_int(tcp, arg, "%d");
+		break;
+
+	case RNDADDENTROPY:
+		tprints(", ");
+		if (!umove_or_printaddr(tcp, arg, &info)) {
+			PRINT_FIELD_D("{", info, entropy_count);
+			PRINT_FIELD_D(", ", info, buf_size);
+			tprints(", buf=");
+			buf = arg + offsetof(struct rand_pool_info, buf);
+			printstrn(tcp, buf, info.buf_size);
+			tprints("}");
+		}
+		break;
+
+	/* ioctls with no parameters */
+	case RNDZAPENTCNT:
+	case RNDCLEARPOOL:
+	case RNDRESEEDCRNG:
+		break;
+	default:
+		return RVAL_DECODED;
+	}
+	return RVAL_IOCTL_DECODED;
+}
diff --git a/xlat/random_ioctl_cmds.in b/xlat/random_ioctl_cmds.in
new file mode 100644
index 0000000..1b31dc5
--- /dev/null
+++ b/xlat/random_ioctl_cmds.in
@@ -0,0 +1,7 @@
+RNDGETENTCNT		_IOR( 'R', 0x00, int )
+RNDADDTOENTCNT		_IOW( 'R', 0x01, int )
+RNDGETPOOL		_IOR( 'R', 0x02, int [2] )
+RNDADDENTROPY		_IOW( 'R', 0x03, int [2] )
+RNDZAPENTCNT		_IO( 'R', 0x04 )
+RNDCLEARPOOL		_IO( 'R', 0x06 )
+RNDRESEEDCRNG		_IO( 'R', 0x07 )
-- 
1.7.12.4

